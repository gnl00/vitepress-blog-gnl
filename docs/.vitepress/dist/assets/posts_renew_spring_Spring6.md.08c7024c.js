import{_ as n,c as a,e as l,d as p,o as e,r as o}from"./app.3168fcca.js";const u=JSON.parse('{"title":"Spring6","description":"","frontmatter":{"aside":false},"headers":[{"level":2,"title":"事务管理","slug":"事务管理","link":"#事务管理","children":[{"level":3,"title":"事务接口及抽象类","slug":"事务接口及抽象类","link":"#事务接口及抽象类","children":[]},{"level":3,"title":"声明式事务","slug":"声明式事务","link":"#声明式事务","children":[]},{"level":3,"title":"编程式事务","slug":"编程式事务","link":"#编程式事务","children":[]},{"level":3,"title":"回滚规则","slug":"回滚规则","link":"#回滚规则","children":[]},{"level":3,"title":"事务失效","slug":"事务失效","link":"#事务失效","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"relativePath":"posts/renew/spring/Spring6.md"}'),t={name:"posts/renew/spring/Spring6.md"},c=p(`<h1 id="spring6" tabindex="-1">Spring6 <a class="header-anchor" href="#spring6" aria-hidden="true">#</a></h1><h2 id="事务管理" tabindex="-1">事务管理 <a class="header-anchor" href="#事务管理" aria-hidden="true">#</a></h2><h3 id="事务接口及抽象类" tabindex="-1">事务接口及抽象类 <a class="header-anchor" href="#事务接口及抽象类" aria-hidden="true">#</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Spring 事务的顶层父类，用来管理 Spring 事务</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TransactionManager</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * PlatformTransactionManager 是 Spring 事务框架中最基础/重要的接口</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * The TransactionException that can be thrown by any of the PlatformTransactionManager interface’s methods is unchecked</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PlatformTransactionManager</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TransactionManager</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 此方法根据参数 TransactionDefinition 返回一个 TransactionStatus 对象</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 返回的 TransactionStatus 可能是一个新事务或者已存在的事务（如果当前调用栈中存在事务）</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 参数 TransactionDefinition 描述传播行为、隔离级别、超时等</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 此方法会根据参数对事务传播行为的定义，返回一个当前处于活跃状态的事务（如果存在），或创建一个新的事务</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 参数对事务隔离级别或者超时时间的设置，会忽略已存在的事务，只作用于新建的事务</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 并非所有事务定义设置都会受到每个事务管理器的支持，在遇到不受支持的设置时事务管理器会抛出异常</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">TransactionStatus</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getTransaction</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">TransactionDefinition</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">definition</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">throws</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">TransactionException</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">commit</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">TransactionStatus</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">status</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">throws</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">TransactionException</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">rollback</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">TransactionStatus</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">status</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">throws</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">TransactionException</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Based on the propagation behavior definitions analogous to EJB CMT attributes.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Note that isolation level and timeout settings will not get applied unless an actual new transaction gets started.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TransactionDefinition</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Spring 事务的隔离级别与 JDBC 定义的隔离级别对应</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> ISOLATION_DEFAULT </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	 * 脏读：读取到另一个事务修改但未提交的数据</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	 * 不可重复度：当事务 A 首先读取数据，事务 B 也读取同一个数据，并将数据修改，而后事务 A 再次读取就会得到和第一次读取不一样的结果</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	 * 幻读：一个事务读取所有满足 WHERE 条件的行，第二个事务插入一条满足 WHERE 条件的记录，第一个事务使用相同条件重新读取，在第二次读取中读取出额外的 &quot;幻影 &quot;记录</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	 */</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#89DDFF;">  	</span><span style="color:#676E95;font-style:italic;">// 读未提交</span></span>
<span class="line"><span style="color:#89DDFF;">  	</span><span style="color:#676E95;font-style:italic;">// 可读取到另一个事务修改但未提交的数据</span></span>
<span class="line"><span style="color:#89DDFF;">  	</span><span style="color:#676E95;font-style:italic;">// 存在脏读/不可重复度/幻读</span></span>
<span class="line"><span style="color:#A6ACCD;">  	</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> ISOLATION_READ_UNCOMMITTED </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// same as java.sql.Connection.TRANSACTION_READ_UNCOMMITTED;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#89DDFF;">  	</span><span style="color:#676E95;font-style:italic;">// 读已提交</span></span>
<span class="line"><span style="color:#89DDFF;">  	</span><span style="color:#676E95;font-style:italic;">// 解决脏读，存在不可重复度/幻读</span></span>
<span class="line"><span style="color:#A6ACCD;">  	</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> ISOLATION_READ_COMMITTED </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// same as java.sql.Connection.TRANSACTION_READ_COMMITTED;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#89DDFF;">  	</span><span style="color:#676E95;font-style:italic;">// 可重复度</span></span>
<span class="line"><span style="color:#89DDFF;">  	</span><span style="color:#676E95;font-style:italic;">// 解决脏读/不可重复度，存在幻读</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> ISOLATION_REPEATABLE_READ </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// same as java.sql.Connection.TRANSACTION_REPEATABLE_READ;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#89DDFF;">  	</span><span style="color:#676E95;font-style:italic;">// 可序列化/串行化，事务串行化执行，一次只允许一个事务操作</span></span>
<span class="line"><span style="color:#89DDFF;">  	</span><span style="color:#676E95;font-style:italic;">// 解决脏读/不可重复度/幻读</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> ISOLATION_SERIALIZABLE </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// same as java.sql.Connection.TRANSACTION_SERIALIZABLE;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  	</span><span style="color:#676E95;font-style:italic;">// 以下为 Spring 事务管理支持的传播行为，一共 7 种</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	 * Support a current transaction. Create a new one if none exists. This is typically the default setting of a transaction definition and typically defines a transaction synchronization scope.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	 * 如果当前存在事务，则加入；如果事务不存在，则新建</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	 * 这通常是事务的默认隔离级别，通常定义事务同步范围</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	 */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> PROPAGATION_REQUIRED </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  	</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	 * Support a current transaction; execute non-transactionally if none exists.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	 * 如果当前存在事务，则加入；如果事务不存在，则以无事务的方式运行</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	 */</span></span>
<span class="line"><span style="color:#A6ACCD;">  	</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> PROPAGATION_SUPPORTS </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	 * Support a current transaction; throw an exception if no current transaction exists.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	 * 如果当前存在事务，则加入；如果不存在则抛出异常</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	 */</span></span>
<span class="line"><span style="color:#A6ACCD;">  	</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> PROPAGATION_MANDATORY </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	 * Create a new transaction, suspending the current transaction if one exists.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	 * 如果存在事务，则暂停当前事务，创建新事务</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	 */</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> PROPAGATION_REQUIRES_NEW </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	 * Do not support a current transaction; rather always execute non-transactionally.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	 * 总是以无事务的方式运行</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	 */</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> PROPAGATION_NOT_SUPPORTED </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	 * Do not support a current transaction; throw an exception if a current transaction exists.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	 * 如果当前存在事务则抛出异常</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	 */</span></span>
<span class="line"><span style="color:#A6ACCD;">  	</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> PROPAGATION_NEVER </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	 * Execute within a nested transaction if a current transaction exists, behaving like PROPAGATION_REQUIRED otherwise.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	 * 如果当前存在事务，则在嵌套事务中执行，否则表现为 PROPAGATION_REQUIRED</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	 */</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> PROPAGATION_NESTED </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">6</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	 * 是否将事务优化为只读事务，只读标志适用于任何事务隔离级别</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	 */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">isReadOnly</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * PlatformTransactionManager 的抽象实现类，它预先实现了定义的传播行为，并负责处理事务的同步。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 如果需要自定义事务管理框架，继承 AbstractPlatformTransactionManager 即可。子类只需要关心事务的开始，暂停，恢复和提交。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">abstract</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AbstractPlatformTransactionManager</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PlatformTransactionManager</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Serializable</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br></div></div><h3 id="声明式事务" tabindex="-1">声明式事务 <a class="header-anchor" href="#声明式事务" aria-hidden="true">#</a></h3><h4 id="开启声明式事务" tabindex="-1">开启声明式事务 <a class="header-anchor" href="#开启声明式事务" aria-hidden="true">#</a></h4><p>Spring 的声明式事务支持需手动开启，注解驱动使用 <code>@EnableTransactionManagement</code> 标注在 Spring 配置类上，XML 开发则在配置文件加上 <code>&lt;tx:annotation-driven/&gt;</code> 。</p><blockquote><p>However <code>@EnableTransactionManagement</code> is more flexible; it will fall back to a by-type lookup for any <code>TransactionManager</code> bean in the container. Thus the name can be &quot;txManager&quot;, &quot;transactionManager&quot;, or &quot;tm&quot;: it simply does not matter.</p></blockquote><p>使用 <code>@EnableTransactionManagement</code> 相对来说更加灵活，因为它不仅可以根据名称还能根据类型将 <code>TransactionManager</code> 加载到 IOC 容器中。</p><blockquote><p><code>@EnableTransactionManagement</code> and <code>&lt;tx:annotation-driven/&gt;</code> look for <code>@Transactional</code> only on beans in the same application context in which they are defined. This means that, if you put annotation-driven configuration in a <code>WebApplicationContext</code> for a <code>DispatcherServlet</code>, it checks for <code>@Transactional</code> beans only in your controllers and not in your services.</p></blockquote><p><code>@EnableTransactionManagement</code> 和 <code>&lt;tx:annotation-driven/&gt;</code> 只会扫描和它们自己相同的应用上下文内的 <code>@Transactional</code> 注解，也就是说，如果在 <code>DispatcherServlet</code> 的 <code>WebApplicationContext</code> 中标注 <code>@EnableTransactionManagement</code>，它只会扫描和 Controller 同级别下的 <code>@Transactional</code>。</p><h4 id="transactional" tabindex="-1">@Transactional <a class="header-anchor" href="#transactional" aria-hidden="true">#</a></h4><blockquote><p>When you use transactional proxies with Spring’s standard configuration, you should apply the <code>@Transactional</code> annotation only to methods with <code>public</code> visibility. If you do annotate <code>protected</code>, <code>private</code>, or package-visible methods with the <code>@Transactional</code> annotation, no error is raised, but the annotated method does not exhibit the configured transactional settings.</p></blockquote><p><code>@Transactional</code> 注解可以标注在类或者 <code>public</code> 方法上，如果标注在 <code>protected/private</code> 方法或者近包内可见的方法上不会报错，但是在这些地方 Spring 事务不会生效。</p><blockquote><p>When using <code>@EnableTransactionManagement</code> in a <code>@Configuration</code> class, <code>protected</code> or package-visible methods can also be made transactional for class-based proxies by registering a custom <code>transactionAttributeSource</code> bean.</p></blockquote><p>如果在 Spring 配置类上标注 <code>@EnableTransactionManagement</code>，可以通过注入自定义的 <code>TransactionAttributeSource</code> 来让事务可以在类中的非 <code>public</code> 方法中生效。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * enable support for protected and package-private @Transactional methods in</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * class-based proxies.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Bean</span></span>
<span class="line"><span style="color:#C792EA;">TransactionAttributeSource</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">transactionAttributeSource</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">AnnotationTransactionAttributeSource</span><span style="color:#89DDFF;">(false);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>类和方法的优先级</strong></p><p><code>@Transactional</code> 注解可以同时标注在类和方法上，但是标注在方法上的优先级会比标注在类上的优先级高。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Transactional</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">readOnly</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true)</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DefaultFooService</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">FooService</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Foo</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getFoo</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">fooName</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 标注在方法上的优先级大于类上</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Transactional</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">readOnly</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">propagation</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Propagation</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">REQUIRES_NEW</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">updateFoo</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Foo</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">foo</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><strong>属性设置</strong></p><ul><li><code>propagation</code> default <code>Propagation.REQUIRED</code></li><li><code>isolation</code> default <code>Isolation.DEFAULT</code></li><li><code>timeout</code> default <code>TransactionDefinition.TIMEOUT_DEFAULT = -1</code></li><li><code>readOnly</code> 是否是只读事务 default <code>false</code></li><li><code>rollbackFor </code> Any <code>RuntimeException</code> or <code>Error</code> triggers rollback, and any checked <code>Exception</code> does not.</li><li><code>noRollbackFor</code></li></ul><h3 id="编程式事务" tabindex="-1">编程式事务 <a class="header-anchor" href="#编程式事务" aria-hidden="true">#</a></h3><blockquote><p>因为开发中用的大多都是声明式事务，编程式事务做了解即可</p></blockquote><h4 id="transactiontemplate" tabindex="-1">TransactionTemplate <a class="header-anchor" href="#transactiontemplate" aria-hidden="true">#</a></h4><p>类似 JdbcTemplate，由 Spring 提供的操作事务的模版方法类。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SimpleService</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Service</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// single TransactionTemplate shared amongst all methods in this instance</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">TransactionTemplate</span><span style="color:#A6ACCD;"> transactionTemplate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// use constructor-injection to supply the PlatformTransactionManager</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SimpleService</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">PlatformTransactionManager</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">transactionManager</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">transactionTemplate </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">TransactionTemplate</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">transactionManager</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  	</span><span style="color:#676E95;font-style:italic;">// with result</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">someServiceMethod</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> transactionTemplate</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">execute</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">TransactionCallback</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// the code in this method runs in a transactional context</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">doInTransaction</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">TransactionStatus</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">status</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#82AAFF;">updateOperation1</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">resultOfUpdateOperation2</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  	</span><span style="color:#676E95;font-style:italic;">// without result</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">methodWithoutResult</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        transactionTemplate</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">execute</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">TransactionCallbackWithoutResult</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">protected</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">doInTransactionWithoutResult</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">TransactionStatus</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">status</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#82AAFF;">updateOperation1</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#82AAFF;">updateOperation2</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#89DDFF;">    	</span><span style="color:#676E95;font-style:italic;">// with rollback</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">methodWithoutRollback</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        transactionTemplate</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">execute</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">TransactionCallbackWithoutResult</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">protected</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">doInTransactionWithoutResult</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">TransactionStatus</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">status</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#82AAFF;">updateOperation1</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#82AAFF;">updateOperation2</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">SomeBusinessException</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">ex</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                		status</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setRollbackOnly</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><h4 id="transactionmanager" tabindex="-1">TransactionManager <a class="header-anchor" href="#transactionmanager" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">DefaultTransactionDefinition</span><span style="color:#A6ACCD;"> def </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DefaultTransactionDefinition</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 定义事务属性，如事务名，传播行为，隔离级别等</span></span>
<span class="line"><span style="color:#A6ACCD;">def</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setName</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">SomeTxName</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">def</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setPropagationBehavior</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">TransactionDefinition</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">PROPAGATION_REQUIRED</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">TransactionManager</span><span style="color:#A6ACCD;"> txManager </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">JdbcTransactionManager</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#C792EA;">TransactionStatus</span><span style="color:#A6ACCD;"> status </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> txManager</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getTransaction</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">def</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// put your business logic here</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">MyException</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">ex</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    txManager</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">rollback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">status</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#A6ACCD;"> ex</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">txManager</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">commit</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">status</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><strong>声明式事务和编程式事务如何选择</strong></p><ul><li>如果只是在代码中进行小规模的事务操作，选择编程式，比如 <code>TransactionTemplate</code>；</li><li>如果存在大量事务操作，优先选择声明式事务，操作简单，并且还把事务逻辑和业务逻辑分离开，利于维护；</li><li>如果使用的是 Spring 框架，推荐使用声明式事务。</li></ul><br><h3 id="回滚规则" tabindex="-1">回滚规则 <a class="header-anchor" href="#回滚规则" aria-hidden="true">#</a></h3><blockquote><p>In its default configuration, the Spring Framework’s transaction infrastructure code marks a transaction for rollback only in the case of runtime, unchecked exceptions. That is, when the thrown exception is an instance or subclass of <code>RuntimeException</code>. (<code>Error</code> instances also, by default, result in a rollback). Checked exceptions that are thrown from a transactional method do not result in rollback in the default configuration.</p></blockquote><p>Spring 事务只会在遇到运行时异常和未受检查异常时会滚，也就是说只有在遇到 <code>RuntimeException</code> 及其之类或者 <code>Error</code> 及其之类的时候才会回滚。事务遇到受检查异常时，不会回滚，而是将其捕获并抛出。</p><p>但仍然可以通过指定回滚规则，精确配置哪些异常类型会将事务标记为回滚，包括已检查的异常。</p><br><h3 id="事务失效" tabindex="-1">事务失效 <a class="header-anchor" href="#事务失效" aria-hidden="true">#</a></h3><p>1、注解 <code>@Transactional</code> 修饰的类非 Spring 容器对象；</p><p>2、用 <code>@Transactional</code> 修饰方法，且该方法被类内部方法调用；</p><p>3、注解 <code>@Transactional</code> 修饰的方法非 <code>public</code> 修饰；</p><p>4、代码中出现的异常被 catch 代码块捕获，而不是被 Spring 事务框架捕获;</p><p>5、Spring 事务 <code>rollback</code> 策略默认是 <code>RuntimeException</code> 及其子类和 <code>Error</code> 及其之类，其他情况如果未提前定义则事务失效；</p><p>6、数据库不支持事务。</p><br><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-hidden="true">#</a></h2><p><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/data-access.html#transaction" target="_blank" rel="noreferrer">spring#transaction</a></p>`,47);function r(i,y,A,D,C,F){const s=o("Catalog");return e(),a("div",null,[l(s),c])}const d=n(t,[["render",r]]);export{u as __pageData,d as default};
