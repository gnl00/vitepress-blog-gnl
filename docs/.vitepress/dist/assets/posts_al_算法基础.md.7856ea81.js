import{_ as s,c as n,o as a,d as l}from"./app.3168fcca.js";const F=JSON.parse('{"title":"算法基础","description":"","frontmatter":{},"headers":[{"level":2,"title":"位运算基础","slug":"位运算基础","link":"#位运算基础","children":[{"level":3,"title":"实现加减乘除","slug":"实现加减乘除","link":"#实现加减乘除","children":[]}]},{"level":2,"title":"动态规划","slug":"动态规划","link":"#动态规划","children":[]},{"level":2,"title":"回溯","slug":"回溯","link":"#回溯","children":[]},{"level":2,"title":"分治","slug":"分治","link":"#分治","children":[]},{"level":2,"title":"KMP","slug":"kmp","link":"#kmp","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"relativePath":"posts/al/算法基础.md"}'),p={name:"posts/al/算法基础.md"},o=l(`<h1 id="算法基础" tabindex="-1">算法基础 <a class="header-anchor" href="#算法基础" aria-hidden="true">#</a></h1><details class="details custom-block"><summary>TOC</summary><nav class="table-of-contents"><ul><li><a href="#位运算基础">位运算基础</a><ul><li><a href="#实现加减乘除">实现加减乘除</a></li></ul></li><li><a href="#动态规划">动态规划</a></li><li><a href="#回溯">回溯</a></li><li><a href="#分治">分治</a></li><li><a href="#kmp">KMP</a></li><li><a href="#参考">参考</a></li></ul></nav></details><h2 id="位运算基础" tabindex="-1">位运算基础 <a class="header-anchor" href="#位运算基础" aria-hidden="true">#</a></h2><p><strong>运算符号</strong></p><blockquote><p>&amp;、|、^、~、&lt;&lt;、&gt;&gt;</p></blockquote><table><thead><tr><th>符号</th><th>描述</th><th>运算规则</th></tr></thead><tbody><tr><td>&amp;</td><td>与</td><td>两个位都为 1 时，结果才为 1</td></tr><tr><td>|</td><td>或</td><td>两个位都为 0 时，结果才为 0</td></tr><tr><td>^</td><td>异或</td><td>两个位相同为 0，相异为 1</td></tr><tr><td>~</td><td>取反</td><td>0 变 1，1 变 0</td></tr><tr><td>&lt;&lt;</td><td>左移</td><td>各二进位全部左移若干位，高位丢弃，低位补 0（左移运算相当于乘 2^n）</td></tr><tr><td>&gt;&gt;</td><td>右移</td><td>各二进位全部右移若干位，对无符号位，高位补 0；对有符号位，各编译器处理方法不一样，有的补符号位（算术右移），有的补 0（逻辑右移）。（右移运算相当于除 2^n）</td></tr></tbody></table><p><strong>原/反/补码</strong></p><ul><li><p><strong>原 码</strong>，一个整数按照绝对值大小转化成的二进制数称为原码</p><p>例如，<code>0000 1110</code> 是 14 的原码</p></li><li><p><strong>反 码</strong>，将二进制数按位取反，所得到的新二进制数称为原二进制数的反码。原码和反码这两者互为反码</p><p>例如，将 <code>0000 1110</code> 每一位取反，得 <code>1111 0001</code></p></li><li><p><strong>补 码</strong>，反码加1称为补码</p><p><code>1111 0001 + 0000 0001 = 1111 0010</code></p></li></ul><p><strong>按位与运算</strong></p><blockquote><p>参加运算的两个数据，按二进制位进行<code>&amp;</code>运算。两位同时为 1 时，结果才为 1，否则为 0</p></blockquote><p><strong>运算规则</strong></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">0&amp;0=0 0&amp;1=0 1&amp;0=0 1&amp;1=1</span></span>
<span class="line"><span style="color:#A6ACCD;">3&amp;5 ==&gt; 0000 0011 &amp; 0000 0101 = 0000 0001</span></span>
<span class="line"><span style="color:#A6ACCD;">3&amp;5 = 1</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>与运算用途</strong></p><ol><li><p><strong>清零</strong></p><p>如果想将一个单元清零，即使其全部二进制位为 0，只要与一个各位都为 0 的数值进行与运算，结果为 0</p></li><li><p>取一个数的<strong>指定位</strong></p><p>比如，取数 <code>N=10101110</code> 的低 4 位，只需要另找一个数 M，令 M 的低 4 位为 1，其余位为 0，即 <code>M=00001111</code>，然后 N 与 M 进行与运算，<code>N&amp;M=00001110</code> ，即可得到 N 的指定位</p></li><li><p><strong>判断奇偶</strong></p><p>只要根据最末位是 0 还是 1 来判断，是 0 就是偶数，是 1 就是基数。因此可以用<code>if((n &amp; 1) == 1)</code>或<code>if((n &amp; 1) == 0)</code>来判断奇偶</p></li></ol><p><strong>按位或运算</strong></p><blockquote><p>参加运算的两个数据，按二进制位进行<code>|</code>运算。两个位都为 0 时，结果才为 0</p></blockquote><p><strong>运算规则</strong></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">0|0=0 0|1=1 1|0=1 1|1=1</span></span>
<span class="line"><span style="color:#A6ACCD;">3|5 ==&gt; 0000 0011 | 0000 0101 = 0000 0111</span></span>
<span class="line"><span style="color:#A6ACCD;">3|5 = 7</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>需要注意的是，负数按补码形式参加按位或运算</p><p><strong>运算用途</strong></p><ol><li><p>常用来对一个数据的某些位设置为 1</p><p>比如，将数 <code>X=1010 1110</code> 的低 4 位设置为 1，只需要另找一个数 Y，令 Y 的低 4 位为 1，其余位为 0，即<code>Y=0000 1111</code>，然后将 X 与 Y 进行按位或运算（<code>X|Y=1010 1111</code>）即可得到</p></li></ol><p><strong>异或运算</strong></p><blockquote><p>参加运算的两个数据，按二进制位进行<code>^</code>运算。两个位相同为 0，相异为 1</p></blockquote><p><strong>运算规则</strong></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">0^0=0 0^1=1 1^0=1 1^1=0</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>异或的性质</strong></p><ol><li>交换律</li><li>结合律，<code>(a^b)^c == a^(b^c)</code></li><li>对任何数 a，都有 <code>a^a=0</code>，<code>a^0=a</code></li><li>自反性，<code>a^b^b=a^0=a</code></li></ol><p><strong>运算用途</strong></p><ol><li><p>翻转指定位</p><p>比如，将数 <code>X=1010 1110</code> 的低 4 位进行翻转，只需要另找一个数 Y，令 Y 的低 4 位为 1，其余位为 0，即 <code>Y=0000 1111</code>，然后将 X 与 Y 进行异或运算（<code>X^Y=1010 0001</code>）即可得到</p></li><li><p>与 0 相异或值不变</p><p><code>1010 1110 ^ 0000 0000 = 1010 1110</code></p></li><li><p>交换两个数</p></li></ol><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// a=0000 0001</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// b=0000 1111</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Swap</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">a </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> b</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// a = a^b = 0000 1110</span></span>
<span class="line"><span style="color:#F07178;">        a </span><span style="color:#89DDFF;">^=</span><span style="color:#F07178;"> b</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// b = b^a = 0000 0001</span></span>
<span class="line"><span style="color:#F07178;">        b </span><span style="color:#89DDFF;">^=</span><span style="color:#F07178;"> a</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// a = a^b = 0000 1111</span></span>
<span class="line"><span style="color:#F07178;">        a </span><span style="color:#89DDFF;">^=</span><span style="color:#F07178;"> b</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ol start="4"><li>找出数组中只出现过一次的数</li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* 找出数组中只出现过一次的数</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">single</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> temp </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 异或运算</span></span>
<span class="line"><span style="color:#A6ACCD;">        temp </span><span style="color:#89DDFF;">^=</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">temp</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><strong>取反运算</strong></p><blockquote><p>参加运算的一个数据，按二进制位进行<code>~</code>运算。0 变 1，1 变 0</p></blockquote><p><strong>运算规则</strong></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">~1=0</span></span>
<span class="line"><span style="color:#A6ACCD;">~0=1</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>运算用途</strong></p><ol><li><p>使一个数的最低位为 0</p><p>例如，有一个数 a，使 a 的最低位为 0，可以表示为<code>a &amp; ~1</code>。<code>~1</code>的值为 <code>1111 1110</code>，再按<code>&amp;</code>运算，最低位一定为 0。因为<code>~</code>运算符的优先级比算术运算符、关系运算符、逻辑运算符和其他运算符都高</p></li></ol><p><strong>左移运算</strong></p><blockquote><p>将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃，右边补 0）</p></blockquote><p><strong>运算规则</strong></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">// a= 0000 0001 = 1</span></span>
<span class="line"><span style="color:#A6ACCD;">a = a &lt;&lt; 2 = 0000 0100 = 4</span></span>
<span class="line"><span style="color:#A6ACCD;">相当于，a*2^2 = 1*4 = 4</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>右移运算</strong></p><blockquote><p>将一个数的各二进制位全部右移若干位，正数左补 0，负数左补 1，右边丢弃</p></blockquote><p><strong>运算规则</strong></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">// a= 0000 1000 = 8</span></span>
<span class="line"><span style="color:#A6ACCD;">a = a &gt;&gt; 2 = 0000 0010 = 2</span></span>
<span class="line"><span style="color:#A6ACCD;">相当于，a/2^2 = 8/4 = 2</span></span>
<span class="line"><span style="color:#A6ACCD;">// 无符号右移，左补0，右边丢弃</span></span>
<span class="line"><span style="color:#A6ACCD;">a = a &gt;&gt;&gt; 2</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>复合运算</strong></p><blockquote><p>位运算符与赋值运算符结合，组成新的复合赋值运算符</p></blockquote><p><strong>运算符</strong></p><table><thead><tr><th>运算符</th><th>例子</th><th>等价于</th></tr></thead><tbody><tr><td>&amp;=</td><td>a&amp;=b</td><td>a=a&amp;b</td></tr><tr><td>|=</td><td>a|=b</td><td>a=a|b</td></tr><tr><td>&gt;&gt;=</td><td>a&gt;&gt;=b</td><td>a=a&gt;&gt;b</td></tr><tr><td>&lt;&lt;=</td><td>a&lt;&lt;=b</td><td>a=a&lt;&lt;b</td></tr><tr><td>^=</td><td>a^=b</td><td>a=a^b</td></tr></tbody></table><p><strong>运算规则</strong></p><p>不同长度的数据进行位运算，如果两个不同长度的数据进行位运算时，系统会将二者按右端对齐，正数左补 0，负数左补 1，然后进行位运算</p><h3 id="实现加减乘除" tabindex="-1">实现加减乘除 <a class="header-anchor" href="#实现加减乘除" aria-hidden="true">#</a></h3><p><strong>加法</strong></p><p><strong>实现步骤</strong></p><ol><li><p>不考虑进位，分别将各位数相加，结果存为 sum</p></li><li><p>只考虑进位，结果存为 carry</p></li><li><p>如果步骤 2 中的 carry 不为 0，则将 sum 和 carry 相加重复步骤 1 的操作</p><p>如果 carry=0，运算结束，sum 即为运算结果</p></li></ol><p><strong>举例说明</strong></p><p>十进制例，例如， 13+9</p><ol><li>不考虑进位，第一步得 sum=12</li><li>不考虑进位，第二步得 carry=10</li><li>判断 carry 是否为 0，carry 结果不是 0，将 sum 和 carry 相加重复步骤 1 操作</li><li>不考虑进位，新一轮的 sum=22</li><li>只考虑进位，新一轮的 carry=0</li><li>判断 carry 是否为 0，carry=0，运算结束，结果即为 sum</li></ol><p>二进制例，例如，13 的二进制为 <code>0000 1101</code>，9 的二进制为 <code>0000 1001</code></p><ol><li>不考虑进位，分别对各位数相加，<code>sum = 0000 1101 + 0000 1001 = 0000 0100</code>，在位运算中，相当于<strong>异或运算</strong></li><li>只考虑进位，<code>carry = 0000 1101 + 0000 1001 = 0001 0010</code>，在为运算中，相当于<strong>先进行与运算，再将结果左移1位</strong></li><li>判断 carry 是否为 0，为 0 结束，否则重复</li></ol><p><strong>代码实现</strong></p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 位运算实现加法，递归实现</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">b </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 先异或</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> sum </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">^</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 再进行与，然后左移1位</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> carry </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">sum</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> carry</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><strong>减法</strong></p><blockquote><p>减法可以看成被减数加上减数的补码</p></blockquote><p><strong>实现步骤</strong></p><ol><li>取得减数的反码，即 1 变 0，0 变 1</li><li>将减数的<code>反码+1</code>，得到减数的<strong>补码</strong></li><li>将<strong>被减数与减数的补码相加</strong></li></ol><p><strong>代码实现</strong></p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 位运算实现减法</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">subtraction</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">~</span><span style="color:#A6ACCD;">b </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>乘法</strong></p><blockquote><p>十进制乘法的步骤对于二进乘法也适用</p></blockquote><p><strong>实现步骤</strong></p><ol><li>判断<strong>乘数是否为 0</strong>，为 0 跳到 ④</li><li>将<strong>乘数和 1 作与运算</strong>，确定末尾是 1 还是 0，如果是 1，则<strong>相加数为当前被乘数</strong>；如果为 0，则<strong>相加数为 0</strong>；将<strong>所有的相加数加到一起</strong>，就是最终结果</li><li>被乘数左移 1 位，乘数右移 1 位，回到步骤 ①</li><li>确定符号位，输出结果</li></ol><p><strong>代码实现</strong></p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 位运算实现乘法</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#F78C6C;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#676E95;font-style:italic;"> 被乘数</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#F78C6C;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#676E95;font-style:italic;"> 乘数</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#F78C6C;font-style:italic;">@return</span><span style="color:#676E95;font-style:italic;"> int</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">multi</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> res </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 1. 判断乘数是否为0，为0直接返回0</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">b </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 确定末尾是1还是0</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">((</span><span style="color:#A6ACCD;">b </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 末尾为1，相加数是当前被乘数</span></span>
<span class="line"><span style="color:#A6ACCD;">            res </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 移位</span></span>
<span class="line"><span style="color:#A6ACCD;">            a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 末尾为0，相加数为0</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// res += 0，res不用执行操作</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 移位</span></span>
<span class="line"><span style="color:#A6ACCD;">            a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> res</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p><strong>除法</strong></p><p><strong>实现思路</strong></p><ul><li>除法可以转换成减法运算，即用被除数不断减去除数，直到被除数小于除数，此时两个数相减的次数就是商，而最终的被除数就是余数。</li><li>需要注意的是符号的确定，商的符号和乘法运算中的乘积的符号确定一样，取决于被除数和除数，同号为正，异号为负；余数的符号和被除数一致</li></ul><p><strong>代码实现</strong></p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 位运算实现除法</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#F78C6C;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#676E95;font-style:italic;"> 被除数</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#F78C6C;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#676E95;font-style:italic;"> 除数</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#F78C6C;font-style:italic;">@return</span><span style="color:#676E95;font-style:italic;"> int</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">division</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> res </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        res </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">division</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">subtraction</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> res</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><br><h2 id="动态规划" tabindex="-1">动态规划 <a class="header-anchor" href="#动态规划" aria-hidden="true">#</a></h2><br><h2 id="回溯" tabindex="-1">回溯 <a class="header-anchor" href="#回溯" aria-hidden="true">#</a></h2><br><h2 id="分治" tabindex="-1">分治 <a class="header-anchor" href="#分治" aria-hidden="true">#</a></h2><br><h2 id="kmp" tabindex="-1">KMP <a class="header-anchor" href="#kmp" aria-hidden="true">#</a></h2><br><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-hidden="true">#</a></h2><p><a href="https://blog.csdn.net/DBC_121/article/details/103668004" target="_blank" rel="noreferrer">彻底搞清楚Java的位运算（位实现加减乘除）</a></p>`,91),e=[o];function t(r,c,i,y,D,C){return a(),n("div",null,e)}const b=s(p,[["render",t]]);export{F as __pageData,b as default};
