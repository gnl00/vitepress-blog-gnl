import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.834b76fb.js";const I=JSON.parse('{"title":"Java IO","description":"","frontmatter":{},"headers":[],"relativePath":"posts/be/java/io/Java-IO.md","filePath":"posts/be/java/io/Java-IO.md"}'),p={name:"posts/be/java/io/Java-IO.md"},o=l(`<h1 id="java-io" tabindex="-1">Java IO <a class="header-anchor" href="#java-io" aria-label="Permalink to &quot;Java IO&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><blockquote><p>Java 中的 IO 操作，包括传统的 BIO（Blocking IO）和现代的 NIO（Non-Blocking IO）。在处理大量数据时，BIO 往往无法满足性能要求，因此 NIO 成为更好的选择。</p><p>在实际应用中，BIO 适用于连接数比较少的情况下，如数据库连接、文件上传等；而 NIO 适用于连接数较多且连接时间较短的情况下，如聊天服务器、在线游戏等。</p></blockquote><table><thead><tr><th></th><th>BIO</th><th>NIO</th></tr></thead><tbody><tr><td>读写方式</td><td>字符流/字节流</td><td>Channel</td></tr><tr><td>缓冲</td><td>读写缓冲</td><td>读写缓冲</td></tr><tr><td>连接</td><td>一连接一线程</td><td>Selector 多路复用</td></tr></tbody></table><p><strong>IO 多路复用技术</strong></p><blockquote><p>IO 多路复用模型是指在同一个线程中处理多个 IO 操作的模型。通常使用的 IO 模型包括阻塞 IO、非阻塞 IO、IO 多路复用和异步 IO。</p><p>在阻塞 IO 模型中，线程会一直等待 IO 操作完成，而在非阻塞 IO 模型中，线程不会等待 IO 操作完成，而是通过轮询的方式不断查询 IO 操作状态。而 IO 多路复用模型则通过一个统一的系统调用将多个 IO 事件注册到同一个地方，当有 IO 事件就绪时，就会通知线程进行处理。</p><p>常见的 IO 多路复用技术包括</p><ul><li><p>select</p><p>select 函数是最早的多路复用函数之一，可监视的文件描述符数量有限（默认为 1024），其实现方式是遍历整个 fd_set 集合，时间复杂度为 O(N)。select 每次调用都会把 fd_set 集合从用户态拷贝到内核态，所以性能较低。此外，select 函数的实现方式要求用户传递 fd_set 集合，所以它存在一定的安全漏洞。</p></li><li><p>poll</p><p>poll 函数也是一种多路复用机制，可监视的文件描述符数量不受限制。poll 函数通过链表来保存文件描述符，时间复杂度为 O(N)。poll 函数不会像 select 函数一样每次都把 fd_set 集合从用户态拷贝到内核态，而是只需要把链表从用户态拷贝到内核态即可。因此，poll 函数比 select 函数性能略好。</p></li><li><p>epoll</p><p>epoll 函数是 Linux 下的一种 IO 多路复用机制，可监视的文件描述符数量也不受限制。epoll 函数使用了事件驱动方式，所以效率比 select 和 poll 高很多。epoll 函数内部使用了红黑树来管理文件描述符，时间复杂度为 O(log N)。此外，epoll 函数能够避免传统的 IO 模型在连接数量增大时的性能下降问题。在 Linux 2.6 版本之后，epoll 已经成为了最常用的 IO 多路复用机制。</p></li></ul><br><p>fd_set 是在使用 IO 多路复用技术中 select/poll/epoll 用于存储被监控的文件描述符（file descriptor）的数据结构</p></blockquote><blockquote><p>Java NIO 实现中，早期版本使用的是 select，而自 JDK 1.5 版本开始，Java NIO 实现中采用的是 epoll</p></blockquote><br><p><strong>零拷贝</strong></p><blockquote><p>零拷贝（Zero Copy）是指数据在不需要经过用户态和内核态之间的数据拷贝，直接在内核空间中进行数据传输的技术。主要是为了解决数据传输过程中频繁拷贝所带来的性能问题。</p><p>在传统的 IO 操作中，数据需要先从磁盘或网络中读取到内核空间，再从内核空间拷贝到用户空间，最后再通过网络传输给接收方。这种传输方式会导致数据在用户空间和内核空间之间频繁拷贝，造成额外的 CPU 开销和内存带宽消耗，影响系统的性能。而零拷贝技术则可以避免这种数据拷贝，将数据在内核空间中直接进行传输。</p><p>零拷贝技术的出现，主要是为了提升数据传输的性能。在数据传输过程中，零拷贝可以减少拷贝操作，从而减少了 CPU 的消耗和内存带宽的使用。此外，零拷贝还可以降低应用程序的内存占用，提高系统的吞吐量。</p></blockquote><blockquote><p>在 Java 中，零拷贝技术可以通过 NIO 中的 FileChannel 类实现。FileChannel 提供了 transferTo() 和 transferFrom() 方法，可以直接将数据在内核空间中进行传输，避免了数据在用户空间和内核空间之间的拷贝。同时，Java 也提供了 MappedByteBuffer 类，可以将文件直接映射到内存中，从而避免了文件在内存和磁盘之间的拷贝。</p></blockquote><br><h2 id="bio" tabindex="-1">BIO <a class="header-anchor" href="#bio" aria-label="Permalink to &quot;BIO&quot;">​</a></h2><blockquote><p>BIO（阻塞 IO）是传统的 IO 操作，它是一种同步阻塞的IO模式，即在执行输入/输出操作时，线程会被阻塞，直到操作完成。这意味着当一个线程在执行 IO 操作时，其他线程将被阻塞，直到该操作完成。</p><p>在 Java 中，BIO 是通过 InputStream 和 OutputStream 类来实现的</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> (InputStream in </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileInputStream</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;file.txt&quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> b;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> ((b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> in.</span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">()) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 处理读取到的数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 处理异常</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (InputStream in </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileInputStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;file.txt&quot;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> in.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 处理读取到的数据</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 处理异常</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>在上面的代码中，InputStream 类的 read 方法将被阻塞，直到它从文件中读取到数据。由于该操作是同步的，因此该线程将一直处于阻塞状态，直到该操作完成。如果有多个线程执行类似的操作，则这些线程将相互阻塞，导致应用程序的性能降低。</p></blockquote><blockquote><p>BIO 阻塞式 IO 模型，每次连接都需要单独开启线程来处理读写操作，当并发连接数比较大时，会创建大量的线程，占用大量的系统资源，容易导致系统崩溃。</p></blockquote><blockquote><p>BIO 模型中，ServerSocket 负责绑定 IP 地址，启动监听端口；Socket 负责发起连接操作。连接成功后，双方通过 InputStream 和 OutputStream 进行同步阻塞式数据传输。</p></blockquote><br><h2 id="nio" tabindex="-1">NIO <a class="header-anchor" href="#nio" aria-label="Permalink to &quot;NIO&quot;">​</a></h2><blockquote><p>NIO（非阻塞 IO）是一种新的 IO 操作方式，它是一种基于事件驱动的 IO 模式，即在执行输入/输出操作时，线程不会被阻塞，而是可以继续执行其他操作。这使得一个线程可以同时处理多个输入/输出操作。</p></blockquote><blockquote><p>NIO 中的核心组件有三个：Channel（通道）、Buffer（缓冲区）和 Selector（选择器）。通道负责传输数据，缓冲区负责存储数据，选择器负责监听通道上的事件，并将事件分发给对应的线程进行处理。</p></blockquote><blockquote><p>在 Java 中，NIO 是通过 Channel 和 Buffer 类来实现的</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> (RandomAccessFile file </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RandomAccessFile</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;file.txt&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;r&quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    FileChannel channel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> file.</span><span style="color:#B392F0;">getChannel</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    ByteBuffer buffer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ByteBuffer.</span><span style="color:#B392F0;">allocate</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> bytesRead </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> channel.</span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">(buffer);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (bytesRead </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        buffer.</span><span style="color:#B392F0;">flip</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (buffer.</span><span style="color:#B392F0;">hasRemaining</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 处理读取到的数据</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">((</span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;">) buffer.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        buffer.</span><span style="color:#B392F0;">clear</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        bytesRead </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> channel.</span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">(buffer);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 处理异常</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (RandomAccessFile file </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RandomAccessFile</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;file.txt&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;r&quot;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">    FileChannel channel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> file.</span><span style="color:#6F42C1;">getChannel</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    ByteBuffer buffer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ByteBuffer.</span><span style="color:#6F42C1;">allocate</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> bytesRead </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> channel.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(buffer);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (bytesRead </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        buffer.</span><span style="color:#6F42C1;">flip</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (buffer.</span><span style="color:#6F42C1;">hasRemaining</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 处理读取到的数据</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">((</span><span style="color:#D73A49;">char</span><span style="color:#24292E;">) buffer.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        buffer.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        bytesRead </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> channel.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(buffer);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 处理异常</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>在上面的代码中，FileChannel 的 read 方法将不会阻塞线程，因此该线程可以同时执行其他操作。此外，使用 Buffer 类可以缓存数据，以便在处理数据时更加高效。NIO 相对于 BIO 具有更好的性能和可扩展性，NIO 允许一个线程通过一个 Channel 处理多个 IO 操作。</p></blockquote><blockquote><p>NIO 采用 Reactor 模式，一个线程可以处理多个请求，当请求来临时，只需进行事件注册，而不是像 BIO 一样开启一个线程处理一个请求。NIO 提供了 Channel 和 Buffer 两个基本元素，每个连接对应一个 Channel，Buffer 缓冲区负责读/写。</p></blockquote><blockquote><p>Reactor 模式是一种基于事件驱动、非阻塞式 IO 的编程模式，相对于传统的阻塞式 IO，它的主要优点有</p><ol><li>高并发性：Reactor 采用异步非阻塞 IO，允许多个请求同时被处理，能够提高系统的并发能力。</li><li>高吞吐量：异步非阻塞 IO，允许一个线程处理多个请求，能够提高系统的吞吐量。</li><li>低延迟：由于异步非阻塞 IO，一个线程可以处理多个请求，避免了线程切换和上下文切换的开销，从而降低延迟。</li></ol></blockquote><blockquote><p>相比于传统的编程模式，Reactor 模式具有以下特点：</p><ol><li>事件驱动：Reactor 模式是基于事件驱动的，当有事件发生时，会通知相关的事件处理器进行处理。</li><li>非阻塞式 IO：Reactor 模式采用非阻塞式 IO，当 IO 操作无法立即完成时，线程可以继续进行其他操作，避免了线程的阻塞等待。</li><li>多路复用：Reactor 模式采用多路复用技术，允许一个线程处理多个请求。</li></ol><br><p>一般来说，Reactor模式适用于需要处理大量并发请求的场景，例如高性能服务器、大型分布式系统等。在 Reactor 模式中，可以通过线程池来处理请求，这样可以进一步提高系统的并发性能。同时，Reactor 模式还可以结合其他技术，例如 Netty、RxJava 等，以实现更加高效、灵活的处理方式。</p></blockquote><blockquote><p>NIO 模型中，ServerSocketChannel 负责绑定 IP 地址，启动监听端口；SocketChannel 负责发起连接操作。连接成功后，双方通过 Buffer 进行异步非阻塞式数据传输，可以将读写事件的状态保存在缓冲区中，当缓冲区满时，会触发读写事件。在进行 IO 操作时，可以通过选择器（Selector）来监听多个 Channel 的事件，从而减少系统开销。</p></blockquote><blockquote><p>NIO 的实现原理是基于多路复用器的非阻塞式 IO，它采用一个线程处理多个连接，即在一个线程中可以监听多个通道，这些通道都绑定在同一个选择器上，当其中的一个通道有事件时（如可读、可写等），选择器就会通知对应的线程进行处理。这样就大大减少了线程数量，提高了系统的并发性能，减少了系统资源的消耗。</p></blockquote><h2 id="aio" tabindex="-1">AIO <a class="header-anchor" href="#aio" aria-label="Permalink to &quot;AIO&quot;">​</a></h2><blockquote><p>AIO（Asynchronous IO）是 Java NIO 的扩展，也称为 NIO.2，它是异步非阻塞的 IO 操作，相对于传统的 BIO（Blocking IO）和 NIO（Non-blocking IO）都具有更高的效率和可靠性。</p></blockquote><blockquote><p>AIO 采用事件驱动机制，应用程序通过操作系统注册 IO 操作，并在操作系统完成操作后，操作系统会通知应用程序进行后续操作，这样就可以避免阻塞和轮询的问题。相比较 BIO 和 NIO，AIO 更适合处理大量的连接请求和数据量大的情况，具有更高的吞吐量和并发能力，同时减少了 CPU 和内存的开销。</p></blockquote><blockquote><ul><li><p>BIO（Blocking IO）是传统的阻塞式 IO 操作，每个连接都需要独立的线程进行阻塞式的等待读写操作。</p></li><li><p>NIO（Non-blocking IO）则是基于事件驱动模型的 IO 操作，通过 Selector 机制实现单线程管理多个连接，并监听各个连接的状态，处理连接状态变化的事件。相比较 BIO，NIO 可以减少线程的开销，但是依然需要遍历连接进行轮询，效率并不是特别高。</p></li><li><p>而 AIO 利用操作系统异步 IO 支持，可以在连接数据准备好后异步通知应用程序进行后续操作，大大提高了效率和可靠性。</p></li></ul><p>在 Java 中，AIO 的实现主要是基于 Java NIO 中的 AsynchronousServerSocketChannel 和 AsynchronousSocketChannel，通过注册 IO 操作和实现 CompletionHandler 接口来实现异步 IO。</p></blockquote>`,30),e=[o];function t(c,r,E,y,i,u){return a(),n("div",null,e)}const O=s(p,[["render",t]]);export{I as __pageData,O as default};
