import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.834b76fb.js";const l="/assets/整体架构.e59d494f.png",d=JSON.parse('{"title":"MyBatis","description":"","frontmatter":{},"headers":[],"relativePath":"posts/be/mybatis/MyBatis.md","filePath":"posts/be/mybatis/MyBatis.md"}'),o={name:"posts/be/mybatis/MyBatis.md"},e=p('<h1 id="mybatis" tabindex="-1">MyBatis <a class="header-anchor" href="#mybatis" aria-label="Permalink to &quot;MyBatis&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><blockquote><p><a href="https://mybatis.org/mybatis-3/" target="_blank" rel="noreferrer">官方文档</a></p></blockquote><blockquote><p>在操作 MySQL 的时候，需要先启动服务，再使用客户端连接，开启一个会话（Session），才能在会话中进行增删改查操作。单纯的 JDBC 只能支持单个数据库连接，数据库操作需要频繁的打开和关闭会话连接。于是出现了数据源（DataSource），比如说 Druid DataSource，维护一个连接池，管理和维护多个会话连接。不管是 JDBC 还是数据源，都不能饶过会话，所有对数据库的操作都是在会话中进行的。会话是数据库操作中很重要的一环。</p><p>（数据源还有其他功能，此处仅仅关注会话操作而已）</p></blockquote><blockquote><p>MyBatis 是一个持久层框架，支持定制化 SQL 以及高级映射。MyBatis 可以使用的 XML 或注解来创建和配置，以及映射 Java 类型/接口/POJO 为数据库中的记录。</p><p>在引入了 MyBatis 后，可以将数据源交给 MyBatis 管理。数据源的连接池维护和管理多个会话，MyBatis 管理数据源，这样一来，MyBatis 也就间接的管理了会话。</p><p>会话很重要，在 MyBatis 中同样如此，所有 MyBatis 的操作都是在会话中进行的。因此就可以围绕 MyBatis 创建会话前要做什么，如何创建会话，创建会话后如何使用会话进行操作这几个方面出发来了解 MyBatis。</p><ul><li>创建会话前，解析配置文件，处理接口和 xml 映射等</li><li>如何创建会话，工厂模式（SqlSessionFactory）</li><li>创建会话后，进行会话操作（SqlSession）</li></ul></blockquote><blockquote><p><strong>特点</strong></p><p>MyBatis 是一个**半自动的 ORM **框架（Object Relational Mapping，对象关系映射），通过使用描述对象和数据库之间映射的元数据，将对象自动持久化到关系数据库中，本质上就是将数据从一种形式转换到另外一种形式。</p><p>一般来说，对数据库的操作包括：编写 SQL -&gt; 预编译 -&gt; 设置参数 -&gt; 执行 SQL -&gt; 封装结果。MyBatis 将编写 SQL 的步骤交给开发者，是半自动的；JPA 帮助开发者生成了 SQL，是全自动的。</p><p>在 MyBatis 中开发者直接编写原生 SQL，可以严格控制 SQL 执行性能，灵活度高。内部封装 JDBC，开发时只需要关注 SQL 语句本身。</p><p>MyBatis 可以使用 <strong>XML</strong> 或<strong>注解</strong>来配置和进行关系映射，将 POJO 映射成数据库中的记录，避免了几乎所有的 JDBC 连接和维护代码，不再需要手动设置参数，同时也处理好了结果集数据类型的映射。</p><p>通过 XML 或注解的方式将要执行的各种 statement 配置起来，并通过 Java 对象和 statement 中 SQL 的动态参数进行映射生成最终执行的 SQL 语句，最后由 MyBatis 框架执行 SQL 并将结果映射为 Java 对象并返回。</p></blockquote><blockquote><p><strong>优点</strong></p><p>1、基于 SQL 语句编程，相当灵活，不会对应用程序或者数据库的现有设计造成任何影响，SQL 写在 XML 里，<strong>SQL 与程序代码的耦合</strong>，便于统一管理；提供 XML 标签，支持编写**动态 SQL **语句，而且 SQL 还支持重用</p><p>2、消除了 JDBC 大量冗余的代码，不需要手动开关数据库连接</p><p>3、很好的与各种数据库兼容（内部封装 JDBC，只要 JDBC 支持的数据库 MyBatis 都支持）</p><p>4、提供<strong>映射标签</strong>，支持对象与数据库的 ORM 字段关系映射；提供<strong>对象关系映射标签</strong>，支持对象关系组件维护</p><p>5、能够与 Spring/SpringBoot 很好的集成</p><br><p><strong>缺点</strong></p><p>1、SQL 语句的编写工作量较大，尤其当字段多、关联表多时，SQL 语句较为复杂。</p><p>2、SQL 语句依赖于数据库，导致数据库移植性差，不能随意更换数据库</p></blockquote><blockquote><p><strong>与 Hibernate 的异同</strong></p><p>1、Hibernate 是**全自动的 ORM **框架，编写 SQL -&gt; 预编译 -&gt; 设置参数 -&gt; 执行SQL -&gt; 封装结果，都由 Hibernate 完成</p><p>2、MyBatis 支持编写原生 SQL，可以严格控制 SQL 执行，灵活度高。灵活的后果是 MyBatis 无法做到数据库无关性，如果需要实现支持多种数据库的软件，则需要自定义多套 SQL 映射。适合对关系数据模型要求不高的软件开发，因为这类软件需求变化频繁，一但需求变化要求迅速输出成果。</p><p>3、Hibernate 对象/关系映射能力强，数据库无关性好，对于关系模型要求高的软件，开发可以节省很多代码，提高效率</p></blockquote><br><h2 id="整体架构" tabindex="-1">整体架构 <a class="header-anchor" href="#整体架构" aria-label="Permalink to &quot;整体架构&quot;">​</a></h2><p>MyBatis 最顶层的是接口层，即 Mapper 接口定义，包含了对数据库的 CRUD 操作方法。数据处理层主要是配置 Mapper 到 XML 之间的参数映射，SQL 解析，SQL 执行，结果映射的过程；基础支持层包括连接管理，事务管理，配置加载和缓存管理等。</p><p><img src="'+l+`" alt="整体架构"></p><br><h3 id="接口层" tabindex="-1">接口层 <a class="header-anchor" href="#接口层" aria-label="Permalink to &quot;接口层&quot;">​</a></h3><blockquote><p>SqlSessionFactory 和 SqlSession 是 MyBatis 接口的核心接口。尤其是 SqlSession，是 MyBatis 中最重要的接口，主要是用来执行 SQL 命令，获取映射，管理事务</p></blockquote><blockquote><p><strong>SqlSessionFactory</strong></p><p>主要负责</p><ul><li>MyBatis 框架初始化操作</li><li>提供 SqlSession 对象</li></ul><br><p>SqlSessionFactory 有两个实现类，SqlSessionManager 和 DefaultSqlSessionFactory</p><ul><li><p>DefaultSqlSessionFactory</p><p>SqlSessionFactory 的默认实现类，创建会话的工厂类，这个类的实例是全局共享的，只会在首次调用时生成一个实例（单例模式），就一直存在直到服务器关闭</p></li><li><p>SqlSessionManager</p><p>已被废弃，SqlSessionManager 需要维护一个自己的 ThreadLocal，而使用 MyBatis 更多的是要与 Spring 进行集成，并不会单独使用，所以维护自己的 ThreadLocal 并没有什么意义，所以 SqlSessionManager 已经不再使用</p></li></ul></blockquote><blockquote><p><strong>SqlSession</strong></p><p>SqlSession 接口中定义了一系列模版方法，能够执行简单的 CRUD 操作，也可以通过 getMapper 获取 Mapper，执行自定义 SQL 语句。因为 SqlSession 在执行 SQL 语句之前是需要先开启一个会话，涉及到事务操作，所以还会有 commit/rollback/close 等方法</p></blockquote><br><h3 id="数据处理层" tabindex="-1">数据处理层 <a class="header-anchor" href="#数据处理层" aria-label="Permalink to &quot;数据处理层&quot;">​</a></h3><blockquote><p><strong>配置解析</strong></p><p>在 MyBatis 初始化过程中，会加载并解析 <code>mybatis-config.xml</code> 配置文件以及 Mapper 接口中的注解信息。解析后的配置信息会形成相应的对象并保存到 Configration 对象中，然后根据该对象创建 SqlSessionFactory 对象。初始化完成后，可以通过 SqlSessionFactory 创建 SqlSession 对象并开始数据库操作。</p></blockquote><blockquote><p><strong>SQL执行</strong></p><p>SQL 语句的执行涉及多个组件，包括 Executor/StatementHandler/ParameterHandler/ResultSetHandler</p><ul><li>SqlSession，执行 SQL 命令，获取映射，管理事务</li><li>Executor，执行器，是 MyBatis 调度的核心，负责 SQL 语句的生成以及查询缓存的维护</li><li>StatementHandler，封装了 JDBC Statement 操作，负责对 JDBC Statement 的操作，如设置参数、将Statement 结果集转换成 List 集合</li><li>ParameterHandler，负责将用户传递的参数转换成 JDBC Statement 所需要的参数</li><li>ResultSetHandler，负责将 JDBC 返回的 ResultSet 结果集对象转换成 List 类型的集合</li><li>TypeHandler，用于 Java 类型和 JDBC 类型之间的转换</li><li>MappedStatement，保存 SQL 语句、参数类型、结果类型、缓存等配置信息，每个 SQL 映射语句在 MyBatis 中都会被解析为一个 MappedStatement 对象。在运行时，MyBatis 会根据调用的方法，获取对应 MappedStatement 对象中的信息，生成相应的 SQL 语句，并执行该语句，然后将结果映射为 Java 对象。</li><li>SqlSource，表示从 XML 文件或注释读取的映射语句的内容，它将从用户接收的输入参数传递给数据库，创建 对应的 SQL</li><li>Configuration，所有 MyBatis 配置信息都维持在 Configuration 对象之中</li></ul></blockquote><br><h3 id="基础支持层" tabindex="-1">基础支持层 <a class="header-anchor" href="#基础支持层" aria-label="Permalink to &quot;基础支持层&quot;">​</a></h3><blockquote><ul><li><p><strong>反射模块</strong></p><p>MyBatis 中的反射模块，对 Java 反射进行封装，并且对反射操作进行了一系列的优化，比如，缓存了类的元数据（MetaClass）和对象的元数据（MetaObject），提高了反射操作的性能</p></li><li><p><strong>类型转换模块</strong></p><p>MyBatis 的别名机制，能够简化配置文件，该机制是类型转换模块的主要功能之一。类型转换模块的另一个功能是实现 JDBC 类型与 Java 类型的转换。在 SQL 语句绑定参数时，会将数据由 Java 类型转换成 JDBC 类型；在映射结果集时，会将数据由 JDBC 类型转换成 Java 类型</p></li><li><p><strong>日志模块</strong></p><p>在 Java 中，有很多优秀的日志框架，如 Log4j、Log4j2、slf4j 等。MyBatis 除了提供了详细的日志输出信息，还能够集成多种日志框架，其日志模块的主要功能就是集成第三方日志框架</p></li><li><p><strong>资源加载模块</strong></p><p>该模块主要封装了类加载器，确定了类加载器的使用顺序，并提供了加载类文件和其它资源文件的功能</p></li><li><p><strong>解析器模块</strong></p><p>该模块有两个主要功能：一个是封装了 XPath，为 MyBatis 初始化时解析 <code>mybatis-config.xml</code> 配置文件以及映射配置文件提供支持；另一个为处理动态 SQL 语句中的占位符提供支持</p></li><li><p><strong>数据源模块</strong></p><p>MyBatis 自身提供了相应的数据源实现，也提供了与第三方数据源集成的接口。数据源是开发中的常用组件之一，很多开源的数据源都提供了丰富的功能，如连接池、检测连接状态等，选择性能优秀的数据源组件，对于提供ORM 框架以及整个应用的性能都是非常重要的</p></li><li><p><strong>事务管理模块</strong></p><p>一般地，MyBatis 与 Spring 框架集成，由 Spring 框架管理事务。但 MyBatis 自身对数据库事务进行了抽象，提供了相应的事务接口和简单实现</p></li><li><p><strong>缓存模块</strong></p><p>MyBatis 中有<strong>一级缓存</strong>和<strong>二级缓存</strong>，这两级缓存都依赖于缓存模块中的实现。但是需要注意，这两级缓存与MyBatis 以及整个应用是运行在同一个 JVM 中的，共享同一块内存。如果这两级缓存中的数据量较大，则可能影响系统中其它功能，所以需要缓存大量数据时，优先考虑使用 Redis、Memcache 等缓存产品</p></li><li><p><strong>Binding 模块</strong></p><p>在调用 SqlSession 相应方法执行数据库操作时，需要制定映射文件中定义的 SQL 节点，如果 SQL 中出现了拼写错误，那就只能在运行时才能发现。</p><p>为了能尽早发现这种错误，MyBatis 通过 Binding 模块将用户自定义的Mapper 接口与映射文件关联起来，系统可以通过调用自定义 Mapper 接口中的方法执行相应的 SQL 语句完成数据库操作，从而避免上述问题。在开发中，只创建 Mapper 接口，并没有编写实现类，因为 MyBatis 自动为 Mapper 接口创建了动态代理对象</p></li></ul></blockquote><br><h2 id="配置文件" tabindex="-1">配置文件 <a class="header-anchor" href="#配置文件" aria-label="Permalink to &quot;配置文件&quot;">​</a></h2><blockquote><p>配置文件内的标签需要保持一定的顺序</p><ul><li><p>properties 属性</p></li><li><p>settings 设置</p></li><li><p>typeAliases 类型别名</p></li><li><p>typeHandlers 类型处理器</p></li><li><p>objectFactory 对象工厂</p><p>每次 MyBatis 创建 result 对象的新实例时，它都会使用一个对象工厂实例来完成实例化工作</p></li><li><p>plugins 插件</p><p>MyBatis 允许在映射语句执行过程中的某一时刻进行拦截调用</p></li><li><p>environments 环境配置</p></li><li><p>databaseIdProvider 数据库厂商标识</p></li><li><p>mappers 映射器</p></li></ul><p>顺序不能颠倒，比如 settings 不能放在 environments 后面</p></blockquote><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;?</span><span style="color:#85E89D;">xml</span><span style="color:#B392F0;"> version</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;1.0&quot;</span><span style="color:#B392F0;"> encoding</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;UTF-8&quot;</span><span style="color:#E1E4E8;"> ?&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;!</span><span style="color:#F97583;">DOCTYPE</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">configuration</span></span>
<span class="line"><span style="color:#E1E4E8;">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &quot;https://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">configuration</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">properties</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">property</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;username&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;root&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">property</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;password&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">property</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;url&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;jdbc:mysql://localhost:3306/db_test?useSSL=false&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">property</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;driver&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;com.mysql.cj.jdbc.Driver&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">properties</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">typeAliases</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;com.demo.mapper&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">typeAliases</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">environments</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">default</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;development&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">environment</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;development&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">transactionManager</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;JDBC&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">dataSource</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;POOLED&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                &lt;</span><span style="color:#85E89D;">property</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;driver&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;\${driver}&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                &lt;</span><span style="color:#85E89D;">property</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;url&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;\${url}&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                &lt;</span><span style="color:#85E89D;">property</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;username&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;\${username}&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                &lt;</span><span style="color:#85E89D;">property</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;password&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;\${password}&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;/</span><span style="color:#85E89D;">dataSource</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">environment</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">environments</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">mappers</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">mapper</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resource</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;mapper/UserMapper.xml&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">mappers</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">configuration</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;?</span><span style="color:#22863A;">xml</span><span style="color:#6F42C1;"> version</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;1.0&quot;</span><span style="color:#6F42C1;"> encoding</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#24292E;"> ?&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;!</span><span style="color:#D73A49;">DOCTYPE</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">configuration</span></span>
<span class="line"><span style="color:#24292E;">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span>
<span class="line"><span style="color:#24292E;">        &quot;https://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">properties</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">property</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;username&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;root&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">property</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;password&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">property</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;url&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;jdbc:mysql://localhost:3306/db_test?useSSL=false&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">property</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;driver&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;com.mysql.cj.jdbc.Driver&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">properties</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">typeAliases</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;com.demo.mapper&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">typeAliases</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">environments</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">default</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;development&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">environment</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;development&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">transactionManager</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;JDBC&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">dataSource</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;POOLED&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                &lt;</span><span style="color:#22863A;">property</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;driver&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;\${driver}&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">                &lt;</span><span style="color:#22863A;">property</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;url&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;\${url}&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">                &lt;</span><span style="color:#22863A;">property</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;username&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;\${username}&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">                &lt;</span><span style="color:#22863A;">property</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;password&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;\${password}&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;/</span><span style="color:#22863A;">dataSource</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">environment</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">environments</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">mappers</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">mapper</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resource</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;mapper/UserMapper.xml&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">mappers</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><br><h3 id="插件" tabindex="-1">插件 <a class="header-anchor" href="#插件" aria-label="Permalink to &quot;插件&quot;">​</a></h3><blockquote><p>MyBatis 允许在映射语句执行过程中的某一时刻进行拦截调用，默认情况下，MyBatis 允许使用插件来拦截的方法调用包括</p><ul><li>Executor 接口中的方法，如 update/query/flushStatements/commit/rollback/getTransaction/close/isClosed</li><li>ParameterHandler 接口中的方法，如 getParameterObject/setParameters</li><li>ResultSetHandler 接口中的方法，如 handleResultSets/handleOutputParameters</li><li>StatementHandler 接口中的方法，如 prepare/parameterize/batch/update/query</li></ul></blockquote><p><strong>自定义插件</strong></p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 拦截 Executor 的 update(MappedStatement, Object) 方法</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Intercepts</span><span style="color:#E1E4E8;">({@</span><span style="color:#F97583;">Signature</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Executor.class,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">method</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;update&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">args</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {MappedStatement.class,Object.class})})</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ExamplePlugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Interceptor</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Properties properties </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Properties</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">intercept</span><span style="color:#E1E4E8;">(Invocation </span><span style="color:#FFAB70;">invocation</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Throwable {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// pre processing</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object returnObject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> invocation.</span><span style="color:#B392F0;">proceed</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// post processing</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> returnObject;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setProperties</span><span style="color:#E1E4E8;">(Properties </span><span style="color:#FFAB70;">properties</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.properties </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> properties;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 拦截 Executor 的 update(MappedStatement, Object) 方法</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Intercepts</span><span style="color:#24292E;">({@</span><span style="color:#D73A49;">Signature</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Executor.class,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">method</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;update&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">args</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {MappedStatement.class,Object.class})})</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ExamplePlugin</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Interceptor</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Properties properties </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Properties</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">intercept</span><span style="color:#24292E;">(Invocation </span><span style="color:#E36209;">invocation</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Throwable {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// pre processing</span></span>
<span class="line"><span style="color:#24292E;">    Object returnObject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> invocation.</span><span style="color:#6F42C1;">proceed</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// post processing</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> returnObject;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setProperties</span><span style="color:#24292E;">(Properties </span><span style="color:#E36209;">properties</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.properties </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> properties;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p><strong>注册插件</strong></p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 将插件注册到 MyBatis --&gt;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">plugins</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">plugin</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">interceptor</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;org.mybatis.example.ExamplePlugin&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">property</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;someProperty&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;100&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">plugin</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">plugins</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 将插件注册到 MyBatis --&gt;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">plugins</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">plugin</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">interceptor</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;org.mybatis.example.ExamplePlugin&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">property</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;someProperty&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;100&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">plugin</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">plugins</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><br><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">String resource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;mybatis-config.xml&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// MyBatis 有一个 Resources 的工具类，包含获取资源的方法</span></span>
<span class="line"><span style="color:#6A737D;">// 使得从类路径或其它位置加载资源文件更加容易</span></span>
<span class="line"><span style="color:#E1E4E8;">InputStream inputStream </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Resources.</span><span style="color:#B392F0;">getResourceAsStream</span><span style="color:#E1E4E8;">(resource);</span></span>
<span class="line"><span style="color:#E1E4E8;">SqlSessionFactory sqlSessionFactory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SqlSessionFactoryBuilder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(inputStream);</span></span>
<span class="line"><span style="color:#6A737D;">// 创建 SqlSession，接下来对数据库的任何操作都需要借助 SqlSession 进行</span></span>
<span class="line"><span style="color:#E1E4E8;">SqlSession sqlSession </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sqlSessionFactory.</span><span style="color:#B392F0;">openSession</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 获取到的实际上是一个动态代理 MapperProxy 对象</span></span>
<span class="line"><span style="color:#E1E4E8;">UserMapper userMapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sqlSession.</span><span style="color:#B392F0;">getMapper</span><span style="color:#E1E4E8;">(UserMapper.class);</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userMapper.</span><span style="color:#B392F0;">count</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(count);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String resource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;mybatis-config.xml&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// MyBatis 有一个 Resources 的工具类，包含获取资源的方法</span></span>
<span class="line"><span style="color:#6A737D;">// 使得从类路径或其它位置加载资源文件更加容易</span></span>
<span class="line"><span style="color:#24292E;">InputStream inputStream </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Resources.</span><span style="color:#6F42C1;">getResourceAsStream</span><span style="color:#24292E;">(resource);</span></span>
<span class="line"><span style="color:#24292E;">SqlSessionFactory sqlSessionFactory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SqlSessionFactoryBuilder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(inputStream);</span></span>
<span class="line"><span style="color:#6A737D;">// 创建 SqlSession，接下来对数据库的任何操作都需要借助 SqlSession 进行</span></span>
<span class="line"><span style="color:#24292E;">SqlSession sqlSession </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sqlSessionFactory.</span><span style="color:#6F42C1;">openSession</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 获取到的实际上是一个动态代理 MapperProxy 对象</span></span>
<span class="line"><span style="color:#24292E;">UserMapper userMapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sqlSession.</span><span style="color:#6F42C1;">getMapper</span><span style="color:#24292E;">(UserMapper.class);</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userMapper.</span><span style="color:#6F42C1;">count</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(count);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><br><h2 id="功能" tabindex="-1">功能 <a class="header-anchor" href="#功能" aria-label="Permalink to &quot;功能&quot;">​</a></h2><h3 id="属性-字段映射" tabindex="-1">属性&amp;字段映射 <a class="header-anchor" href="#属性-字段映射" aria-label="Permalink to &quot;属性&amp;字段映射&quot;">​</a></h3><blockquote><ul><li>定义字段别名</li><li>resultMap</li></ul></blockquote><p>在 SQL 语句中定义字段别名，让字段名的别名和实体类的属性名一致</p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;"> =</span><span style="color:#9ECBFF;">&quot;selectorder&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parametertype</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;int&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resultetype</span><span style="color:#E1E4E8;"> = </span><span style="color:#9ECBFF;">&quot;com.demo.domain.order&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">	select order_id id, order_no orderno ,order_price price form orders where 		order_id = #{id};</span></span>
<span class="line"><span style="color:#9ECBFF;">&lt;/select&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">select</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;"> =</span><span style="color:#032F62;">&quot;selectorder&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parametertype</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;int&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resultetype</span><span style="color:#24292E;"> = </span><span style="color:#032F62;">&quot;com.demo.domain.order&gt;</span></span>
<span class="line"><span style="color:#032F62;">	select order_id id, order_no orderno ,order_price price form orders where 		order_id = #{id};</span></span>
<span class="line"><span style="color:#032F62;">&lt;/select&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>通过 resultMap 来映射字段名和实体类属性名</p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">resultMap</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;com.demo.domain.order&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;orderresultmap&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;!–- id 属性映射主键字段 -–&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">property</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">column</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;order_id&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;!–- result 映射非主键字段，property 为实体类属性，column 为数据表字段 -–&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">property</span><span style="color:#E1E4E8;"> = </span><span style="color:#9ECBFF;">&quot;orderno&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">column</span><span style="color:#E1E4E8;"> = </span><span style="color:#9ECBFF;">&quot;order_no&quot;</span><span style="color:#E1E4E8;"> /&gt;    </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">property</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;price&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">column</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;order_price&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">reslutMap</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;getOrder&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parameterType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;int&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resultMap</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;orderresultmap&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  select * from orders where order_id=#{id}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">resultMap</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;com.demo.domain.order&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;orderresultmap&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;!–- id 属性映射主键字段 -–&gt;  </span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">id</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">property</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">column</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;order_id&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;!–- result 映射非主键字段，property 为实体类属性，column 为数据表字段 -–&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">result</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">property</span><span style="color:#24292E;"> = </span><span style="color:#032F62;">&quot;orderno&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">column</span><span style="color:#24292E;"> = </span><span style="color:#032F62;">&quot;order_no&quot;</span><span style="color:#24292E;"> /&gt;    </span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">result</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">property</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;price&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">column</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;order_price&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">reslutMap</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">select</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;getOrder&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parameterType</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;int&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resultMap</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;orderresultmap&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  select * from orders where order_id=#{id}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">select</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><br><h3 id="xml-映射文件" tabindex="-1">XML 映射文件 <a class="header-anchor" href="#xml-映射文件" aria-label="Permalink to &quot;XML 映射文件&quot;">​</a></h3><blockquote><ul><li>Mapper 接口的全限名，就是 xml 映射文件中的 namespace 标签的值</li><li>接口的方法名，就是映射文件中 select/insert/update/delete 标签的 id 值</li><li>接口方法的参数，就是传递给 SQL 的参数</li></ul><p><a href="https://mybatis.org/mybatis-3/zh/sqlmap-xml.html" target="_blank" rel="noreferrer">XML 映射文件</a>]</p></blockquote><br><h3 id="结果映射" tabindex="-1">结果映射 <a class="header-anchor" href="#结果映射" aria-label="Permalink to &quot;结果映射&quot;">​</a></h3><blockquote><ul><li>resultMap 标签，逐一定义数据库列名和对象属性名之间的映射关系</li><li>SQL 的 as 关键字设置列别名，将列的别名设置为对象属性名</li></ul></blockquote><p>有了列名与属性名的映射关系后，MyBatis 通过反射创建对象，使用反射给对象的属性逐一赋值并返回。找不到映射关系的属性，无法完成赋值。</p><br><h3 id="参数传递" tabindex="-1">参数传递 <a class="header-anchor" href="#参数传递" aria-label="Permalink to &quot;参数传递&quot;">​</a></h3><p><strong>#{} 表示占位符</strong></p><ul><li><p>可以实现 preparedStatement 向占位符中设置值，自动进行 Java 类型和 JDBC 类型转换，可以有效防止 SQL 注入</p></li><li><p>可以接收简单类型值或 POJO 属性值。 如果 parameterType 传输单个简单类型值，<code>#{}</code> 中可以是 value 或其它名称。MyBatis 在处理 <code>#{}</code> 时，会将 SQL 中的 <code>#{}</code> 替换为 <code>?</code> 号，调用 PreparedStatement 的 set 方法来赋值</p></li></ul><p><strong>\${} 表示拼接 SQL 串</strong></p><p>通过 <code>\${}</code> 可以将 parameterType 传入的内容拼接在 SQL 中且不进行 JDBC 类型转换。 \${} 可以接收简单类型值或 POJO 属性值，如果 parameterType 传输单个简单类型值，<code>\${}</code> 中只能是 value。MyBatis 在处理 <code>\${}</code> 时，就是把 <code>\${}</code> 替换成变量的值</p><br><br><h3 id="多参数传递" tabindex="-1">多参数传递 <a class="header-anchor" href="#多参数传递" aria-label="Permalink to &quot;多参数传递&quot;">​</a></h3><blockquote><ul><li>数字占位</li><li>@param 注解</li><li>多参数封装成 map</li></ul><p>常用前两种</p></blockquote><p><strong>数字占位</strong></p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 对应的 xml 中 #{0} 代表接收第一个参数，#{1} 代表第二参数，以此类推</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserselectUser</span><span style="color:#E1E4E8;">(String name,String area);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 对应的 xml 中 #{0} 代表接收第一个参数，#{1} 代表第二参数，以此类推</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserselectUser</span><span style="color:#24292E;">(String name,String area);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;selectUser&quot;</span><span style="color:#E1E4E8;">resultMap=</span><span style="color:#9ECBFF;">&quot;BaseResultMap&quot;</span><span style="color:#E1E4E8;">&gt;     </span></span>
<span class="line"><span style="color:#E1E4E8;">	select *  fromuser_user_t   whereuser_name = #{0} anduser_area = #{1}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">select</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;selectUser&quot;</span><span style="color:#24292E;">resultMap=</span><span style="color:#032F62;">&quot;BaseResultMap&quot;</span><span style="color:#24292E;">&gt;     </span></span>
<span class="line"><span style="color:#24292E;">	select *  fromuser_user_t   whereuser_name = #{0} anduser_area = #{1}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">select</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><br><p><strong>@param 注解</strong></p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">usermapper</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    user </span><span style="color:#B392F0;">selectuser</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">param</span><span style="color:#E1E4E8;">(“username”) </span><span style="color:#FFAB70;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">username</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                    @</span><span style="color:#F97583;">param</span><span style="color:#E1E4E8;">(“hashedpassword”) </span><span style="color:#FFAB70;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">hashedpassword</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">usermapper</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    user </span><span style="color:#6F42C1;">selectuser</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">param</span><span style="color:#24292E;">(“username”) </span><span style="color:#E36209;">string</span><span style="color:#24292E;"> </span><span style="color:#E36209;">username</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                    @</span><span style="color:#D73A49;">param</span><span style="color:#24292E;">(“hashedpassword”) </span><span style="color:#E36209;">string</span><span style="color:#24292E;"> </span><span style="color:#E36209;">hashedpassword</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>然后,就可以在xml像下面这样使用(推荐封装为一个map,作为单个参数传递给mapper):</p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;selectuser&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resulttype</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    select id, username, hashedpassword</span></span>
<span class="line"><span style="color:#E1E4E8;">    from some_table</span></span>
<span class="line"><span style="color:#E1E4E8;">    where username = #{username}</span></span>
<span class="line"><span style="color:#E1E4E8;">    and hashedpassword = #{hashedpassword}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">select</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;selectuser&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resulttype</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    select id, username, hashedpassword</span></span>
<span class="line"><span style="color:#24292E;">    from some_table</span></span>
<span class="line"><span style="color:#24292E;">    where username = #{username}</span></span>
<span class="line"><span style="color:#24292E;">    and hashedpassword = #{hashedpassword}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">select</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>多参数封装成 Map</strong></p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> start, end;</span></span>
<span class="line"><span style="color:#E1E4E8;">Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; params </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;start&quot;</span><span style="color:#E1E4E8;">, start);</span></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;end&quot;</span><span style="color:#E1E4E8;">, end);</span></span>
<span class="line"><span style="color:#E1E4E8;">sqlSession.</span><span style="color:#B392F0;">selectList</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;StudentID.pagination&quot;</span><span style="color:#E1E4E8;">, map)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> start, end;</span></span>
<span class="line"><span style="color:#24292E;">Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; params </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">params.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;start&quot;</span><span style="color:#24292E;">, start);</span></span>
<span class="line"><span style="color:#24292E;">params.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;end&quot;</span><span style="color:#24292E;">, end);</span></span>
<span class="line"><span style="color:#24292E;">sqlSession.</span><span style="color:#6F42C1;">selectList</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;StudentID.pagination&quot;</span><span style="color:#24292E;">, map)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><br><h3 id="模糊查询" tabindex="-1">模糊查询 <a class="header-anchor" href="#模糊查询" aria-label="Permalink to &quot;模糊查询&quot;">​</a></h3><p>在 Java 代码中添加 SQL 通配符</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">string wildcardname </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;%smi%&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">List&lt;</span><span style="color:#F97583;">name</span><span style="color:#E1E4E8;">&gt; names </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mapper.</span><span style="color:#B392F0;">selectlike</span><span style="color:#E1E4E8;">(wildcardname);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">string wildcardname </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;%smi%&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">name</span><span style="color:#24292E;">&gt; names </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mapper.</span><span style="color:#6F42C1;">selectlike</span><span style="color:#24292E;">(wildcardname);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;selectlike&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	select * from foo where bar like #{value}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">select</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;selectlike&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	select * from foo where bar like #{value}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">select</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在 SQL 语句中拼接通配符（会引起 SQL 注入）</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">string wildcardname </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;smi&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">List&lt;</span><span style="color:#F97583;">name</span><span style="color:#E1E4E8;">&gt; names </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mapper.</span><span style="color:#B392F0;">selectlike</span><span style="color:#E1E4E8;">(wildcardname);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">string wildcardname </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;smi&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">name</span><span style="color:#24292E;">&gt; names </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mapper.</span><span style="color:#6F42C1;">selectlike</span><span style="color:#24292E;">(wildcardname);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;selectlike&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	select * from foo where bar like &quot;%&quot;#{value}&quot;%&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">select</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;selectlike&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	select * from foo where bar like &quot;%&quot;#{value}&quot;%&quot;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">select</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><br><h3 id="获取自动生成-主-键值" tabindex="-1">获取自动生成(主)键值 <a class="header-anchor" href="#获取自动生成-主-键值" aria-label="Permalink to &quot;获取自动生成(主)键值&quot;">​</a></h3><p>insert 方法总是返回一个 int 值 ，这个值代表的是插入的行数。</p><p>如果采用自增长策略，自动生成的键值在 insert 方法执行完后可以被设置到传入的参数对象中。</p><p>在 Java 代码中获取</p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">insert</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;"> =</span><span style="color:#9ECBFF;">&quot;insertname&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">usegeneratedkeys</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">keyproperty</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;"> &gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    insert into names (name) values (#{name})</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">insert</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">insert</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;"> =</span><span style="color:#032F62;">&quot;insertname&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">usegeneratedkeys</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">keyproperty</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;"> &gt;</span></span>
<span class="line"><span style="color:#24292E;">    insert into names (name) values (#{name})</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">insert</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">name name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">name.</span><span style="color:#B392F0;">setname</span><span style="color:#E1E4E8;">(“fred”);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> rows </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mapper.</span><span style="color:#B392F0;">insertname</span><span style="color:#E1E4E8;">(name);</span></span>
<span class="line"><span style="color:#6A737D;">// 完成后 id 已经被设置到对象中</span></span>
<span class="line"><span style="color:#E1E4E8;">system.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(“rows inserted </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ” </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> rows);</span></span>
<span class="line"><span style="color:#E1E4E8;">system.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(“generated key value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ” </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> name.</span><span style="color:#B392F0;">getid</span><span style="color:#E1E4E8;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">name name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">name.</span><span style="color:#6F42C1;">setname</span><span style="color:#24292E;">(“fred”);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> rows </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mapper.</span><span style="color:#6F42C1;">insertname</span><span style="color:#24292E;">(name);</span></span>
<span class="line"><span style="color:#6A737D;">// 完成后 id 已经被设置到对象中</span></span>
<span class="line"><span style="color:#24292E;">system.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(“rows inserted </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ” </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> rows);</span></span>
<span class="line"><span style="color:#24292E;">system.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(“generated key value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ” </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> name.</span><span style="color:#6F42C1;">getid</span><span style="color:#24292E;">());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在 xml 中返回</p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!--</span></span>
<span class="line"><span style="color:#6A737D;">	keyProperty=&quot;id&quot;: 将返回的主键放入传入参数的 id 中保存.</span></span>
<span class="line"><span style="color:#6A737D;">	order: 当前函数相对于 insert 语句的执行顺序，</span></span>
<span class="line"><span style="color:#6A737D;">				在 insert 前执行是 BEFORE，在 insert 后执行是 AFTER</span></span>
<span class="line"><span style="color:#6A737D;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">insert</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;insertBook&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parameterType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;Book&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">selectKey</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">keyProperty</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;bookId&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">order</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;AFTER&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resultType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;java.lang.Integer&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        select</span></span>
<span class="line"><span style="color:#E1E4E8;">        LAST_INSERT_ID()</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">selectKey</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    insert into</span></span>
<span class="line"><span style="color:#E1E4E8;">    book (bookname,price,booktypeid,bookspecies,bookscore,publisher,author,bookdata)</span></span>
<span class="line"><span style="color:#E1E4E8;">    values (#{bookName},#{price},#{bookTypeId},#{bookSpecies},</span></span>
<span class="line"><span style="color:#E1E4E8;">    #{bookScore},#{publisher},#{author},#{bookData})</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">insert</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!--</span></span>
<span class="line"><span style="color:#6A737D;">	keyProperty=&quot;id&quot;: 将返回的主键放入传入参数的 id 中保存.</span></span>
<span class="line"><span style="color:#6A737D;">	order: 当前函数相对于 insert 语句的执行顺序，</span></span>
<span class="line"><span style="color:#6A737D;">				在 insert 前执行是 BEFORE，在 insert 后执行是 AFTER</span></span>
<span class="line"><span style="color:#6A737D;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">insert</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;insertBook&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parameterType</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;Book&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">selectKey</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">keyProperty</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;bookId&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">order</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;AFTER&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resultType</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;java.lang.Integer&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        select</span></span>
<span class="line"><span style="color:#24292E;">        LAST_INSERT_ID()</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">selectKey</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    insert into</span></span>
<span class="line"><span style="color:#24292E;">    book (bookname,price,booktypeid,bookspecies,bookscore,publisher,author,bookdata)</span></span>
<span class="line"><span style="color:#24292E;">    values (#{bookName},#{price},#{bookTypeId},#{bookSpecies},</span></span>
<span class="line"><span style="color:#24292E;">    #{bookScore},#{publisher},#{author},#{bookData})</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">insert</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><br><h3 id="分页" tabindex="-1">分页 <a class="header-anchor" href="#分页" aria-label="Permalink to &quot;分页&quot;">​</a></h3><p>MyBatis 使用 RowBounds 对象进行分页，是针对 ResultSet 结果集执行的内存分页，而非物理分页。可以在 SQL 内直接添加带有物理分页的参数来完成物理分页功能，也可以使用分页插件来完成物理分页。</p><p>分页插件的基本原理是使用 MyBatis 提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的 SQL，然后重写 SQL，根据 Dialect 方言，添加对应的物理分页语句和物理分页参数。</p><br><h2 id="核心接口-类" tabindex="-1">核心接口/类 <a class="header-anchor" href="#核心接口-类" aria-label="Permalink to &quot;核心接口/类&quot;">​</a></h2><h3 id="初始化阶段" tabindex="-1">初始化阶段 <a class="header-anchor" href="#初始化阶段" aria-label="Permalink to &quot;初始化阶段&quot;">​</a></h3><blockquote><p>MyBatis 启动时</p><ul><li>解析 xml 配置</li><li>创建 Configuration 类</li><li>设置 MyBatis 环境信息</li><li>解析 xml 标签，比如解析 mapper 标签</li><li>将 Java 接口和对应的 XML Mapper 绑定</li><li>创建 Java 接口代理，将映射信息保存到 MapperRegistry</li></ul></blockquote><br><h4 id="sqlsessionfactorybuilder" tabindex="-1">SqlSessionFactoryBuilder <a class="header-anchor" href="#sqlsessionfactorybuilder" aria-label="Permalink to &quot;SqlSessionFactoryBuilder&quot;">​</a></h4><blockquote><p>负责创建 SqlSessionFactory，内部定义了多种方法，用于从不同途径创建 SqlSessionFactory，比如 XML 文件/输入流/Configuration 配置类等</p></blockquote><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SqlSessionFactoryBuilder</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 从输入流创建 SqlSessionFactory</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> SqlSessionFactory </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(InputStream </span><span style="color:#FFAB70;">inputStream</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(inputStream, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> SqlSessionFactory </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(InputStream </span><span style="color:#FFAB70;">inputStream</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">environment</span><span style="color:#E1E4E8;">, Properties </span><span style="color:#FFAB70;">properties</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 解析 XML 输入流</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 这一步会创建 Configuration</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 创建 Configuration 的时候会跟着 MapperRegistry 用于注册 mapper 文件</span></span>
<span class="line"><span style="color:#E1E4E8;">      XMLConfigBuilder parser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">XMLConfigBuilder</span><span style="color:#E1E4E8;">(inputStream, environment, properties);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// parser.parse() 方法会先检查是否已经解析过，如果已经解析过就会抛出异常</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 然后开始解析 Configuration</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 会扫描可用的 mapper 然后注册到 MapperRegistry</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// MapperRegistry 实际上是使用 HashMap 来保存 mapper 映射关系</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 最后返回 Configuration</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 实际上此类中的所有方法最后调用的都是 build(Configuration config)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(parser.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> ExceptionFactory.</span><span style="color:#B392F0;">wrapException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Error building SqlSession.&quot;</span><span style="color:#E1E4E8;">, e);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      ErrorContext.</span><span style="color:#B392F0;">instance</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">reset</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (inputStream </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      	  inputStream.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      	}</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Intentionally ignore. Prefer previous error.</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 配置文件创建 SqlSessionFactory</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果不是使用 mybatis.xml 配置文件来创建 SqlSessionFactory</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 而是通过配置类来创建，一般都是使用此方法</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Configuration 类定义了 MyBatis 的各种属性</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如 MyBatis 的环境信息，是否开启缓存，是否开启懒加载等</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 配置 Mapper 的注册器 MapperRegistry</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> SqlSessionFactory </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(Configuration </span><span style="color:#FFAB70;">config</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultSqlSessionFactory</span><span style="color:#E1E4E8;">(config);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SqlSessionFactoryBuilder</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 从输入流创建 SqlSessionFactory</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> SqlSessionFactory </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(InputStream </span><span style="color:#E36209;">inputStream</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(inputStream, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> SqlSessionFactory </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(InputStream </span><span style="color:#E36209;">inputStream</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">environment</span><span style="color:#24292E;">, Properties </span><span style="color:#E36209;">properties</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 解析 XML 输入流</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 这一步会创建 Configuration</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 创建 Configuration 的时候会跟着 MapperRegistry 用于注册 mapper 文件</span></span>
<span class="line"><span style="color:#24292E;">      XMLConfigBuilder parser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">XMLConfigBuilder</span><span style="color:#24292E;">(inputStream, environment, properties);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// parser.parse() 方法会先检查是否已经解析过，如果已经解析过就会抛出异常</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 然后开始解析 Configuration</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 会扫描可用的 mapper 然后注册到 MapperRegistry</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// MapperRegistry 实际上是使用 HashMap 来保存 mapper 映射关系</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 最后返回 Configuration</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 实际上此类中的所有方法最后调用的都是 build(Configuration config)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(parser.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> ExceptionFactory.</span><span style="color:#6F42C1;">wrapException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Error building SqlSession.&quot;</span><span style="color:#24292E;">, e);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      ErrorContext.</span><span style="color:#6F42C1;">instance</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">reset</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (inputStream </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      	  inputStream.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      	}</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Intentionally ignore. Prefer previous error.</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 配置文件创建 SqlSessionFactory</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果不是使用 mybatis.xml 配置文件来创建 SqlSessionFactory</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 而是通过配置类来创建，一般都是使用此方法</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Configuration 类定义了 MyBatis 的各种属性</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如 MyBatis 的环境信息，是否开启缓存，是否开启懒加载等</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 配置 Mapper 的注册器 MapperRegistry</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> SqlSessionFactory </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(Configuration </span><span style="color:#E36209;">config</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultSqlSessionFactory</span><span style="color:#24292E;">(config);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Configuration.java </span></span>
<span class="line"><span style="color:#6A737D;">// 初始化时创建 MapperRegistry</span></span>
<span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> MapperRegistry mapperRegistry </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MapperRegistry</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Configuration.java </span></span>
<span class="line"><span style="color:#6A737D;">// 初始化时创建 MapperRegistry</span></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> MapperRegistry mapperRegistry </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MapperRegistry</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="sqlsessionfactory" tabindex="-1">SqlSessionFactory* <a class="header-anchor" href="#sqlsessionfactory" aria-label="Permalink to &quot;SqlSessionFactory*&quot;">​</a></h4><blockquote><p>从连接或数据源创建 SqlSession</p><ul><li>每个基于 MyBatis 的应用都是以一个 SqlSessionFactory 的实例为核心的</li><li>SqlSessionFactory 的实例可以通过 SqlSessionFactoryBuilder 获得</li><li>SqlSessionFactoryBuilder 可以从 XML 配置文件或一个预先配置的 Configuration 实例来构建 SqlSessionFactory 实例</li></ul></blockquote><blockquote><p>从 XML 文件中构建 SqlSessionFactory 的实例，可以使用类路径下的资源文件进行配置，也可以使用任意的输入流（InputStream）实例，比如用文件路径字符串或 <code>file://URL</code> 构造的输入流。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">String resource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;mybatis-config.xml&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// MyBatis 有一个 Resources 的工具类，包含获取资源的方法</span></span>
<span class="line"><span style="color:#6A737D;">// 使得从类路径或其它位置加载资源文件更加容易</span></span>
<span class="line"><span style="color:#E1E4E8;">InputStream inputStream </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Resources.</span><span style="color:#B392F0;">getResourceAsStream</span><span style="color:#E1E4E8;">(resource);</span></span>
<span class="line"><span style="color:#E1E4E8;">SqlSessionFactory sqlSessionFactory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SqlSessionFactoryBuilder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(inputStream);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String resource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;mybatis-config.xml&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// MyBatis 有一个 Resources 的工具类，包含获取资源的方法</span></span>
<span class="line"><span style="color:#6A737D;">// 使得从类路径或其它位置加载资源文件更加容易</span></span>
<span class="line"><span style="color:#24292E;">InputStream inputStream </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Resources.</span><span style="color:#6F42C1;">getResourceAsStream</span><span style="color:#24292E;">(resource);</span></span>
<span class="line"><span style="color:#24292E;">SqlSessionFactory sqlSessionFactory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SqlSessionFactoryBuilder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(inputStream);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></blockquote><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SqlSessionFactory</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  SqlSession </span><span style="color:#B392F0;">openSession</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  Configuration </span><span style="color:#B392F0;">getConfiguration</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SqlSessionFactory</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  SqlSession </span><span style="color:#6F42C1;">openSession</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  Configuration </span><span style="color:#6F42C1;">getConfiguration</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><br><h4 id="defaultsqlsessionfactory" tabindex="-1">DefaultSqlSessionFactory <a class="header-anchor" href="#defaultsqlsessionfactory" aria-label="Permalink to &quot;DefaultSqlSessionFactory&quot;">​</a></h4><blockquote><p>SqlSessionFactory 子类，用于开启 session</p></blockquote><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultSqlSessionFactory</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SqlSessionFactory</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 从 DataSource 开启 session</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 一般来说，如果配置了 DataSource 就会使用此方法打开 session</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> SqlSession </span><span style="color:#B392F0;">openSessionFromDataSource</span><span style="color:#E1E4E8;">(ExecutorType </span><span style="color:#FFAB70;">execType</span><span style="color:#E1E4E8;">, TransactionIsolationLevel </span><span style="color:#FFAB70;">level</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">autoCommit</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 用来包装数据库连接，管理连接的生命周期</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 包括：连接的创建、准备、commit/rollback 和连接的关闭</span></span>
<span class="line"><span style="color:#E1E4E8;">    Transaction tx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 获取环境信息</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Environment environment </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> configuration.</span><span style="color:#B392F0;">getEnvironment</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 创建事务工厂</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> TransactionFactory transactionFactory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getTransactionFactoryFromEnvironment</span><span style="color:#E1E4E8;">(environment);</span></span>
<span class="line"><span style="color:#E1E4E8;">      tx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> transactionFactory.</span><span style="color:#B392F0;">newTransaction</span><span style="color:#E1E4E8;">(environment.</span><span style="color:#B392F0;">getDataSource</span><span style="color:#E1E4E8;">(), level, autoCommit);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 创建 SQL 执行器</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Executor executor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> configuration.</span><span style="color:#B392F0;">newExecutor</span><span style="color:#E1E4E8;">(tx, execType);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 创建 session</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultSqlSession</span><span style="color:#E1E4E8;">(configuration, executor, autoCommit);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">closeTransaction</span><span style="color:#E1E4E8;">(tx); </span><span style="color:#6A737D;">// may have fetched a connection so lets call close()</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> ExceptionFactory.</span><span style="color:#B392F0;">wrapException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Error opening session.  Cause: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> e, e);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      ErrorContext.</span><span style="color:#B392F0;">instance</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">reset</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 从 Connection 开启 session</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> SqlSession </span><span style="color:#B392F0;">openSessionFromConnection</span><span style="color:#E1E4E8;">(ExecutorType </span><span style="color:#FFAB70;">execType</span><span style="color:#E1E4E8;">, Connection </span><span style="color:#FFAB70;">connection</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> autoCommit; </span><span style="color:#6A737D;">// default false</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        autoCommit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> connection.</span><span style="color:#B392F0;">getAutoCommit</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 是否自动提交</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (SQLException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Failover to true, as most poor drivers</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// or databases won&#39;t support transactions</span></span>
<span class="line"><span style="color:#E1E4E8;">        autoCommit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Environment environment </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> configuration.</span><span style="color:#B392F0;">getEnvironment</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> TransactionFactory transactionFactory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getTransactionFactoryFromEnvironment</span><span style="color:#E1E4E8;">(environment);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Transaction tx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> transactionFactory.</span><span style="color:#B392F0;">newTransaction</span><span style="color:#E1E4E8;">(connection);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Executor executor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> configuration.</span><span style="color:#B392F0;">newExecutor</span><span style="color:#E1E4E8;">(tx, execType);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultSqlSession</span><span style="color:#E1E4E8;">(configuration, executor, autoCommit); </span><span style="color:#6A737D;">// 创建 sesion</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> ExceptionFactory.</span><span style="color:#B392F0;">wrapException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Error opening session.  Cause: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> e, e);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      ErrorContext.</span><span style="color:#B392F0;">instance</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">reset</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultSqlSessionFactory</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SqlSessionFactory</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 从 DataSource 开启 session</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 一般来说，如果配置了 DataSource 就会使用此方法打开 session</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> SqlSession </span><span style="color:#6F42C1;">openSessionFromDataSource</span><span style="color:#24292E;">(ExecutorType </span><span style="color:#E36209;">execType</span><span style="color:#24292E;">, TransactionIsolationLevel </span><span style="color:#E36209;">level</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#E36209;">autoCommit</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 用来包装数据库连接，管理连接的生命周期</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 包括：连接的创建、准备、commit/rollback 和连接的关闭</span></span>
<span class="line"><span style="color:#24292E;">    Transaction tx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 获取环境信息</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Environment environment </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> configuration.</span><span style="color:#6F42C1;">getEnvironment</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 创建事务工厂</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> TransactionFactory transactionFactory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getTransactionFactoryFromEnvironment</span><span style="color:#24292E;">(environment);</span></span>
<span class="line"><span style="color:#24292E;">      tx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> transactionFactory.</span><span style="color:#6F42C1;">newTransaction</span><span style="color:#24292E;">(environment.</span><span style="color:#6F42C1;">getDataSource</span><span style="color:#24292E;">(), level, autoCommit);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 创建 SQL 执行器</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Executor executor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> configuration.</span><span style="color:#6F42C1;">newExecutor</span><span style="color:#24292E;">(tx, execType);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 创建 session</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultSqlSession</span><span style="color:#24292E;">(configuration, executor, autoCommit);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">closeTransaction</span><span style="color:#24292E;">(tx); </span><span style="color:#6A737D;">// may have fetched a connection so lets call close()</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> ExceptionFactory.</span><span style="color:#6F42C1;">wrapException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Error opening session.  Cause: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> e, e);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      ErrorContext.</span><span style="color:#6F42C1;">instance</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">reset</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 从 Connection 开启 session</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> SqlSession </span><span style="color:#6F42C1;">openSessionFromConnection</span><span style="color:#24292E;">(ExecutorType </span><span style="color:#E36209;">execType</span><span style="color:#24292E;">, Connection </span><span style="color:#E36209;">connection</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> autoCommit; </span><span style="color:#6A737D;">// default false</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        autoCommit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> connection.</span><span style="color:#6F42C1;">getAutoCommit</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 是否自动提交</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (SQLException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Failover to true, as most poor drivers</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// or databases won&#39;t support transactions</span></span>
<span class="line"><span style="color:#24292E;">        autoCommit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Environment environment </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> configuration.</span><span style="color:#6F42C1;">getEnvironment</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> TransactionFactory transactionFactory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getTransactionFactoryFromEnvironment</span><span style="color:#24292E;">(environment);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Transaction tx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> transactionFactory.</span><span style="color:#6F42C1;">newTransaction</span><span style="color:#24292E;">(connection);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Executor executor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> configuration.</span><span style="color:#6F42C1;">newExecutor</span><span style="color:#24292E;">(tx, execType);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultSqlSession</span><span style="color:#24292E;">(configuration, executor, autoCommit); </span><span style="color:#6A737D;">// 创建 sesion</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> ExceptionFactory.</span><span style="color:#6F42C1;">wrapException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Error opening session.  Cause: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> e, e);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      ErrorContext.</span><span style="color:#6F42C1;">instance</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">reset</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div><br><h4 id="接口-映射绑定" tabindex="-1">接口&amp;映射绑定 <a class="header-anchor" href="#接口-映射绑定" aria-label="Permalink to &quot;接口&amp;映射绑定&quot;">​</a></h4><h5 id="xmlconfigbuilder" tabindex="-1">XMLConfigBuilder <a class="header-anchor" href="#xmlconfigbuilder" aria-label="Permalink to &quot;XMLConfigBuilder&quot;">​</a></h5><blockquote><p>解析 XML 配置，在使用 SqlSessionFactoryBuilder#build 方法创建 SqlSessionFactory 时，会同时初始化 XMLConfigBuilder，用来解析 <code>mybatis-config.xml</code> 配置</p></blockquote><p><strong>初始化</strong></p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// SqlSessionFactoryBuilder#build(InputStream, String, Properties)</span></span>
<span class="line"><span style="color:#E1E4E8;">XMLConfigBuilder parser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">XMLConfigBuilder</span><span style="color:#E1E4E8;">(inputStream, environment, properties);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// SqlSessionFactoryBuilder#build(InputStream, String, Properties)</span></span>
<span class="line"><span style="color:#24292E;">XMLConfigBuilder parser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">XMLConfigBuilder</span><span style="color:#24292E;">(inputStream, environment, properties);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>XMLConfigBuilder#mapperElement</strong></p><blockquote><p>解析 <code>mybatis-config.xml</code> 配置文件中的 mapper 标签，获取 mapper 标签的属性，根据不同情况进行绑定</p></blockquote><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 实际上就是解析 &lt;mapper&gt; 标签 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">mappers</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">mapper</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resource</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;mapper/UserMapper.xml&quot;</span><span style="color:#E1E4E8;">/&gt;</span><span style="color:#6A737D;">&lt;!-- 样例 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">mappers</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 实际上就是解析 &lt;mapper&gt; 标签 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">mappers</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">mapper</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resource</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;mapper/UserMapper.xml&quot;</span><span style="color:#24292E;">/&gt;</span><span style="color:#6A737D;">&lt;!-- 样例 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">mappers</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mapperElement</span><span style="color:#E1E4E8;">(XNode parent) throws Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (parent </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (XNode child </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> parent.</span><span style="color:#B392F0;">getChildren</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 检查 mapper 标签中是否包含 package 属性</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;package&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(child.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        String mapperPackage </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> child.</span><span style="color:#B392F0;">getStringAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        configuration.</span><span style="color:#B392F0;">addMappers</span><span style="color:#E1E4E8;">(mapperPackage);</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 检查 mapper 标签中是否包含 resource 属性</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 从上面的样例只能解析到 resource 属性</span></span>
<span class="line"><span style="color:#E1E4E8;">        String resource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> child.</span><span style="color:#B392F0;">getStringAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;resource&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 检查 mapper 标签中是否包含 url 属性</span></span>
<span class="line"><span style="color:#E1E4E8;">        String url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> child.</span><span style="color:#B392F0;">getStringAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;url&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 检查 mapper 标签中是否包含 class 属性</span></span>
<span class="line"><span style="color:#E1E4E8;">        String mapperClass </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> child.</span><span style="color:#B392F0;">getStringAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;class&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (resource </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> url </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> mapperClass </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          ErrorContext.</span><span style="color:#B392F0;">instance</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">resource</span><span style="color:#E1E4E8;">(resource);</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">(InputStream inputStream </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Resources.</span><span style="color:#B392F0;">getResourceAsStream</span><span style="color:#E1E4E8;">(resource)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            XMLMapperBuilder mapperParser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">XMLMapperBuilder</span><span style="color:#E1E4E8;">(inputStream, configuration, resource, configuration.</span><span style="color:#B392F0;">getSqlFragments</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// XMLMapperBuilder#parse</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 解析 xml 配置并将 mapper 接口和 mapper xml 绑定</span></span>
<span class="line"><span style="color:#E1E4E8;">            mapperParser.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (resource </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> url </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> mapperClass </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          ErrorContext.</span><span style="color:#B392F0;">instance</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">resource</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">(InputStream inputStream </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Resources.</span><span style="color:#B392F0;">getUrlAsStream</span><span style="color:#E1E4E8;">(url)){</span></span>
<span class="line"><span style="color:#E1E4E8;">            XMLMapperBuilder mapperParser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">XMLMapperBuilder</span><span style="color:#E1E4E8;">(inputStream, configuration, url, configuration.</span><span style="color:#B392F0;">getSqlFragments</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// XMLMapperBuilder#parse</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 解析 xml 配置并将 mapper 接口和 mapper xml 绑定</span></span>
<span class="line"><span style="color:#E1E4E8;">            mapperParser.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (resource </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> url </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> mapperClass </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; mapperInterface </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Resources.</span><span style="color:#B392F0;">classForName</span><span style="color:#E1E4E8;">(mapperClass);</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 属性为 class 直接添加 mapper 映射，不需要解析 xml</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// MapperRegistry#addMapper</span></span>
<span class="line"><span style="color:#E1E4E8;">          configuration.</span><span style="color:#B392F0;">addMapper</span><span style="color:#E1E4E8;">(mapperInterface);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BuilderException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;A mapper element may only specify a url, resource or class, but not more than one.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mapperElement</span><span style="color:#24292E;">(XNode parent) throws Exception {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (parent </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (XNode child </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> parent.</span><span style="color:#6F42C1;">getChildren</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 检查 mapper 标签中是否包含 package 属性</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;package&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(child.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">        String mapperPackage </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> child.</span><span style="color:#6F42C1;">getStringAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        configuration.</span><span style="color:#6F42C1;">addMappers</span><span style="color:#24292E;">(mapperPackage);</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 检查 mapper 标签中是否包含 resource 属性</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 从上面的样例只能解析到 resource 属性</span></span>
<span class="line"><span style="color:#24292E;">        String resource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> child.</span><span style="color:#6F42C1;">getStringAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;resource&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 检查 mapper 标签中是否包含 url 属性</span></span>
<span class="line"><span style="color:#24292E;">        String url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> child.</span><span style="color:#6F42C1;">getStringAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;url&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 检查 mapper 标签中是否包含 class 属性</span></span>
<span class="line"><span style="color:#24292E;">        String mapperClass </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> child.</span><span style="color:#6F42C1;">getStringAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;class&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (resource </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> url </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> mapperClass </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          ErrorContext.</span><span style="color:#6F42C1;">instance</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">resource</span><span style="color:#24292E;">(resource);</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">(InputStream inputStream </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Resources.</span><span style="color:#6F42C1;">getResourceAsStream</span><span style="color:#24292E;">(resource)) {</span></span>
<span class="line"><span style="color:#24292E;">            XMLMapperBuilder mapperParser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">XMLMapperBuilder</span><span style="color:#24292E;">(inputStream, configuration, resource, configuration.</span><span style="color:#6F42C1;">getSqlFragments</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// XMLMapperBuilder#parse</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 解析 xml 配置并将 mapper 接口和 mapper xml 绑定</span></span>
<span class="line"><span style="color:#24292E;">            mapperParser.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (resource </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> url </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> mapperClass </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          ErrorContext.</span><span style="color:#6F42C1;">instance</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">resource</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">(InputStream inputStream </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Resources.</span><span style="color:#6F42C1;">getUrlAsStream</span><span style="color:#24292E;">(url)){</span></span>
<span class="line"><span style="color:#24292E;">            XMLMapperBuilder mapperParser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">XMLMapperBuilder</span><span style="color:#24292E;">(inputStream, configuration, url, configuration.</span><span style="color:#6F42C1;">getSqlFragments</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// XMLMapperBuilder#parse</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 解析 xml 配置并将 mapper 接口和 mapper xml 绑定</span></span>
<span class="line"><span style="color:#24292E;">            mapperParser.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (resource </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> url </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> mapperClass </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; mapperInterface </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Resources.</span><span style="color:#6F42C1;">classForName</span><span style="color:#24292E;">(mapperClass);</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 属性为 class 直接添加 mapper 映射，不需要解析 xml</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// MapperRegistry#addMapper</span></span>
<span class="line"><span style="color:#24292E;">          configuration.</span><span style="color:#6F42C1;">addMapper</span><span style="color:#24292E;">(mapperInterface);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BuilderException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;A mapper element may only specify a url, resource or class, but not more than one.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><br><h5 id="xmlmapperbuilder" tabindex="-1">XMLMapperBuilder <a class="header-anchor" href="#xmlmapperbuilder" aria-label="Permalink to &quot;XMLMapperBuilder&quot;">​</a></h5><blockquote><p>根据 XML 映射中的</p></blockquote><p><strong>XMLMapperBuilder#parse</strong></p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">configuration.</span><span style="color:#B392F0;">isResourceLoaded</span><span style="color:#E1E4E8;">(resource)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 处理 mapper 标签，其中就包括将 Mapper 接口的方法和 xml 文件的 SQL 对应</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 映射信息保存在 MappedStatement 类中</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">configurationElement</span><span style="color:#E1E4E8;">(parser.</span><span style="color:#B392F0;">evalNode</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/mapper&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    configuration.</span><span style="color:#B392F0;">addLoadedResource</span><span style="color:#E1E4E8;">(resource);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Mapper 接口和 xml 文件绑定</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 会调用 MapperRegistry#addMapper</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">bindMapperForNamespace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">parsePendingResultMaps</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">parsePendingCacheRefs</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">parsePendingStatements</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">configurationElement</span><span style="color:#E1E4E8;">(XNode context) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取 xml 映射的 namespace</span></span>
<span class="line"><span style="color:#E1E4E8;">    String namespace </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">getStringAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;namespace&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (namespace </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> namespace.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BuilderException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Mapper&#39;s namespace cannot be empty&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    builderAssistant.</span><span style="color:#B392F0;">setCurrentNamespace</span><span style="color:#E1E4E8;">(namespace); </span><span style="color:#6A737D;">// 设置 namespace</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 解析缓存相关标签</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">cacheRefElement</span><span style="color:#E1E4E8;">(context.</span><span style="color:#B392F0;">evalNode</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;cache-ref&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">cacheElement</span><span style="color:#E1E4E8;">(context.</span><span style="color:#B392F0;">evalNode</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;cache&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 解析 parameterMap 标签</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">parameterMapElement</span><span style="color:#E1E4E8;">(context.</span><span style="color:#B392F0;">evalNodes</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/mapper/parameterMap&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 解析 resultMap 标签</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">resultMapElements</span><span style="color:#E1E4E8;">(context.</span><span style="color:#B392F0;">evalNodes</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/mapper/resultMap&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 解析 sql 标签</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">sqlElement</span><span style="color:#E1E4E8;">(context.</span><span style="color:#B392F0;">evalNodes</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/mapper/sql&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    解析 select</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">insert</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">update</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">delete 标签</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">buildStatementFromContext</span><span style="color:#E1E4E8;">(context.</span><span style="color:#B392F0;">evalNodes</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;select|insert|update|delete&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BuilderException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Error parsing Mapper XML. The XML location is &#39;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> resource </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&#39;. Cause: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> e, e);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">configuration.</span><span style="color:#6F42C1;">isResourceLoaded</span><span style="color:#24292E;">(resource)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 处理 mapper 标签，其中就包括将 Mapper 接口的方法和 xml 文件的 SQL 对应</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 映射信息保存在 MappedStatement 类中</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">configurationElement</span><span style="color:#24292E;">(parser.</span><span style="color:#6F42C1;">evalNode</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/mapper&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    configuration.</span><span style="color:#6F42C1;">addLoadedResource</span><span style="color:#24292E;">(resource);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Mapper 接口和 xml 文件绑定</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 会调用 MapperRegistry#addMapper</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">bindMapperForNamespace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">parsePendingResultMaps</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">parsePendingCacheRefs</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">parsePendingStatements</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">configurationElement</span><span style="color:#24292E;">(XNode context) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取 xml 映射的 namespace</span></span>
<span class="line"><span style="color:#24292E;">    String namespace </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.</span><span style="color:#6F42C1;">getStringAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;namespace&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (namespace </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> namespace.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BuilderException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Mapper&#39;s namespace cannot be empty&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    builderAssistant.</span><span style="color:#6F42C1;">setCurrentNamespace</span><span style="color:#24292E;">(namespace); </span><span style="color:#6A737D;">// 设置 namespace</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 解析缓存相关标签</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">cacheRefElement</span><span style="color:#24292E;">(context.</span><span style="color:#6F42C1;">evalNode</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;cache-ref&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">cacheElement</span><span style="color:#24292E;">(context.</span><span style="color:#6F42C1;">evalNode</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;cache&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 解析 parameterMap 标签</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">parameterMapElement</span><span style="color:#24292E;">(context.</span><span style="color:#6F42C1;">evalNodes</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/mapper/parameterMap&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 解析 resultMap 标签</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">resultMapElements</span><span style="color:#24292E;">(context.</span><span style="color:#6F42C1;">evalNodes</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/mapper/resultMap&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 解析 sql 标签</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">sqlElement</span><span style="color:#24292E;">(context.</span><span style="color:#6F42C1;">evalNodes</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/mapper/sql&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    解析 select</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">insert</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">update</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">delete 标签</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">buildStatementFromContext</span><span style="color:#24292E;">(context.</span><span style="color:#6F42C1;">evalNodes</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;select|insert|update|delete&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BuilderException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Error parsing Mapper XML. The XML location is &#39;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> resource </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&#39;. Cause: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> e, e);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><br><h5 id="mapperregistry" tabindex="-1">MapperRegistry <a class="header-anchor" href="#mapperregistry" aria-label="Permalink to &quot;MapperRegistry&quot;">​</a></h5><blockquote><p>保存 XML 和 Mapper 接口映射，保存在 knownMappers 属性中。实际上 knownMappers 是一个 HashMap，key 是 <code>interface 全限定类名</code>，value 是 Mapper 接口的动态代理类，MapperProxyFactory 的实例</p></blockquote><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MapperRegistry</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Configuration config;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 保存 Mapper 与 Mapper 代理</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Map&lt;Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;, MapperProxyFactory&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;&gt; knownMappers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MapperRegistry</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Configuration config;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 保存 Mapper 与 Mapper 代理</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Map&lt;Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;, MapperProxyFactory&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;&gt; knownMappers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addMapper</span><span style="color:#E1E4E8;">(Class</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> type) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (type.</span><span style="color:#B392F0;">isInterface</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">hasMapper</span><span style="color:#E1E4E8;">(type)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BindingException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Type &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> type </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; is already known to the MapperRegistry.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> loadCompleted </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      knownMappers.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(type, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> MapperProxyFactory&lt;&gt;(type));</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// It&#39;s important that the type is added before the parser is run</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// otherwise the binding may automatically be attempted by the</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// mapper parser. If the type is already known, it won&#39;t try.</span></span>
<span class="line"><span style="color:#E1E4E8;">      MapperAnnotationBuilder parser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MapperAnnotationBuilder</span><span style="color:#E1E4E8;">(config, type);</span></span>
<span class="line"><span style="color:#E1E4E8;">      parser.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      loadCompleted </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">loadCompleted) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        knownMappers.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(type);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addMapper</span><span style="color:#24292E;">(Class</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> type) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (type.</span><span style="color:#6F42C1;">isInterface</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">hasMapper</span><span style="color:#24292E;">(type)) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BindingException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Type &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> type </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; is already known to the MapperRegistry.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> loadCompleted </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      knownMappers.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(type, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> MapperProxyFactory&lt;&gt;(type));</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// It&#39;s important that the type is added before the parser is run</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// otherwise the binding may automatically be attempted by the</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// mapper parser. If the type is already known, it won&#39;t try.</span></span>
<span class="line"><span style="color:#24292E;">      MapperAnnotationBuilder parser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MapperAnnotationBuilder</span><span style="color:#24292E;">(config, type);</span></span>
<span class="line"><span style="color:#24292E;">      parser.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      loadCompleted </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">loadCompleted) {</span></span>
<span class="line"><span style="color:#24292E;">        knownMappers.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(type);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><br><h5 id="mappedstatement" tabindex="-1">MappedStatement <a class="header-anchor" href="#mappedstatement" aria-label="Permalink to &quot;MappedStatement&quot;">​</a></h5><blockquote><p>保存 xml 映射文件信息，以及 Mapper 接口中的方法和 xml 映射文件对应 SQL 对应信息。在 xml 映射文件中，每一个 select/insert/update/delete 标签都会被解析为一个 MapperStatement 对象。</p><p>Mapper 接口没有实现类，当调用接口方法时，接口全限名和对应方法名拼接作为 key 值，可定位唯一个 MapperStatement。例如，执行 <code>com.demo.mapper.userMapper#count</code>，可以定位到 id 为 <code>com.demo.mapper.UserMapper.count</code> 的 MapperStatement</p></blockquote><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MappedStatement</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 代理对象实例对应的 mapper 映射</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 比如当前实例是 UserMapper</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// resource=&quot;mapper/UserMapper.xml&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String resource;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// MyBatis 配置类</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Configuration configuration;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 当前执行的方法</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 比如当前执行 UserMapper#count</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// id= com.demo.mapper.UserMapper.count</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String id;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// STATEMENT | PREPARED | CALLABLE</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> StatementType statementType;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ResultSetType resultSetType;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 执行方法对应的 SQL 语句</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> SqlSource sqlSource;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Cache cache;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ParameterMap parameterMap;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">ResultMap</span><span style="color:#E1E4E8;">&gt; resultMaps;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> flushCacheRequired;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> useCache;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> resultOrdered;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// SQL 类型 select|update|insert|delete</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> SqlCommandType sqlCommandType;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 主键生成器</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> KeyGenerator keyGenerator;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] keyProperties;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] keyColumns;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> hasNestedResultMaps;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String databaseId;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Log statementLog;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> LanguageDriver lang;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] resultSets;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MappedStatement</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 代理对象实例对应的 mapper 映射</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 比如当前实例是 UserMapper</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// resource=&quot;mapper/UserMapper.xml&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String resource;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// MyBatis 配置类</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Configuration configuration;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 当前执行的方法</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 比如当前执行 UserMapper#count</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// id= com.demo.mapper.UserMapper.count</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String id;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// STATEMENT | PREPARED | CALLABLE</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> StatementType statementType;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ResultSetType resultSetType;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 执行方法对应的 SQL 语句</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> SqlSource sqlSource;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Cache cache;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ParameterMap parameterMap;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">ResultMap</span><span style="color:#24292E;">&gt; resultMaps;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> flushCacheRequired;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> useCache;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> resultOrdered;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// SQL 类型 select|update|insert|delete</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> SqlCommandType sqlCommandType;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 主键生成器</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> KeyGenerator keyGenerator;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] keyProperties;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] keyColumns;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> hasNestedResultMaps;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String databaseId;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Log statementLog;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> LanguageDriver lang;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] resultSets;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><br><h3 id="执行阶段" tabindex="-1">执行阶段 <a class="header-anchor" href="#执行阶段" aria-label="Permalink to &quot;执行阶段&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 创建 SqlSession，接下来对数据库的任何操作都需要借助 SqlSession 进行</span></span>
<span class="line"><span style="color:#E1E4E8;">SqlSession sqlSession </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sqlSessionFactory.</span><span style="color:#B392F0;">openSession</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建 SqlSession，接下来对数据库的任何操作都需要借助 SqlSession 进行</span></span>
<span class="line"><span style="color:#24292E;">SqlSession sqlSession </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sqlSessionFactory.</span><span style="color:#6F42C1;">openSession</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><br><h4 id="sqlsession" tabindex="-1">SqlSession* <a class="header-anchor" href="#sqlsession" aria-label="Permalink to &quot;SqlSession*&quot;">​</a></h4><blockquote><p>MyBatis 的主要接口，定义了 SQL 执行/Mapper 映射获取/事务管理等方法</p></blockquote><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SqlSession</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Closeable</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SqlSession</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Closeable</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>内部方法</strong></p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">selectOne</span><span style="color:#E1E4E8;">(String statement);</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">E</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">E</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">selectList</span><span style="color:#E1E4E8;">(String statement);</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">K, V</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> Map</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">K, V</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">selectMap</span><span style="color:#E1E4E8;">(String statement, String mapKey);</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">insert</span><span style="color:#E1E4E8;">(String statement);</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(String statement);</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(String statement);</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">commit</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rollback</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">getMapper</span><span style="color:#E1E4E8;">(Class</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> type);</span></span>
<span class="line"><span style="color:#E1E4E8;">Connection </span><span style="color:#B392F0;">getConnection</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">selectOne</span><span style="color:#24292E;">(String statement);</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">E</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">E</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">selectList</span><span style="color:#24292E;">(String statement);</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">K, V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> Map</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">K, V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">selectMap</span><span style="color:#24292E;">(String statement, String mapKey);</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">insert</span><span style="color:#24292E;">(String statement);</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(String statement);</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(String statement);</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">commit</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rollback</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">getMapper</span><span style="color:#24292E;">(Class</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> type);</span></span>
<span class="line"><span style="color:#24292E;">Connection </span><span style="color:#6F42C1;">getConnection</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><br><h4 id="defaultsqlsession" tabindex="-1">DefaultSqlSession <a class="header-anchor" href="#defaultsqlsession" aria-label="Permalink to &quot;DefaultSqlSession&quot;">​</a></h4><blockquote><p>SqlSession 的默认实现类，实现 <strong>SQL 执行/Mapper 映射获取/事务管理</strong>等方法</p></blockquote><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultSqlSession</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SqlSession</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultSqlSession</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SqlSession</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// selectList 为例</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">E</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">E</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">selectList</span><span style="color:#E1E4E8;">(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    MappedStatement ms </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> configuration.</span><span style="color:#B392F0;">getMappedStatement</span><span style="color:#E1E4E8;">(statement);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// executor 执行查询方法，会调用 CachingExecutor#query</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> executor.</span><span style="color:#B392F0;">query</span><span style="color:#E1E4E8;">(ms, </span><span style="color:#B392F0;">wrapCollection</span><span style="color:#E1E4E8;">(parameter), rowBounds, handler);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> ExceptionFactory.</span><span style="color:#B392F0;">wrapException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Error querying database.  Cause: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> e, e);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ErrorContext.</span><span style="color:#B392F0;">instance</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">reset</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">getMapper</span><span style="color:#E1E4E8;">(Class</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> type) { </span><span style="color:#6A737D;">// 获取 Mapper 映射代理</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> configuration.</span><span style="color:#B392F0;">getMapper</span><span style="color:#E1E4E8;">(type, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// selectList 为例</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">E</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">E</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">selectList</span><span style="color:#24292E;">(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    MappedStatement ms </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> configuration.</span><span style="color:#6F42C1;">getMappedStatement</span><span style="color:#24292E;">(statement);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// executor 执行查询方法，会调用 CachingExecutor#query</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> executor.</span><span style="color:#6F42C1;">query</span><span style="color:#24292E;">(ms, </span><span style="color:#6F42C1;">wrapCollection</span><span style="color:#24292E;">(parameter), rowBounds, handler);</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> ExceptionFactory.</span><span style="color:#6F42C1;">wrapException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Error querying database.  Cause: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> e, e);</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    ErrorContext.</span><span style="color:#6F42C1;">instance</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">reset</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">getMapper</span><span style="color:#24292E;">(Class</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> type) { </span><span style="color:#6A737D;">// 获取 Mapper 映射代理</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> configuration.</span><span style="color:#6F42C1;">getMapper</span><span style="color:#24292E;">(type, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><br><h4 id="mapperproxy" tabindex="-1">MapperProxy <a class="header-anchor" href="#mapperproxy" aria-label="Permalink to &quot;MapperProxy&quot;">​</a></h4><blockquote><p>Mapper 接口的动态代理类。MyBatis 在初始化阶段会为每一个 Mapper 接口创建一个代理类，然后保存在 MapperRegistry 的 knownMappers 属性中</p></blockquote><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MapperProxy</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InvocationHandler</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Serializable</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MapperProxy</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InvocationHandler</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Serializable</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 获取到的实际上是一个动态代理 MapperProxy 对象</span></span>
<span class="line"><span style="color:#E1E4E8;">UserMapper userMapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sqlSession.</span><span style="color:#B392F0;">getMapper</span><span style="color:#E1E4E8;">(UserMapper.class);</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userMapper.</span><span style="color:#B392F0;">count</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(count);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 获取到的实际上是一个动态代理 MapperProxy 对象</span></span>
<span class="line"><span style="color:#24292E;">UserMapper userMapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sqlSession.</span><span style="color:#6F42C1;">getMapper</span><span style="color:#24292E;">(UserMapper.class);</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userMapper.</span><span style="color:#6F42C1;">count</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(count);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><br><h4 id="mappermethod" tabindex="-1">MapperMethod <a class="header-anchor" href="#mappermethod" aria-label="Permalink to &quot;MapperMethod&quot;">​</a></h4><blockquote><p>负责执行代理类 MapperProxy 的方法</p></blockquote><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MapperMethod</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MapperMethod</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(SqlSession sqlSession, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  Object result;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (command.</span><span style="color:#B392F0;">getType</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> INSERT</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      Object param </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> method.</span><span style="color:#B392F0;">convertArgsToSqlCommandParam</span><span style="color:#E1E4E8;">(args);</span></span>
<span class="line"><span style="color:#E1E4E8;">      result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rowCountResult</span><span style="color:#E1E4E8;">(sqlSession.</span><span style="color:#B392F0;">insert</span><span style="color:#E1E4E8;">(command.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">(), param));</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> UPDATE</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      Object param </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> method.</span><span style="color:#B392F0;">convertArgsToSqlCommandParam</span><span style="color:#E1E4E8;">(args);</span></span>
<span class="line"><span style="color:#E1E4E8;">      result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rowCountResult</span><span style="color:#E1E4E8;">(sqlSession.</span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(command.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">(), param));</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> DELETE</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      Object param </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> method.</span><span style="color:#B392F0;">convertArgsToSqlCommandParam</span><span style="color:#E1E4E8;">(args);</span></span>
<span class="line"><span style="color:#E1E4E8;">      result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rowCountResult</span><span style="color:#E1E4E8;">(sqlSession.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(command.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">(), param));</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> SELECT</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (method.</span><span style="color:#B392F0;">returnsVoid</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> method.</span><span style="color:#B392F0;">hasResultHandler</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">executeWithResultHandler</span><span style="color:#E1E4E8;">(sqlSession, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">        result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (method.</span><span style="color:#B392F0;">returnsMany</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">executeForMany</span><span style="color:#E1E4E8;">(sqlSession, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (method.</span><span style="color:#B392F0;">returnsMap</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">executeForMap</span><span style="color:#E1E4E8;">(sqlSession, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (method.</span><span style="color:#B392F0;">returnsCursor</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">executeForCursor</span><span style="color:#E1E4E8;">(sqlSession, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Object param </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> method.</span><span style="color:#B392F0;">convertArgsToSqlCommandParam</span><span style="color:#E1E4E8;">(args);</span></span>
<span class="line"><span style="color:#E1E4E8;">        result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sqlSession.</span><span style="color:#B392F0;">selectOne</span><span style="color:#E1E4E8;">(command.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">(), param);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (method.</span><span style="color:#B392F0;">returnsOptional</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> (result </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">method.</span><span style="color:#B392F0;">getReturnType</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(result.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">()))) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">ofNullable</span><span style="color:#E1E4E8;">(result);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> FLUSH</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sqlSession.</span><span style="color:#B392F0;">flushStatements</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BindingException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Unknown execution method for: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> command.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (result </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> method.</span><span style="color:#B392F0;">getReturnType</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">isPrimitive</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">method.</span><span style="color:#B392F0;">returnsVoid</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BindingException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Mapper method &#39;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> command.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&#39; attempted to return null from a method with a primitive return type (&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> method.</span><span style="color:#B392F0;">getReturnType</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;).&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(SqlSession sqlSession, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] args) {</span></span>
<span class="line"><span style="color:#24292E;">  Object result;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (command.</span><span style="color:#6F42C1;">getType</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> INSERT</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      Object param </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> method.</span><span style="color:#6F42C1;">convertArgsToSqlCommandParam</span><span style="color:#24292E;">(args);</span></span>
<span class="line"><span style="color:#24292E;">      result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rowCountResult</span><span style="color:#24292E;">(sqlSession.</span><span style="color:#6F42C1;">insert</span><span style="color:#24292E;">(command.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">(), param));</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> UPDATE</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      Object param </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> method.</span><span style="color:#6F42C1;">convertArgsToSqlCommandParam</span><span style="color:#24292E;">(args);</span></span>
<span class="line"><span style="color:#24292E;">      result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rowCountResult</span><span style="color:#24292E;">(sqlSession.</span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(command.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">(), param));</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> DELETE</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      Object param </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> method.</span><span style="color:#6F42C1;">convertArgsToSqlCommandParam</span><span style="color:#24292E;">(args);</span></span>
<span class="line"><span style="color:#24292E;">      result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rowCountResult</span><span style="color:#24292E;">(sqlSession.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(command.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">(), param));</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> SELECT</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (method.</span><span style="color:#6F42C1;">returnsVoid</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> method.</span><span style="color:#6F42C1;">hasResultHandler</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">executeWithResultHandler</span><span style="color:#24292E;">(sqlSession, args);</span></span>
<span class="line"><span style="color:#24292E;">        result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (method.</span><span style="color:#6F42C1;">returnsMany</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">executeForMany</span><span style="color:#24292E;">(sqlSession, args);</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (method.</span><span style="color:#6F42C1;">returnsMap</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">executeForMap</span><span style="color:#24292E;">(sqlSession, args);</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (method.</span><span style="color:#6F42C1;">returnsCursor</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">executeForCursor</span><span style="color:#24292E;">(sqlSession, args);</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        Object param </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> method.</span><span style="color:#6F42C1;">convertArgsToSqlCommandParam</span><span style="color:#24292E;">(args);</span></span>
<span class="line"><span style="color:#24292E;">        result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sqlSession.</span><span style="color:#6F42C1;">selectOne</span><span style="color:#24292E;">(command.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">(), param);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (method.</span><span style="color:#6F42C1;">returnsOptional</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (result </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">method.</span><span style="color:#6F42C1;">getReturnType</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(result.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">()))) {</span></span>
<span class="line"><span style="color:#24292E;">          result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(result);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> FLUSH</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">      result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sqlSession.</span><span style="color:#6F42C1;">flushStatements</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BindingException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Unknown execution method for: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> command.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (result </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> method.</span><span style="color:#6F42C1;">getReturnType</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">isPrimitive</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">method.</span><span style="color:#6F42C1;">returnsVoid</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BindingException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Mapper method &#39;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> command.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&#39; attempted to return null from a method with a primitive return type (&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> method.</span><span style="color:#6F42C1;">getReturnType</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;).&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div><br><h4 id="mapper-方法执行" tabindex="-1">Mapper 方法执行 <a class="header-anchor" href="#mapper-方法执行" aria-label="Permalink to &quot;Mapper 方法执行&quot;">​</a></h4><blockquote><p><strong>目标方法调用流程</strong></p><p>代理对象#目标方法</p><p>-&gt; MapperProxy#invoke</p><p>-&gt; MapperMethod#execute</p><p>-&gt; DefaultSqlSession#select|insert|update|delete</p><p>-&gt; CachingExecutor#query|update</p><p>-&gt; BaseExecutor#query|update</p></blockquote><br><p><strong>Mapper 接口的方法不可重载</strong></p><p>Mapper 接口的方法不能重载。因为在定位唯一 MapperStatement 时，使用的是 <code>全限名+方法名</code> 的策略。如果存在多个同名方法则无法定位到唯一的 MapperStatement。</p><br><h2 id="spring-集成" tabindex="-1">Spring 集成 <a class="header-anchor" href="#spring-集成" aria-label="Permalink to &quot;Spring 集成&quot;">​</a></h2><blockquote><p><a href="https://mybatis.org/spring/zh/" target="_blank" rel="noreferrer">mybatis-spring</a></p></blockquote><h3 id="sqlsessionfactorybean" tabindex="-1">SqlSessionFactoryBean <a class="header-anchor" href="#sqlsessionfactorybean" aria-label="Permalink to &quot;SqlSessionFactoryBean&quot;">​</a></h3><blockquote><p>用于创建 SqlSessionFactory 的 FactoryBean</p></blockquote><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SqlSessionFactoryBean</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FactoryBean</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">SqlSessionFactory</span><span style="color:#E1E4E8;">&gt;, </span><span style="color:#B392F0;">InitializingBean</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">ApplicationListener</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">ApplicationEvent</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SqlSessionFactoryBean</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FactoryBean</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">SqlSessionFactory</span><span style="color:#24292E;">&gt;, </span><span style="color:#6F42C1;">InitializingBean</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">ApplicationListener</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">ApplicationEvent</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>创建 SqlSessionFactoryBean</strong></p><blockquote><p>MybatisAutoConfiguration#sqlSessionFactory 会创建一个全局共享的 SqlSessionFactoryBean 交由 Spring 管理</p></blockquote><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ConditionalOnMissingBean</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> SqlSessionFactory </span><span style="color:#B392F0;">sqlSessionFactory</span><span style="color:#E1E4E8;">(DataSource dataSource) throws Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">  SqlSessionFactoryBean factory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SqlSessionFactoryBean</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ConditionalOnMissingBean</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> SqlSessionFactory </span><span style="color:#6F42C1;">sqlSessionFactory</span><span style="color:#24292E;">(DataSource dataSource) throws Exception {</span></span>
<span class="line"><span style="color:#24292E;">  SqlSessionFactoryBean factory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SqlSessionFactoryBean</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>创建 SqlSessionFactoryBuilder</strong></p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 实例化 SqlSessionFactoryBean 的时候就会跟着创建 SqlSessionFactoryBuilder</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> SqlSessionFactoryBuilder sqlSessionFactoryBuilder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SqlSessionFactoryBuilder</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 实例化 SqlSessionFactoryBean 的时候就会跟着创建 SqlSessionFactoryBuilder</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> SqlSessionFactoryBuilder sqlSessionFactoryBuilder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SqlSessionFactoryBuilder</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><br><br><h3 id="sqlsessiontemplate" tabindex="-1">SqlSessionTemplate <a class="header-anchor" href="#sqlsessiontemplate" aria-label="Permalink to &quot;SqlSessionTemplate&quot;">​</a></h3><blockquote><p>SqlSession 的实现类，由 Spring 管理，效果类似 DefaultSqlSession</p></blockquote><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SqlSessionTemplate</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SqlSession</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">DisposableBean</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SqlSessionTemplate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SqlSession</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">DisposableBean</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><br><h3 id="sqlsessionutils" tabindex="-1">SqlSessionUtils <a class="header-anchor" href="#sqlsessionutils" aria-label="Permalink to &quot;SqlSessionUtils&quot;">​</a></h3><br><h2 id="springboot-集成" tabindex="-1">SpringBoot 集成 <a class="header-anchor" href="#springboot-集成" aria-label="Permalink to &quot;SpringBoot 集成&quot;">​</a></h2><blockquote><p><a href="https://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/" target="_blank" rel="noreferrer">mybatis-spring-boot</a></p></blockquote><blockquote><p>所有核心接口/类的创建都是从 MybatisAutoConfiguration 的初始化及其内部对应方法调用开始的。Mabais 的核心配置类为 MybatisProperties，配置文件的位置和 mapper 映射文件的位置等都是在这个类内部配置的</p></blockquote><br><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://mp.weixin.qq.com/s/N4LPTmlKRrUPvZ0axzO0GA" target="_blank" rel="noreferrer">MyBatis SQL 如何执行</a></p><p><a href="https://mp.weixin.qq.com/s/5A6RHkAjJlcEjBdMW6kqVQ" target="_blank" rel="noreferrer">MyBatis 的 mapper接口如何工作？</a></p>`,191),r=[e];function t(c,E,y,i,u,b){return n(),a("div",null,r)}const F=s(o,[["render",t]]);export{d as __pageData,F as default};
