import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.834b76fb.js";const m=JSON.parse('{"title":"Spring","description":"","frontmatter":{},"headers":[],"relativePath":"posts/renew/spring/Spring.md","filePath":"posts/renew/spring/Spring.md"}'),p={name:"posts/renew/spring/Spring.md"},e=l(`<h1 id="spring" tabindex="-1">Spring <a class="header-anchor" href="#spring" aria-label="Permalink to &quot;Spring&quot;">​</a></h1><h2 id="ioc" tabindex="-1">IOC <a class="header-anchor" href="#ioc" aria-label="Permalink to &quot;IOC&quot;">​</a></h2><h3 id="启动流程" tabindex="-1">启动流程 <a class="header-anchor" href="#启动流程" aria-label="Permalink to &quot;启动流程&quot;">​</a></h3><p>SpringBoot 和 Spring 启动流程类似，都会调用 <code>AbstractApplicationContext#refresh</code>。但是 SpringBoot 在运行前需要比 Spring 多做一些初始化和前置工作。</p><br><h4 id="springapplication-run" tabindex="-1">SpringApplication#run <a class="header-anchor" href="#springapplication-run" aria-label="Permalink to &quot;SpringApplication#run&quot;">​</a></h4><blockquote><p>SpringBoot 程序初始化</p></blockquote><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// SpringApplication#run</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Run the Spring application, creating and refreshing a new ApplicationContext.</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ConfigurableApplicationContext </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(String... args) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> startTime </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> System.</span><span style="color:#B392F0;">nanoTime</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * 创建并初始化 BootstrapContext</span></span>
<span class="line"><span style="color:#6A737D;">   * </span></span>
<span class="line"><span style="color:#6A737D;">   * BootstrapContext</span></span>
<span class="line"><span style="color:#6A737D;">   * BootstrapContext 是 SpringBoot 启动时的引导上下文，会在启动和 Environment </span></span>
<span class="line"><span style="color:#6A737D;">   * 后续处理过程中可用，直到 ApplicationContext 被准备好。</span></span>
<span class="line"><span style="color:#6A737D;">   * 提供相应的懒加载单例 bean，这些 bean 可能需要较高的代价去创建，或者在容器启动时会被需要</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  DefaultBootstrapContext bootstrapContext </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createBootstrapContext</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  ConfigurableApplicationContext context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * 为系统属性设置 java.awt.headless 值，其作用是判断当前是否运行在 headless 模式下。</span></span>
<span class="line"><span style="color:#6A737D;">   * </span></span>
<span class="line"><span style="color:#6A737D;">   * Headless 模式是指在没有显示设备的情况下运行程序，即没有可视化界面，一般用于服务器</span></span>
<span class="line"><span style="color:#6A737D;">   * 或者一些没有 GUI 的环境下。在 headless 模式下，某些与 GUI 相关的操作将无法使用</span></span>
<span class="line"><span style="color:#6A737D;">   * 或者无法正常工作。</span></span>
<span class="line"><span style="color:#6A737D;">   * 在设置 java.awt.headless 为 true 后，Java 将会禁用一些与 GUI 相关的操作，从而保证</span></span>
<span class="line"><span style="color:#6A737D;">   * 程序在 headless 模式下的正常运行</span></span>
<span class="line"><span style="color:#6A737D;">   *</span></span>
<span class="line"><span style="color:#6A737D;">   * 在 Spring Boot 启动过程中，设置 java.awt.headless 系统属性可以确保应用程序在任何情况</span></span>
<span class="line"><span style="color:#6A737D;">   * 下都能够正常运行，特别是在没有 GUI 的服务器环境下。</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">configureHeadlessProperty</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取到所有运行监听器，启动后监听运行上下文环境和运行的 main 方法</span></span>
<span class="line"><span style="color:#E1E4E8;">  SpringApplicationRunListeners listeners </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getRunListeners</span><span style="color:#E1E4E8;">(args);</span></span>
<span class="line"><span style="color:#E1E4E8;">  listeners.</span><span style="color:#B392F0;">starting</span><span style="color:#E1E4E8;">(bootstrapContext, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.mainApplicationClass);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取 main 方法的运行参数</span></span>
<span class="line"><span style="color:#E1E4E8;">    ApplicationArguments applicationArguments </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultApplicationArguments</span><span style="color:#E1E4E8;">(args);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 准备运行环境，创建并配置运行环境，最后将运行环境信息绑定到 SpringApplication</span></span>
<span class="line"><span style="color:#E1E4E8;">    ConfigurableEnvironment environment </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">prepareEnvironment</span><span style="color:#E1E4E8;">(listeners, bootstrapContext, applicationArguments);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 配置需要忽略的 bean</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">configureIgnoreBeanInfo</span><span style="color:#E1E4E8;">(environment);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取打印的 banner，默认搜索 resources 下的 banner.txt</span></span>
<span class="line"><span style="color:#E1E4E8;">    Banner printedBanner </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">printBanner</span><span style="color:#E1E4E8;">(environment);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     * 创建 ApplicationContext</span></span>
<span class="line"><span style="color:#6A737D;">     * 会判断是否需要创建 WebApplicationContext</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createApplicationContext</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 设置启动类</span></span>
<span class="line"><span style="color:#E1E4E8;">    context.</span><span style="color:#B392F0;">setApplicationStartup</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.applicationStartup);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     * 准备上下文环境</span></span>
<span class="line"><span style="color:#6A737D;">     * 为 context 设置环境信息，配置后置处理器，应用初始化，准备 listener 等</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">prepareContext</span><span style="color:#E1E4E8;">(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     * 刷新上下文环境</span></span>
<span class="line"><span style="color:#6A737D;">     * 注册容器关闭 hook，并刷新容器</span></span>
<span class="line"><span style="color:#6A737D;">     * 内部调用 AbstractApplicationContext#refresh</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">refreshContext</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">afterRefresh</span><span style="color:#E1E4E8;">(context, applicationArguments);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    Duration timeTakenToStartup </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Duration.</span><span style="color:#B392F0;">ofNanos</span><span style="color:#E1E4E8;">(System.</span><span style="color:#B392F0;">nanoTime</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> startTime);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.logStartupInfo) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StartupInfoLogger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.mainApplicationClass).</span><span style="color:#B392F0;">logStarted</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getApplicationLog</span><span style="color:#E1E4E8;">(), timeTakenToStartup);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    listeners.</span><span style="color:#B392F0;">started</span><span style="color:#E1E4E8;">(context, timeTakenToStartup);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">callRunners</span><span style="color:#E1E4E8;">(context, applicationArguments);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Throwable </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">handleRunFailure</span><span style="color:#E1E4E8;">(context, ex, listeners);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalStateException</span><span style="color:#E1E4E8;">(ex);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Duration timeTakenToReady </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Duration.</span><span style="color:#B392F0;">ofNanos</span><span style="color:#E1E4E8;">(System.</span><span style="color:#B392F0;">nanoTime</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> startTime);</span></span>
<span class="line"><span style="color:#E1E4E8;">    listeners.</span><span style="color:#B392F0;">ready</span><span style="color:#E1E4E8;">(context, timeTakenToReady);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Throwable </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">handleRunFailure</span><span style="color:#E1E4E8;">(context, ex, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalStateException</span><span style="color:#E1E4E8;">(ex);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> context;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// SpringApplication#refreshContext</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">refreshContext</span><span style="color:#E1E4E8;">(ConfigurableApplicationContext context) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.registerShutdownHook) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    shutdownHook.</span><span style="color:#B392F0;">registerApplicationContext</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">refresh</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">refresh</span><span style="color:#E1E4E8;">(ConfigurableApplicationContext applicationContext) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  applicationContext.</span><span style="color:#B392F0;">refresh</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// SpringApplication#run</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Run the Spring application, creating and refreshing a new ApplicationContext.</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ConfigurableApplicationContext </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(String... args) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> startTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">nanoTime</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * 创建并初始化 BootstrapContext</span></span>
<span class="line"><span style="color:#6A737D;">   * </span></span>
<span class="line"><span style="color:#6A737D;">   * BootstrapContext</span></span>
<span class="line"><span style="color:#6A737D;">   * BootstrapContext 是 SpringBoot 启动时的引导上下文，会在启动和 Environment </span></span>
<span class="line"><span style="color:#6A737D;">   * 后续处理过程中可用，直到 ApplicationContext 被准备好。</span></span>
<span class="line"><span style="color:#6A737D;">   * 提供相应的懒加载单例 bean，这些 bean 可能需要较高的代价去创建，或者在容器启动时会被需要</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  DefaultBootstrapContext bootstrapContext </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createBootstrapContext</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  ConfigurableApplicationContext context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * 为系统属性设置 java.awt.headless 值，其作用是判断当前是否运行在 headless 模式下。</span></span>
<span class="line"><span style="color:#6A737D;">   * </span></span>
<span class="line"><span style="color:#6A737D;">   * Headless 模式是指在没有显示设备的情况下运行程序，即没有可视化界面，一般用于服务器</span></span>
<span class="line"><span style="color:#6A737D;">   * 或者一些没有 GUI 的环境下。在 headless 模式下，某些与 GUI 相关的操作将无法使用</span></span>
<span class="line"><span style="color:#6A737D;">   * 或者无法正常工作。</span></span>
<span class="line"><span style="color:#6A737D;">   * 在设置 java.awt.headless 为 true 后，Java 将会禁用一些与 GUI 相关的操作，从而保证</span></span>
<span class="line"><span style="color:#6A737D;">   * 程序在 headless 模式下的正常运行</span></span>
<span class="line"><span style="color:#6A737D;">   *</span></span>
<span class="line"><span style="color:#6A737D;">   * 在 Spring Boot 启动过程中，设置 java.awt.headless 系统属性可以确保应用程序在任何情况</span></span>
<span class="line"><span style="color:#6A737D;">   * 下都能够正常运行，特别是在没有 GUI 的服务器环境下。</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">configureHeadlessProperty</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 获取到所有运行监听器，启动后监听运行上下文环境和运行的 main 方法</span></span>
<span class="line"><span style="color:#24292E;">  SpringApplicationRunListeners listeners </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getRunListeners</span><span style="color:#24292E;">(args);</span></span>
<span class="line"><span style="color:#24292E;">  listeners.</span><span style="color:#6F42C1;">starting</span><span style="color:#24292E;">(bootstrapContext, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.mainApplicationClass);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取 main 方法的运行参数</span></span>
<span class="line"><span style="color:#24292E;">    ApplicationArguments applicationArguments </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultApplicationArguments</span><span style="color:#24292E;">(args);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 准备运行环境，创建并配置运行环境，最后将运行环境信息绑定到 SpringApplication</span></span>
<span class="line"><span style="color:#24292E;">    ConfigurableEnvironment environment </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">prepareEnvironment</span><span style="color:#24292E;">(listeners, bootstrapContext, applicationArguments);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 配置需要忽略的 bean</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">configureIgnoreBeanInfo</span><span style="color:#24292E;">(environment);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取打印的 banner，默认搜索 resources 下的 banner.txt</span></span>
<span class="line"><span style="color:#24292E;">    Banner printedBanner </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printBanner</span><span style="color:#24292E;">(environment);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     * 创建 ApplicationContext</span></span>
<span class="line"><span style="color:#6A737D;">     * 会判断是否需要创建 WebApplicationContext</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createApplicationContext</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 设置启动类</span></span>
<span class="line"><span style="color:#24292E;">    context.</span><span style="color:#6F42C1;">setApplicationStartup</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.applicationStartup);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     * 准备上下文环境</span></span>
<span class="line"><span style="color:#6A737D;">     * 为 context 设置环境信息，配置后置处理器，应用初始化，准备 listener 等</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">prepareContext</span><span style="color:#24292E;">(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     * 刷新上下文环境</span></span>
<span class="line"><span style="color:#6A737D;">     * 注册容器关闭 hook，并刷新容器</span></span>
<span class="line"><span style="color:#6A737D;">     * 内部调用 AbstractApplicationContext#refresh</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">refreshContext</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">afterRefresh</span><span style="color:#24292E;">(context, applicationArguments);</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    Duration timeTakenToStartup </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Duration.</span><span style="color:#6F42C1;">ofNanos</span><span style="color:#24292E;">(System.</span><span style="color:#6F42C1;">nanoTime</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> startTime);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.logStartupInfo) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StartupInfoLogger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.mainApplicationClass).</span><span style="color:#6F42C1;">logStarted</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getApplicationLog</span><span style="color:#24292E;">(), timeTakenToStartup);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    listeners.</span><span style="color:#6F42C1;">started</span><span style="color:#24292E;">(context, timeTakenToStartup);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">callRunners</span><span style="color:#24292E;">(context, applicationArguments);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Throwable </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">handleRunFailure</span><span style="color:#24292E;">(context, ex, listeners);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalStateException</span><span style="color:#24292E;">(ex);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    Duration timeTakenToReady </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Duration.</span><span style="color:#6F42C1;">ofNanos</span><span style="color:#24292E;">(System.</span><span style="color:#6F42C1;">nanoTime</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> startTime);</span></span>
<span class="line"><span style="color:#24292E;">    listeners.</span><span style="color:#6F42C1;">ready</span><span style="color:#24292E;">(context, timeTakenToReady);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Throwable </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">handleRunFailure</span><span style="color:#24292E;">(context, ex, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalStateException</span><span style="color:#24292E;">(ex);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> context;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// SpringApplication#refreshContext</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">refreshContext</span><span style="color:#24292E;">(ConfigurableApplicationContext context) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.registerShutdownHook) {</span></span>
<span class="line"><span style="color:#24292E;">    shutdownHook.</span><span style="color:#6F42C1;">registerApplicationContext</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">refresh</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">refresh</span><span style="color:#24292E;">(ConfigurableApplicationContext applicationContext) {</span></span>
<span class="line"><span style="color:#24292E;">  applicationContext.</span><span style="color:#6F42C1;">refresh</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br></div></div><br><h4 id="refresh" tabindex="-1">refresh <a class="header-anchor" href="#refresh" aria-label="Permalink to &quot;refresh&quot;">​</a></h4><blockquote><p>Spring 的 IOC 容器启动的主要方法</p></blockquote><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// AbstractApplicationContext#refresh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 加载或刷新配置信息</span></span>
<span class="line"><span style="color:#6A737D;"> * 如果容器启动失败，需要销毁之前创建的单例 bean。调用此方法后，要么成功创建出所有需要的单例 bean，</span></span>
<span class="line"><span style="color:#6A737D;"> * 要么销毁所有单例 bean</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">refresh</span><span style="color:#E1E4E8;">() throws BeansException, IllegalStateException {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.startupShutdownMonitor) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    StartupStep contextRefresh </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.applicationStartup.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;spring.context.refresh&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Prepare this context for refreshing.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">prepareRefresh</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 初始化配置文件，校验配置信息，并注册早期 listener</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     * 获取 BeanFactory</span></span>
<span class="line"><span style="color:#6A737D;">     * 如果 BeanFactory 已存在，销毁所有已创建的 bean，关闭 BeanFactory，再重新创建 BeanFactory</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * 到这一步，配置文件中配置的 bean 信息都已经被 BeanFactory 获取到</span></span>
<span class="line"><span style="color:#6A737D;">     * 注意：仅仅是加载到 bean 的信息，并没有对 bean 进行实例化</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Tell the subclass to refresh the internal bean factory.</span></span>
<span class="line"><span style="color:#E1E4E8;">    ConfigurableListableBeanFactory beanFactory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">obtainFreshBeanFactory</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 配置 BeanFactory 的上下文信息，比如 ClassLoader 和 bean 后置处理器</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Prepare the bean factory for use in this context.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">prepareBeanFactory</span><span style="color:#E1E4E8;">(beanFactory);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 对 BeanFactory 进行一些后续的处理操作</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// Allows post-processing of the bean factory in context subclasses.</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">postProcessBeanFactory</span><span style="color:#E1E4E8;">(beanFactory);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      StartupStep beanPostProcess </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.applicationStartup.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;spring.context.beans.post-process&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">       * 初始化并调用所有已注册的 BeanFactoryPostProcessor</span></span>
<span class="line"><span style="color:#6A737D;">       *</span></span>
<span class="line"><span style="color:#6A737D;">       * Instantiate and invoke all registered BeanFactoryPostProcessor beans.</span></span>
<span class="line"><span style="color:#6A737D;">       * Must be called before singleton instantiation.</span></span>
<span class="line"><span style="color:#6A737D;">       * Invoke factory processors registered as beans in the context.</span></span>
<span class="line"><span style="color:#6A737D;">       */</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">invokeBeanFactoryPostProcessors</span><span style="color:#E1E4E8;">(beanFactory);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 注册 BeanPostProcessor</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// Register bean processors that intercept bean creation.</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">registerBeanPostProcessors</span><span style="color:#E1E4E8;">(beanFactory);</span></span>
<span class="line"><span style="color:#E1E4E8;">      beanPostProcess.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 后置处理器操作结束</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// Initialize message source for this context.</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">initMessageSource</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 初始化信息源，如果不存在使用父类的信息源</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// Initialize event multicaster for this context.</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">initApplicationEventMulticaster</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 初始化 ApplicationEvent 事件多播器</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// Initialize other special beans in specific context subclasses.</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">onRefresh</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 初始化其他特殊的 bean</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// Check for listener beans and register them.</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">registerListeners</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 注册监听器</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">       * 实例化所有非懒加载的单例 bean</span></span>
<span class="line"><span style="color:#6A737D;">       * 所有的非懒加载单例 bean 被创建出来后使用 DefaultSingletonBeanRegistry#addSingleton</span></span>
<span class="line"><span style="color:#6A737D;">       * 将实例化完成的 bean 放入一个 ConcurrentHashMap 中，key=beanName，value=bean 实例</span></span>
<span class="line"><span style="color:#6A737D;">       */</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// Instantiate all remaining (non-lazy-init) singletons.</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">finishBeanFactoryInitialization</span><span style="color:#E1E4E8;">(beanFactory);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// Last step: publish corresponding event.</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">finishRefresh</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 清理操作</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (BeansException </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (logger.</span><span style="color:#B392F0;">isWarnEnabled</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        logger.</span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Exception encountered during context initialization - &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;cancelling refresh attempt: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> ex);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// Destroy already created singletons to avoid dangling resources.</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">destroyBeans</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 如果启动失败，销毁所有由当前容器创建的 bean</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// Reset &#39;active&#39; flag.</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">cancelRefresh</span><span style="color:#E1E4E8;">(ex);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// Propagate exception to caller.</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> ex;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// Reset common introspection caches in Spring&#39;s core, since we</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// might not ever need metadata for singleton beans anymore...</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">resetCommonCaches</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      contextRefresh.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 结束</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// AbstractApplicationContext#refresh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 加载或刷新配置信息</span></span>
<span class="line"><span style="color:#6A737D;"> * 如果容器启动失败，需要销毁之前创建的单例 bean。调用此方法后，要么成功创建出所有需要的单例 bean，</span></span>
<span class="line"><span style="color:#6A737D;"> * 要么销毁所有单例 bean</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">refresh</span><span style="color:#24292E;">() throws BeansException, IllegalStateException {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.startupShutdownMonitor) {</span></span>
<span class="line"><span style="color:#24292E;">    StartupStep contextRefresh </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.applicationStartup.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;spring.context.refresh&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Prepare this context for refreshing.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">prepareRefresh</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 初始化配置文件，校验配置信息，并注册早期 listener</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     * 获取 BeanFactory</span></span>
<span class="line"><span style="color:#6A737D;">     * 如果 BeanFactory 已存在，销毁所有已创建的 bean，关闭 BeanFactory，再重新创建 BeanFactory</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * 到这一步，配置文件中配置的 bean 信息都已经被 BeanFactory 获取到</span></span>
<span class="line"><span style="color:#6A737D;">     * 注意：仅仅是加载到 bean 的信息，并没有对 bean 进行实例化</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Tell the subclass to refresh the internal bean factory.</span></span>
<span class="line"><span style="color:#24292E;">    ConfigurableListableBeanFactory beanFactory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">obtainFreshBeanFactory</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 配置 BeanFactory 的上下文信息，比如 ClassLoader 和 bean 后置处理器</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Prepare the bean factory for use in this context.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">prepareBeanFactory</span><span style="color:#24292E;">(beanFactory);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 对 BeanFactory 进行一些后续的处理操作</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// Allows post-processing of the bean factory in context subclasses.</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">postProcessBeanFactory</span><span style="color:#24292E;">(beanFactory);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      StartupStep beanPostProcess </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.applicationStartup.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;spring.context.beans.post-process&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">       * 初始化并调用所有已注册的 BeanFactoryPostProcessor</span></span>
<span class="line"><span style="color:#6A737D;">       *</span></span>
<span class="line"><span style="color:#6A737D;">       * Instantiate and invoke all registered BeanFactoryPostProcessor beans.</span></span>
<span class="line"><span style="color:#6A737D;">       * Must be called before singleton instantiation.</span></span>
<span class="line"><span style="color:#6A737D;">       * Invoke factory processors registered as beans in the context.</span></span>
<span class="line"><span style="color:#6A737D;">       */</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">invokeBeanFactoryPostProcessors</span><span style="color:#24292E;">(beanFactory);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 注册 BeanPostProcessor</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// Register bean processors that intercept bean creation.</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">registerBeanPostProcessors</span><span style="color:#24292E;">(beanFactory);</span></span>
<span class="line"><span style="color:#24292E;">      beanPostProcess.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 后置处理器操作结束</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// Initialize message source for this context.</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">initMessageSource</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 初始化信息源，如果不存在使用父类的信息源</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// Initialize event multicaster for this context.</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">initApplicationEventMulticaster</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 初始化 ApplicationEvent 事件多播器</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// Initialize other special beans in specific context subclasses.</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">onRefresh</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 初始化其他特殊的 bean</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// Check for listener beans and register them.</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">registerListeners</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 注册监听器</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">       * 实例化所有非懒加载的单例 bean</span></span>
<span class="line"><span style="color:#6A737D;">       * 所有的非懒加载单例 bean 被创建出来后使用 DefaultSingletonBeanRegistry#addSingleton</span></span>
<span class="line"><span style="color:#6A737D;">       * 将实例化完成的 bean 放入一个 ConcurrentHashMap 中，key=beanName，value=bean 实例</span></span>
<span class="line"><span style="color:#6A737D;">       */</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// Instantiate all remaining (non-lazy-init) singletons.</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">finishBeanFactoryInitialization</span><span style="color:#24292E;">(beanFactory);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// Last step: publish corresponding event.</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">finishRefresh</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 清理操作</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (BeansException </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (logger.</span><span style="color:#6F42C1;">isWarnEnabled</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        logger.</span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Exception encountered during context initialization - &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;cancelling refresh attempt: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ex);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// Destroy already created singletons to avoid dangling resources.</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">destroyBeans</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 如果启动失败，销毁所有由当前容器创建的 bean</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// Reset &#39;active&#39; flag.</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">cancelRefresh</span><span style="color:#24292E;">(ex);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// Propagate exception to caller.</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> ex;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// Reset common introspection caches in Spring&#39;s core, since we</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// might not ever need metadata for singleton beans anymore...</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">resetCommonCaches</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      contextRefresh.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 结束</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br></div></div><br><h3 id="bean-创建流程" tabindex="-1">Bean 创建流程 <a class="header-anchor" href="#bean-创建流程" aria-label="Permalink to &quot;Bean 创建流程&quot;">​</a></h3><h4 id="finishbeanfactoryinitialization" tabindex="-1">finishBeanFactoryInitialization <a class="header-anchor" href="#finishbeanfactoryinitialization" aria-label="Permalink to &quot;finishBeanFactoryInitialization&quot;">​</a></h4><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// AbstractApplicationContext#finishBeanFactoryInitialization</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 对所有非懒加载的单例 bean 进行初始化，并放入缓存</span></span>
<span class="line"><span style="color:#6A737D;">// Finish the initialization of this context&#39;s bean factory, initializing all </span></span>
<span class="line"><span style="color:#6A737D;">// remaining singleton beans.</span></span>
<span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">finishBeanFactoryInitialization</span><span style="color:#E1E4E8;">(ConfigurableListableBeanFactory beanFactory) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Initialize conversion service for this context.</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Register a default embedded value resolver if no BeanFactoryPostProcessor</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// (such as a PropertySourcesPlaceholderConfigurer bean) registered any before:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// at this point, primarily for resolution in annotation attribute values.</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Stop using the temporary ClassLoader for type matching.</span></span>
<span class="line"><span style="color:#E1E4E8;">  beanFactory.</span><span style="color:#B392F0;">setTempClassLoader</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Allow for caching all bean definition metadata, not expecting further changes.</span></span>
<span class="line"><span style="color:#E1E4E8;">  beanFactory.</span><span style="color:#B392F0;">freezeConfiguration</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Instantiate all remaining (non-lazy-init) singletons.</span></span>
<span class="line"><span style="color:#E1E4E8;">  beanFactory.</span><span style="color:#B392F0;">preInstantiateSingletons</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// AbstractApplicationContext#finishBeanFactoryInitialization</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 对所有非懒加载的单例 bean 进行初始化，并放入缓存</span></span>
<span class="line"><span style="color:#6A737D;">// Finish the initialization of this context&#39;s bean factory, initializing all </span></span>
<span class="line"><span style="color:#6A737D;">// remaining singleton beans.</span></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">finishBeanFactoryInitialization</span><span style="color:#24292E;">(ConfigurableListableBeanFactory beanFactory) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Initialize conversion service for this context.</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Register a default embedded value resolver if no BeanFactoryPostProcessor</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// (such as a PropertySourcesPlaceholderConfigurer bean) registered any before:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// at this point, primarily for resolution in annotation attribute values.</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Stop using the temporary ClassLoader for type matching.</span></span>
<span class="line"><span style="color:#24292E;">  beanFactory.</span><span style="color:#6F42C1;">setTempClassLoader</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Allow for caching all bean definition metadata, not expecting further changes.</span></span>
<span class="line"><span style="color:#24292E;">  beanFactory.</span><span style="color:#6F42C1;">freezeConfiguration</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Instantiate all remaining (non-lazy-init) singletons.</span></span>
<span class="line"><span style="color:#24292E;">  beanFactory.</span><span style="color:#6F42C1;">preInstantiateSingletons</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><br><h4 id="preinstantiatesingletons" tabindex="-1">preInstantiateSingletons <a class="header-anchor" href="#preinstantiatesingletons" aria-label="Permalink to &quot;preInstantiateSingletons&quot;">​</a></h4><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// DefaultListableBeanFactory#preInstantiateSingletons</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">preInstantiateSingletons</span><span style="color:#E1E4E8;">() throws BeansException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Iterate over a copy to allow for init methods which in turn register new bean definitions.</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// While this may not be part of the regular factory bootstrap, it does otherwise work fine.</span></span>
<span class="line"><span style="color:#E1E4E8;">  List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; beanNames </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.beanDefinitionNames); </span><span style="color:#6A737D;">// 遍历 beanNames</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 初始化所有非懒加载单例 bean</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Trigger initialization of all non-lazy singleton beans...</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String beanName </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> beanNames) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// A root bean definition is essentially the &#39;unified&#39; bean definition view at runtime.</span></span>
<span class="line"><span style="color:#E1E4E8;">    RootBeanDefinition bd </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getMergedLocalBeanDefinition</span><span style="color:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">bd.</span><span style="color:#B392F0;">isAbstract</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> bd.</span><span style="color:#B392F0;">isSingleton</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">bd.</span><span style="color:#B392F0;">isLazyInit</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isFactoryBean</span><span style="color:#E1E4E8;">(beanName)) { </span><span style="color:#6A737D;">// 检查是否是工厂 bean</span></span>
<span class="line"><span style="color:#E1E4E8;">        Object bean </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getBean</span><span style="color:#E1E4E8;">(FACTORY_BEAN_PREFIX </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (bean </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> FactoryBean) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          FactoryBean&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; factory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (FactoryBean</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;">) bean;</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> isEagerInit;</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (System.</span><span style="color:#B392F0;">getSecurityManager</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> factory </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> SmartFactoryBean) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            isEagerInit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AccessController.</span><span style="color:#B392F0;">doPrivileged</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                (PrivilegedAction</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Boolean</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">) ((SmartFactoryBean</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;">) factory)</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">isEagerInit,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">getAccessControlContext</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            isEagerInit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (factory </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> SmartFactoryBean </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">                ((SmartFactoryBean</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;">) factory).</span><span style="color:#B392F0;">isEagerInit</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (isEagerInit) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">getBean</span><span style="color:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">getBean</span><span style="color:#E1E4E8;">(beanName); </span><span style="color:#6A737D;">// 创建 bean</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// DefaultListableBeanFactory#preInstantiateSingletons</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">preInstantiateSingletons</span><span style="color:#24292E;">() throws BeansException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Iterate over a copy to allow for init methods which in turn register new bean definitions.</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// While this may not be part of the regular factory bootstrap, it does otherwise work fine.</span></span>
<span class="line"><span style="color:#24292E;">  List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; beanNames </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.beanDefinitionNames); </span><span style="color:#6A737D;">// 遍历 beanNames</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 初始化所有非懒加载单例 bean</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Trigger initialization of all non-lazy singleton beans...</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String beanName </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> beanNames) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// A root bean definition is essentially the &#39;unified&#39; bean definition view at runtime.</span></span>
<span class="line"><span style="color:#24292E;">    RootBeanDefinition bd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMergedLocalBeanDefinition</span><span style="color:#24292E;">(beanName);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">bd.</span><span style="color:#6F42C1;">isAbstract</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> bd.</span><span style="color:#6F42C1;">isSingleton</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">bd.</span><span style="color:#6F42C1;">isLazyInit</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isFactoryBean</span><span style="color:#24292E;">(beanName)) { </span><span style="color:#6A737D;">// 检查是否是工厂 bean</span></span>
<span class="line"><span style="color:#24292E;">        Object bean </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(FACTORY_BEAN_PREFIX </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> beanName);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (bean </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> FactoryBean) {</span></span>
<span class="line"><span style="color:#24292E;">          FactoryBean&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; factory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (FactoryBean</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">) bean;</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> isEagerInit;</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (System.</span><span style="color:#6F42C1;">getSecurityManager</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> factory </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> SmartFactoryBean) {</span></span>
<span class="line"><span style="color:#24292E;">            isEagerInit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AccessController.</span><span style="color:#6F42C1;">doPrivileged</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                (PrivilegedAction</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Boolean</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">) ((SmartFactoryBean</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">) factory)</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">isEagerInit,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">getAccessControlContext</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            isEagerInit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (factory </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> SmartFactoryBean </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">                ((SmartFactoryBean</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">) factory).</span><span style="color:#6F42C1;">isEagerInit</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (isEagerInit) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(beanName);</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(beanName); </span><span style="color:#6A737D;">// 创建 bean</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><br><h4 id="dogetbean" tabindex="-1">doGetBean <a class="header-anchor" href="#dogetbean" aria-label="Permalink to &quot;doGetBean&quot;">​</a></h4><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// AbstractBeanFactory#doGetBean</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Return an instance, which may be shared or independent, of the specified bean.</span></span>
<span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">doGetBean</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    String name, @</span><span style="color:#F97583;">Nullable</span><span style="color:#E1E4E8;"> Class</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> requiredType, @</span><span style="color:#F97583;">Nullable</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] args, </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> typeCheckOnly)</span></span>
<span class="line"><span style="color:#E1E4E8;">    throws BeansException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  String beanName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">transformedBeanName</span><span style="color:#E1E4E8;">(name);</span></span>
<span class="line"><span style="color:#E1E4E8;">  Object beanInstance;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Eagerly check singleton cache for manually registered singletons.</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 检查单例 bean 缓存，看是否已经注册过当前需要创建的 bean</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Fail if we&#39;re already creating this bean instance:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// We&#39;re assumably within a circular reference.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 检查是否是循环引用</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Check if bean definition exists in this factory.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将 Bean 标记为已创建</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">typeCheckOnly) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">markBeanAsCreated</span><span style="color:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    StartupStep beanCreation </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.applicationStartup.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;spring.beans.instantiate&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">tag</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;beanName&quot;</span><span style="color:#E1E4E8;">, name);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (requiredType </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        beanCreation.</span><span style="color:#B392F0;">tag</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;beanType&quot;</span><span style="color:#E1E4E8;">, requiredType</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">toString);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      RootBeanDefinition mbd </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getMergedLocalBeanDefinition</span><span style="color:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">checkMergedBeanDefinition</span><span style="color:#E1E4E8;">(mbd, beanName, args);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// Guarantee initialization of beans that the current bean depends on.</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 检查当前创建的 bean 是否依赖于其他 bean</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// Create bean instance.</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (mbd.</span><span style="color:#B392F0;">isSingleton</span><span style="color:#E1E4E8;">()) { </span><span style="color:#6A737D;">// 创建单例 bean</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// getSingleton 内部使用同步代码块调用 addSingleton 方法，</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 将创建好的单例 bean 放入缓存中</span></span>
<span class="line"><span style="color:#E1E4E8;">        sharedInstance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getSingleton</span><span style="color:#E1E4E8;">(beanName, () </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createBean</span><span style="color:#E1E4E8;">(beanName, mbd, args); </span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (BeansException </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// Explicitly remove instance from singleton cache: It might have been put there</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// eagerly by the creation process, to allow for circular reference resolution.</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// Also remove any beans that received a temporary reference to the bean.</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">destroySingleton</span><span style="color:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> ex;</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">        beanInstance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getObjectForBeanInstance</span><span style="color:#E1E4E8;">(sharedInstance, name, beanName, mbd);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (mbd.</span><span style="color:#B392F0;">isPrototype</span><span style="color:#E1E4E8;">()) { </span><span style="color:#6A737D;">// 创建原型 bean</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// It&#39;s a prototype -&gt; create a new instance.</span></span>
<span class="line"><span style="color:#E1E4E8;">        Object prototypeInstance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">beforePrototypeCreation</span><span style="color:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">          prototypeInstance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createBean</span><span style="color:#E1E4E8;">(beanName, mbd, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">afterPrototypeCreation</span><span style="color:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        beanInstance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getObjectForBeanInstance</span><span style="color:#E1E4E8;">(prototypeInstance, name, beanName, mbd);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 创建其他类型的 bean（request or session）</span></span>
<span class="line"><span style="color:#E1E4E8;">        String scopeName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mbd.</span><span style="color:#B392F0;">getScope</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">StringUtils.</span><span style="color:#B392F0;">hasLength</span><span style="color:#E1E4E8;">(scopeName)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalStateException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;No scope name defined for bean &#39;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> beanName </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&#39;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        Scope scope </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.scopes.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(scopeName);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (scope </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalStateException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;No Scope registered for scope name &#39;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> scopeName </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&#39;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          Object scopedInstance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> scope.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(beanName, () </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">beforePrototypeCreation</span><span style="color:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createBean</span><span style="color:#E1E4E8;">(beanName, mbd, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#B392F0;">afterPrototypeCreation</span><span style="color:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">          });</span></span>
<span class="line"><span style="color:#E1E4E8;">          beanInstance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getObjectForBeanInstance</span><span style="color:#E1E4E8;">(scopedInstance, name, beanName, mbd);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (IllegalStateException </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ScopeNotActiveException</span><span style="color:#E1E4E8;">(beanName, scopeName, ex);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (BeansException </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      beanCreation.</span><span style="color:#B392F0;">tag</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;exception&quot;</span><span style="color:#E1E4E8;">, ex.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">      beanCreation.</span><span style="color:#B392F0;">tag</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;message&quot;</span><span style="color:#E1E4E8;">, String.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(ex.</span><span style="color:#B392F0;">getMessage</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">cleanupAfterBeanCreationFailure</span><span style="color:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> ex;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      beanCreation.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// bean 创建结束</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">adaptBeanInstance</span><span style="color:#E1E4E8;">(name, beanInstance, requiredType);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// AbstractBeanFactory#doGetBean</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Return an instance, which may be shared or independent, of the specified bean.</span></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">doGetBean</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    String name, @</span><span style="color:#D73A49;">Nullable</span><span style="color:#24292E;"> Class</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> requiredType, @</span><span style="color:#D73A49;">Nullable</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] args, </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> typeCheckOnly)</span></span>
<span class="line"><span style="color:#24292E;">    throws BeansException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  String beanName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">transformedBeanName</span><span style="color:#24292E;">(name);</span></span>
<span class="line"><span style="color:#24292E;">  Object beanInstance;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Eagerly check singleton cache for manually registered singletons.</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 检查单例 bean 缓存，看是否已经注册过当前需要创建的 bean</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Fail if we&#39;re already creating this bean instance:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// We&#39;re assumably within a circular reference.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 检查是否是循环引用</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Check if bean definition exists in this factory.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将 Bean 标记为已创建</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">typeCheckOnly) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">markBeanAsCreated</span><span style="color:#24292E;">(beanName);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    StartupStep beanCreation </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.applicationStartup.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;spring.beans.instantiate&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">tag</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;beanName&quot;</span><span style="color:#24292E;">, name);</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (requiredType </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        beanCreation.</span><span style="color:#6F42C1;">tag</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;beanType&quot;</span><span style="color:#24292E;">, requiredType</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">toString);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      RootBeanDefinition mbd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMergedLocalBeanDefinition</span><span style="color:#24292E;">(beanName);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">checkMergedBeanDefinition</span><span style="color:#24292E;">(mbd, beanName, args);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// Guarantee initialization of beans that the current bean depends on.</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 检查当前创建的 bean 是否依赖于其他 bean</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// Create bean instance.</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mbd.</span><span style="color:#6F42C1;">isSingleton</span><span style="color:#24292E;">()) { </span><span style="color:#6A737D;">// 创建单例 bean</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// getSingleton 内部使用同步代码块调用 addSingleton 方法，</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 将创建好的单例 bean 放入缓存中</span></span>
<span class="line"><span style="color:#24292E;">        sharedInstance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getSingleton</span><span style="color:#24292E;">(beanName, () </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createBean</span><span style="color:#24292E;">(beanName, mbd, args); </span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (BeansException </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// Explicitly remove instance from singleton cache: It might have been put there</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// eagerly by the creation process, to allow for circular reference resolution.</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// Also remove any beans that received a temporary reference to the bean.</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">destroySingleton</span><span style="color:#24292E;">(beanName);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> ex;</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">        beanInstance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getObjectForBeanInstance</span><span style="color:#24292E;">(sharedInstance, name, beanName, mbd);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mbd.</span><span style="color:#6F42C1;">isPrototype</span><span style="color:#24292E;">()) { </span><span style="color:#6A737D;">// 创建原型 bean</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// It&#39;s a prototype -&gt; create a new instance.</span></span>
<span class="line"><span style="color:#24292E;">        Object prototypeInstance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">beforePrototypeCreation</span><span style="color:#24292E;">(beanName);</span></span>
<span class="line"><span style="color:#24292E;">          prototypeInstance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createBean</span><span style="color:#24292E;">(beanName, mbd, args);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">afterPrototypeCreation</span><span style="color:#24292E;">(beanName);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        beanInstance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getObjectForBeanInstance</span><span style="color:#24292E;">(prototypeInstance, name, beanName, mbd);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 创建其他类型的 bean（request or session）</span></span>
<span class="line"><span style="color:#24292E;">        String scopeName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mbd.</span><span style="color:#6F42C1;">getScope</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">StringUtils.</span><span style="color:#6F42C1;">hasLength</span><span style="color:#24292E;">(scopeName)) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalStateException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;No scope name defined for bean &#39;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> beanName </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&#39;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        Scope scope </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.scopes.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(scopeName);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (scope </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalStateException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;No Scope registered for scope name &#39;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> scopeName </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&#39;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          Object scopedInstance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scope.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(beanName, () </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">beforePrototypeCreation</span><span style="color:#24292E;">(beanName);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createBean</span><span style="color:#24292E;">(beanName, mbd, args);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6F42C1;">afterPrototypeCreation</span><span style="color:#24292E;">(beanName);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">          });</span></span>
<span class="line"><span style="color:#24292E;">          beanInstance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getObjectForBeanInstance</span><span style="color:#24292E;">(scopedInstance, name, beanName, mbd);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IllegalStateException </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ScopeNotActiveException</span><span style="color:#24292E;">(beanName, scopeName, ex);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (BeansException </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      beanCreation.</span><span style="color:#6F42C1;">tag</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;exception&quot;</span><span style="color:#24292E;">, ex.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">      beanCreation.</span><span style="color:#6F42C1;">tag</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#24292E;">, String.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(ex.</span><span style="color:#6F42C1;">getMessage</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">cleanupAfterBeanCreationFailure</span><span style="color:#24292E;">(beanName);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> ex;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      beanCreation.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// bean 创建结束</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">adaptBeanInstance</span><span style="color:#24292E;">(name, beanInstance, requiredType);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br></div></div><br><h4 id="createbean" tabindex="-1">createBean <a class="header-anchor" href="#createbean" aria-label="Permalink to &quot;createBean&quot;">​</a></h4><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// AbstractAutowireCapableBeanFactory#createBean</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建并填充 bean 属性值，并调用 bean 后置处理器</span></span>
<span class="line"><span style="color:#6A737D;">// Central method of this class: creates a bean instance, populates the bean </span></span>
<span class="line"><span style="color:#6A737D;">// instance, applies post-processors, etc.</span></span>
<span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">createBean</span><span style="color:#E1E4E8;">(String beanName, RootBeanDefinition mbd, @</span><span style="color:#F97583;">Nullable</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] args)</span></span>
<span class="line"><span style="color:#E1E4E8;">    throws BeanCreationException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  RootBeanDefinition mbdToUse </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mbd;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Make sure bean class is actually resolved at this point, and</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// clone the bean definition in case of a dynamically resolved Class</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// which cannot be stored in the shared merged bean definition.</span></span>
<span class="line"><span style="color:#E1E4E8;">  Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; resolvedClass </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolveBeanClass</span><span style="color:#E1E4E8;">(mbd, beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (resolvedClass </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">mbd.</span><span style="color:#B392F0;">hasBeanClass</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> mbd.</span><span style="color:#B392F0;">getBeanClassName</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    mbdToUse </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RootBeanDefinition</span><span style="color:#E1E4E8;">(mbd);</span></span>
<span class="line"><span style="color:#E1E4E8;">    mbdToUse.</span><span style="color:#B392F0;">setBeanClass</span><span style="color:#E1E4E8;">(resolvedClass);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Prepare method overrides.</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    mbdToUse.</span><span style="color:#B392F0;">prepareMethodOverrides</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (BeanDefinitionValidationException </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BeanDefinitionStoreException</span><span style="color:#E1E4E8;">(mbdToUse.</span><span style="color:#B392F0;">getResourceDescription</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">        beanName, </span><span style="color:#9ECBFF;">&quot;Validation of method overrides failed&quot;</span><span style="color:#E1E4E8;">, ex);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object bean </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolveBeforeInstantiation</span><span style="color:#E1E4E8;">(beanName, mbdToUse);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (bean </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> bean;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Throwable </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BeanCreationException</span><span style="color:#E1E4E8;">(mbdToUse.</span><span style="color:#B392F0;">getResourceDescription</span><span style="color:#E1E4E8;">(), beanName,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;BeanPostProcessor before instantiation of bean failed&quot;</span><span style="color:#E1E4E8;">, ex);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object beanInstance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doCreateBean</span><span style="color:#E1E4E8;">(beanName, mbdToUse, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (logger.</span><span style="color:#B392F0;">isTraceEnabled</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      logger.</span><span style="color:#B392F0;">trace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Finished creating instance of bean &#39;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> beanName </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&#39;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> beanInstance;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (BeanCreationException | ImplicitlyAppearedSingletonException </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// A previously detected exception with proper bean creation context already,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// or illegal singleton state to be communicated up to DefaultSingletonBeanRegistry.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> ex;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Throwable </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BeanCreationException</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        mbdToUse.</span><span style="color:#B392F0;">getResourceDescription</span><span style="color:#E1E4E8;">(), beanName, </span><span style="color:#9ECBFF;">&quot;Unexpected exception during bean creation&quot;</span><span style="color:#E1E4E8;">, ex);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// AbstractAutowireCapableBeanFactory#createBean</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建并填充 bean 属性值，并调用 bean 后置处理器</span></span>
<span class="line"><span style="color:#6A737D;">// Central method of this class: creates a bean instance, populates the bean </span></span>
<span class="line"><span style="color:#6A737D;">// instance, applies post-processors, etc.</span></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">createBean</span><span style="color:#24292E;">(String beanName, RootBeanDefinition mbd, @</span><span style="color:#D73A49;">Nullable</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] args)</span></span>
<span class="line"><span style="color:#24292E;">    throws BeanCreationException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  RootBeanDefinition mbdToUse </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mbd;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Make sure bean class is actually resolved at this point, and</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// clone the bean definition in case of a dynamically resolved Class</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// which cannot be stored in the shared merged bean definition.</span></span>
<span class="line"><span style="color:#24292E;">  Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; resolvedClass </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolveBeanClass</span><span style="color:#24292E;">(mbd, beanName);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (resolvedClass </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">mbd.</span><span style="color:#6F42C1;">hasBeanClass</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> mbd.</span><span style="color:#6F42C1;">getBeanClassName</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    mbdToUse </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RootBeanDefinition</span><span style="color:#24292E;">(mbd);</span></span>
<span class="line"><span style="color:#24292E;">    mbdToUse.</span><span style="color:#6F42C1;">setBeanClass</span><span style="color:#24292E;">(resolvedClass);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Prepare method overrides.</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    mbdToUse.</span><span style="color:#6F42C1;">prepareMethodOverrides</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (BeanDefinitionValidationException </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BeanDefinitionStoreException</span><span style="color:#24292E;">(mbdToUse.</span><span style="color:#6F42C1;">getResourceDescription</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">        beanName, </span><span style="color:#032F62;">&quot;Validation of method overrides failed&quot;</span><span style="color:#24292E;">, ex);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.</span></span>
<span class="line"><span style="color:#24292E;">    Object bean </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolveBeforeInstantiation</span><span style="color:#24292E;">(beanName, mbdToUse);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (bean </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> bean;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Throwable </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BeanCreationException</span><span style="color:#24292E;">(mbdToUse.</span><span style="color:#6F42C1;">getResourceDescription</span><span style="color:#24292E;">(), beanName,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;BeanPostProcessor before instantiation of bean failed&quot;</span><span style="color:#24292E;">, ex);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    Object beanInstance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doCreateBean</span><span style="color:#24292E;">(beanName, mbdToUse, args);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (logger.</span><span style="color:#6F42C1;">isTraceEnabled</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">      logger.</span><span style="color:#6F42C1;">trace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Finished creating instance of bean &#39;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> beanName </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&#39;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> beanInstance;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (BeanCreationException | ImplicitlyAppearedSingletonException </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// A previously detected exception with proper bean creation context already,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// or illegal singleton state to be communicated up to DefaultSingletonBeanRegistry.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> ex;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Throwable </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BeanCreationException</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        mbdToUse.</span><span style="color:#6F42C1;">getResourceDescription</span><span style="color:#24292E;">(), beanName, </span><span style="color:#032F62;">&quot;Unexpected exception during bean creation&quot;</span><span style="color:#24292E;">, ex);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br></div></div><br><h4 id="docreatebean" tabindex="-1">doCreateBean <a class="header-anchor" href="#docreatebean" aria-label="Permalink to &quot;doCreateBean&quot;">​</a></h4><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// AbstractAutowireCapableBeanFactory#doCreateBean</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Actually create the specified bean. Pre-creation processing has already happened</span></span>
<span class="line"><span style="color:#6A737D;">// at this point, e.g. checking postProcessBeforeInstantiation callbacks.</span></span>
<span class="line"><span style="color:#6A737D;">// Differentiates between default bean instantiation, use of a factory method, </span></span>
<span class="line"><span style="color:#6A737D;">// and autowiring a constructor.</span></span>
<span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">doCreateBean</span><span style="color:#E1E4E8;">(String beanName, RootBeanDefinition mbd, @</span><span style="color:#F97583;">Nullable</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] args)</span></span>
<span class="line"><span style="color:#E1E4E8;">    throws BeanCreationException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Instantiate the bean.</span></span>
<span class="line"><span style="color:#E1E4E8;">  BeanWrapper instanceWrapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (mbd.</span><span style="color:#B392F0;">isSingleton</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    instanceWrapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.factoryBeanInstanceCache.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (instanceWrapper </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    instanceWrapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createBeanInstance</span><span style="color:#E1E4E8;">(beanName, mbd, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  Object bean </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> instanceWrapper.</span><span style="color:#B392F0;">getWrappedInstance</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; beanType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> instanceWrapper.</span><span style="color:#B392F0;">getWrappedClass</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (beanType </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> NullBean.class) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    mbd.resolvedTargetType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> beanType;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Allow post-processors to modify the merged bean definition.</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> (mbd.postProcessingLock) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">mbd.postProcessed) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">applyMergedBeanDefinitionPostProcessors</span><span style="color:#E1E4E8;">(mbd, beanType, beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Throwable </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BeanCreationException</span><span style="color:#E1E4E8;">(mbd.</span><span style="color:#B392F0;">getResourceDescription</span><span style="color:#E1E4E8;">(), beanName,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;Post-processing of merged bean definition failed&quot;</span><span style="color:#E1E4E8;">, ex);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      mbd.</span><span style="color:#B392F0;">markAsPostProcessed</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Eagerly cache singletons to be able to resolve circular references</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// even when triggered by lifecycle interfaces like BeanFactoryAware.</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> earlySingletonExposure </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (mbd.</span><span style="color:#B392F0;">isSingleton</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.allowCircularReferences </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">isSingletonCurrentlyInCreation</span><span style="color:#E1E4E8;">(beanName));</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (earlySingletonExposure) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (logger.</span><span style="color:#B392F0;">isTraceEnabled</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      logger.</span><span style="color:#B392F0;">trace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Eagerly caching bean &#39;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> beanName </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;&#39; to allow for resolving potential circular references&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">addSingletonFactory</span><span style="color:#E1E4E8;">(beanName, () </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getEarlyBeanReference</span><span style="color:#E1E4E8;">(beanName, mbd, bean));</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Initialize the bean instance.</span></span>
<span class="line"><span style="color:#E1E4E8;">  Object exposedObject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> bean;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">populateBean</span><span style="color:#E1E4E8;">(beanName, mbd, instanceWrapper);</span></span>
<span class="line"><span style="color:#E1E4E8;">    exposedObject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initializeBean</span><span style="color:#E1E4E8;">(beanName, exposedObject, mbd);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Throwable </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ex </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> BeanCreationException bce </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> beanName.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(bce.</span><span style="color:#B392F0;">getBeanName</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> bce;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BeanCreationException</span><span style="color:#E1E4E8;">(mbd.</span><span style="color:#B392F0;">getResourceDescription</span><span style="color:#E1E4E8;">(), beanName, ex.</span><span style="color:#B392F0;">getMessage</span><span style="color:#E1E4E8;">(), ex);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (earlySingletonExposure) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object earlySingletonReference </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getSingleton</span><span style="color:#E1E4E8;">(beanName, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (earlySingletonReference </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (exposedObject </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> bean) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        exposedObject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> earlySingletonReference;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.allowRawInjectionDespiteWrapping </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hasDependentBean</span><span style="color:#E1E4E8;">(beanName)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] dependentBeans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getDependentBeans</span><span style="color:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Set&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; actualDependentBeans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedHashSet&lt;&gt;(dependentBeans.length);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String dependentBean </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> dependentBeans) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">removeSingletonIfCreatedForTypeCheckOnly</span><span style="color:#E1E4E8;">(dependentBean)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            actualDependentBeans.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(dependentBean);</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">actualDependentBeans.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BeanCurrentlyInCreationException</span><span style="color:#E1E4E8;">(beanName,</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#9ECBFF;">&quot;Bean with name &#39;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> beanName </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&#39; has been injected into other beans [&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">              StringUtils.</span><span style="color:#B392F0;">collectionToCommaDelimitedString</span><span style="color:#E1E4E8;">(actualDependentBeans) </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#9ECBFF;">&quot;] in its raw version as part of a circular reference, but has eventually been &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#9ECBFF;">&quot;wrapped. This means that said other beans do not use the final version of the &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#9ECBFF;">&quot;bean. This is often the result of over-eager type matching - consider using &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#9ECBFF;">&quot;&#39;getBeanNamesForType&#39; with the &#39;allowEagerInit&#39; flag turned off, for example.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Register bean as disposable.</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">registerDisposableBeanIfNecessary</span><span style="color:#E1E4E8;">(beanName, bean, mbd);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (BeanDefinitionValidationException </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BeanCreationException</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        mbd.</span><span style="color:#B392F0;">getResourceDescription</span><span style="color:#E1E4E8;">(), beanName, </span><span style="color:#9ECBFF;">&quot;Invalid destruction signature&quot;</span><span style="color:#E1E4E8;">, ex);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> exposedObject;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// AbstractAutowireCapableBeanFactory#doCreateBean</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Actually create the specified bean. Pre-creation processing has already happened</span></span>
<span class="line"><span style="color:#6A737D;">// at this point, e.g. checking postProcessBeforeInstantiation callbacks.</span></span>
<span class="line"><span style="color:#6A737D;">// Differentiates between default bean instantiation, use of a factory method, </span></span>
<span class="line"><span style="color:#6A737D;">// and autowiring a constructor.</span></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">doCreateBean</span><span style="color:#24292E;">(String beanName, RootBeanDefinition mbd, @</span><span style="color:#D73A49;">Nullable</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] args)</span></span>
<span class="line"><span style="color:#24292E;">    throws BeanCreationException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Instantiate the bean.</span></span>
<span class="line"><span style="color:#24292E;">  BeanWrapper instanceWrapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mbd.</span><span style="color:#6F42C1;">isSingleton</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    instanceWrapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.factoryBeanInstanceCache.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(beanName);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (instanceWrapper </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    instanceWrapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createBeanInstance</span><span style="color:#24292E;">(beanName, mbd, args);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  Object bean </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> instanceWrapper.</span><span style="color:#6F42C1;">getWrappedInstance</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; beanType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> instanceWrapper.</span><span style="color:#6F42C1;">getWrappedClass</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (beanType </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> NullBean.class) {</span></span>
<span class="line"><span style="color:#24292E;">    mbd.resolvedTargetType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> beanType;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Allow post-processors to modify the merged bean definition.</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (mbd.postProcessingLock) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">mbd.postProcessed) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">applyMergedBeanDefinitionPostProcessors</span><span style="color:#24292E;">(mbd, beanType, beanName);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Throwable </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BeanCreationException</span><span style="color:#24292E;">(mbd.</span><span style="color:#6F42C1;">getResourceDescription</span><span style="color:#24292E;">(), beanName,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;Post-processing of merged bean definition failed&quot;</span><span style="color:#24292E;">, ex);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      mbd.</span><span style="color:#6F42C1;">markAsPostProcessed</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Eagerly cache singletons to be able to resolve circular references</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// even when triggered by lifecycle interfaces like BeanFactoryAware.</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> earlySingletonExposure </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (mbd.</span><span style="color:#6F42C1;">isSingleton</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.allowCircularReferences </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">isSingletonCurrentlyInCreation</span><span style="color:#24292E;">(beanName));</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (earlySingletonExposure) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (logger.</span><span style="color:#6F42C1;">isTraceEnabled</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">      logger.</span><span style="color:#6F42C1;">trace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Eagerly caching bean &#39;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> beanName </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;&#39; to allow for resolving potential circular references&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">addSingletonFactory</span><span style="color:#24292E;">(beanName, () </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getEarlyBeanReference</span><span style="color:#24292E;">(beanName, mbd, bean));</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Initialize the bean instance.</span></span>
<span class="line"><span style="color:#24292E;">  Object exposedObject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bean;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">populateBean</span><span style="color:#24292E;">(beanName, mbd, instanceWrapper);</span></span>
<span class="line"><span style="color:#24292E;">    exposedObject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initializeBean</span><span style="color:#24292E;">(beanName, exposedObject, mbd);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Throwable </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ex </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> BeanCreationException bce </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> beanName.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(bce.</span><span style="color:#6F42C1;">getBeanName</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> bce;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BeanCreationException</span><span style="color:#24292E;">(mbd.</span><span style="color:#6F42C1;">getResourceDescription</span><span style="color:#24292E;">(), beanName, ex.</span><span style="color:#6F42C1;">getMessage</span><span style="color:#24292E;">(), ex);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (earlySingletonExposure) {</span></span>
<span class="line"><span style="color:#24292E;">    Object earlySingletonReference </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getSingleton</span><span style="color:#24292E;">(beanName, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (earlySingletonReference </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (exposedObject </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> bean) {</span></span>
<span class="line"><span style="color:#24292E;">        exposedObject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> earlySingletonReference;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.allowRawInjectionDespiteWrapping </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hasDependentBean</span><span style="color:#24292E;">(beanName)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] dependentBeans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getDependentBeans</span><span style="color:#24292E;">(beanName);</span></span>
<span class="line"><span style="color:#24292E;">        Set&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; actualDependentBeans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedHashSet&lt;&gt;(dependentBeans.length);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String dependentBean </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> dependentBeans) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">removeSingletonIfCreatedForTypeCheckOnly</span><span style="color:#24292E;">(dependentBean)) {</span></span>
<span class="line"><span style="color:#24292E;">            actualDependentBeans.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(dependentBean);</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">actualDependentBeans.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BeanCurrentlyInCreationException</span><span style="color:#24292E;">(beanName,</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#032F62;">&quot;Bean with name &#39;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> beanName </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&#39; has been injected into other beans [&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">              StringUtils.</span><span style="color:#6F42C1;">collectionToCommaDelimitedString</span><span style="color:#24292E;">(actualDependentBeans) </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#032F62;">&quot;] in its raw version as part of a circular reference, but has eventually been &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#032F62;">&quot;wrapped. This means that said other beans do not use the final version of the &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#032F62;">&quot;bean. This is often the result of over-eager type matching - consider using &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#032F62;">&quot;&#39;getBeanNamesForType&#39; with the &#39;allowEagerInit&#39; flag turned off, for example.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Register bean as disposable.</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">registerDisposableBeanIfNecessary</span><span style="color:#24292E;">(beanName, bean, mbd);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (BeanDefinitionValidationException </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BeanCreationException</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        mbd.</span><span style="color:#6F42C1;">getResourceDescription</span><span style="color:#24292E;">(), beanName, </span><span style="color:#032F62;">&quot;Invalid destruction signature&quot;</span><span style="color:#24292E;">, ex);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> exposedObject;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br></div></div><br><h4 id="createbeaninstance" tabindex="-1">createBeanInstance <a class="header-anchor" href="#createbeaninstance" aria-label="Permalink to &quot;createBeanInstance&quot;">​</a></h4><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// AbstractAutowireCapableBeanFactory#createBeanInstance</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Create a new instance for the specified bean, using an appropriate instantiation</span></span>
<span class="line"><span style="color:#6A737D;">// strategy: factory method, constructor autowiring, or simple instantiation.</span></span>
<span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> BeanWrapper </span><span style="color:#B392F0;">createBeanInstance</span><span style="color:#E1E4E8;">(String beanName, RootBeanDefinition mbd, @</span><span style="color:#F97583;">Nullable</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Make sure bean class is actually resolved at this point.</span></span>
<span class="line"><span style="color:#E1E4E8;">  Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; beanClass </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolveBeanClass</span><span style="color:#E1E4E8;">(mbd, beanName);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 检查是否是 public 修饰的 bean，非 public 无法创建</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  Supplier&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; instanceSupplier </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mbd.</span><span style="color:#B392F0;">getInstanceSupplier</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (instanceSupplier </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">obtainFromSupplier</span><span style="color:#E1E4E8;">(instanceSupplier, beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (mbd.</span><span style="color:#B392F0;">getFactoryMethodName</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">instantiateUsingFactoryMethod</span><span style="color:#E1E4E8;">(beanName, mbd, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 非单例 bean 创建</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Shortcut when re-creating the same bean...</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> resolved </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> autowireNecessary </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (args </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> (mbd.constructorArgumentLock) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (mbd.resolvedConstructorOrFactoryMethod </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        resolved </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        autowireNecessary </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mbd.constructorArgumentsResolved;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (resolved) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (autowireNecessary) { </span><span style="color:#6A737D;">// 检查是否需要进行构造器注入</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">autowireConstructor</span><span style="color:#E1E4E8;">(beanName, mbd, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">instantiateBean</span><span style="color:#E1E4E8;">(beanName, mbd); </span><span style="color:#6A737D;">//无需进行构造器注入</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Candidate constructors for autowiring?</span></span>
<span class="line"><span style="color:#E1E4E8;">  Constructor&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;[] ctors </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">determineConstructorsFromBeanPostProcessors</span><span style="color:#E1E4E8;">(beanClass, beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ctors </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> mbd.</span><span style="color:#B392F0;">getResolvedAutowireMode</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> AUTOWIRE_CONSTRUCTOR </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">      mbd.</span><span style="color:#B392F0;">hasConstructorArgumentValues</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">ObjectUtils.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(args)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">autowireConstructor</span><span style="color:#E1E4E8;">(beanName, mbd, ctors, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Preferred constructors for default construction?</span></span>
<span class="line"><span style="color:#E1E4E8;">  ctors </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mbd.</span><span style="color:#B392F0;">getPreferredConstructors</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ctors </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">autowireConstructor</span><span style="color:#E1E4E8;">(beanName, mbd, ctors, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// No special handling: simply use no-arg constructor.</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">instantiateBean</span><span style="color:#E1E4E8;">(beanName, mbd); </span><span style="color:#6A737D;">// 使用无参构造器创建 bean</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// AbstractAutowireCapableBeanFactory#createBeanInstance</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Create a new instance for the specified bean, using an appropriate instantiation</span></span>
<span class="line"><span style="color:#6A737D;">// strategy: factory method, constructor autowiring, or simple instantiation.</span></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> BeanWrapper </span><span style="color:#6F42C1;">createBeanInstance</span><span style="color:#24292E;">(String beanName, RootBeanDefinition mbd, @</span><span style="color:#D73A49;">Nullable</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] args) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Make sure bean class is actually resolved at this point.</span></span>
<span class="line"><span style="color:#24292E;">  Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; beanClass </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolveBeanClass</span><span style="color:#24292E;">(mbd, beanName);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 检查是否是 public 修饰的 bean，非 public 无法创建</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  Supplier&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; instanceSupplier </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mbd.</span><span style="color:#6F42C1;">getInstanceSupplier</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (instanceSupplier </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">obtainFromSupplier</span><span style="color:#24292E;">(instanceSupplier, beanName);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mbd.</span><span style="color:#6F42C1;">getFactoryMethodName</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">instantiateUsingFactoryMethod</span><span style="color:#24292E;">(beanName, mbd, args);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 非单例 bean 创建</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Shortcut when re-creating the same bean...</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> resolved </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> autowireNecessary </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (args </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (mbd.constructorArgumentLock) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mbd.resolvedConstructorOrFactoryMethod </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        resolved </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        autowireNecessary </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mbd.constructorArgumentsResolved;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (resolved) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (autowireNecessary) { </span><span style="color:#6A737D;">// 检查是否需要进行构造器注入</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">autowireConstructor</span><span style="color:#24292E;">(beanName, mbd, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">instantiateBean</span><span style="color:#24292E;">(beanName, mbd); </span><span style="color:#6A737D;">//无需进行构造器注入</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Candidate constructors for autowiring?</span></span>
<span class="line"><span style="color:#24292E;">  Constructor&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;[] ctors </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">determineConstructorsFromBeanPostProcessors</span><span style="color:#24292E;">(beanClass, beanName);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ctors </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> mbd.</span><span style="color:#6F42C1;">getResolvedAutowireMode</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> AUTOWIRE_CONSTRUCTOR </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">      mbd.</span><span style="color:#6F42C1;">hasConstructorArgumentValues</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">ObjectUtils.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(args)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">autowireConstructor</span><span style="color:#24292E;">(beanName, mbd, ctors, args);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Preferred constructors for default construction?</span></span>
<span class="line"><span style="color:#24292E;">  ctors </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mbd.</span><span style="color:#6F42C1;">getPreferredConstructors</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ctors </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">autowireConstructor</span><span style="color:#24292E;">(beanName, mbd, ctors, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// No special handling: simply use no-arg constructor.</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">instantiateBean</span><span style="color:#24292E;">(beanName, mbd); </span><span style="color:#6A737D;">// 使用无参构造器创建 bean</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br></div></div><br><h4 id="instantiatebean" tabindex="-1">instantiateBean <a class="header-anchor" href="#instantiatebean" aria-label="Permalink to &quot;instantiateBean&quot;">​</a></h4><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// AbstractAutowireCapableBeanFactory#initializeBean</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Initialize the given bean instance, applying factory callbacks as well as init methods </span></span>
<span class="line"><span style="color:#6A737D;">// and bean post processors. Called from createBean for traditionally defined beans, and </span></span>
<span class="line"><span style="color:#6A737D;">// from initializeBean for existing bean instances.</span></span>
<span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">initializeBean</span><span style="color:#E1E4E8;">(String beanName, Object bean, @</span><span style="color:#F97583;">Nullable</span><span style="color:#E1E4E8;"> RootBeanDefinition mbd) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">invokeAwareMethods</span><span style="color:#E1E4E8;">(beanName, bean);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  Object wrappedBean </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> bean;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (mbd </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">mbd.</span><span style="color:#B392F0;">isSynthetic</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 执行 BeanPostProcessorsBeforeInitialization</span></span>
<span class="line"><span style="color:#E1E4E8;">    wrappedBean </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">applyBeanPostProcessorsBeforeInitialization</span><span style="color:#E1E4E8;">(wrappedBean, beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 执行 bean 创建</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">invokeInitMethods</span><span style="color:#E1E4E8;">(beanName, wrappedBean, mbd);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Throwable </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BeanCreationException</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        (mbd </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> mbd.</span><span style="color:#B392F0;">getResourceDescription</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">), beanName, ex.</span><span style="color:#B392F0;">getMessage</span><span style="color:#E1E4E8;">(), ex);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (mbd </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">mbd.</span><span style="color:#B392F0;">isSynthetic</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 执行 BeanPostProcessorsAfterInitialization</span></span>
<span class="line"><span style="color:#E1E4E8;">    wrappedBean </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">applyBeanPostProcessorsAfterInitialization</span><span style="color:#E1E4E8;">(wrappedBean, beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> wrappedBean;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// AbstractAutowireCapableBeanFactory#initializeBean</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Initialize the given bean instance, applying factory callbacks as well as init methods </span></span>
<span class="line"><span style="color:#6A737D;">// and bean post processors. Called from createBean for traditionally defined beans, and </span></span>
<span class="line"><span style="color:#6A737D;">// from initializeBean for existing bean instances.</span></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">initializeBean</span><span style="color:#24292E;">(String beanName, Object bean, @</span><span style="color:#D73A49;">Nullable</span><span style="color:#24292E;"> RootBeanDefinition mbd) {</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">invokeAwareMethods</span><span style="color:#24292E;">(beanName, bean);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  Object wrappedBean </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bean;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mbd </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">mbd.</span><span style="color:#6F42C1;">isSynthetic</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 执行 BeanPostProcessorsBeforeInitialization</span></span>
<span class="line"><span style="color:#24292E;">    wrappedBean </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">applyBeanPostProcessorsBeforeInitialization</span><span style="color:#24292E;">(wrappedBean, beanName);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 执行 bean 创建</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">invokeInitMethods</span><span style="color:#24292E;">(beanName, wrappedBean, mbd);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Throwable </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BeanCreationException</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        (mbd </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> mbd.</span><span style="color:#6F42C1;">getResourceDescription</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">), beanName, ex.</span><span style="color:#6F42C1;">getMessage</span><span style="color:#24292E;">(), ex);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mbd </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">mbd.</span><span style="color:#6F42C1;">isSynthetic</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 执行 BeanPostProcessorsAfterInitialization</span></span>
<span class="line"><span style="color:#24292E;">    wrappedBean </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">applyBeanPostProcessorsAfterInitialization</span><span style="color:#24292E;">(wrappedBean, beanName);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> wrappedBean;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><br><h3 id="bean-获取流程" tabindex="-1">Bean 获取流程 <a class="header-anchor" href="#bean-获取流程" aria-label="Permalink to &quot;Bean 获取流程&quot;">​</a></h3><h4 id="getbean" tabindex="-1">getBean <a class="header-anchor" href="#getbean" aria-label="Permalink to &quot;getBean&quot;">​</a></h4><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// DefaultListableBeanFactory#getBean</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">getBean</span><span style="color:#E1E4E8;">(Class</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> requiredType, @</span><span style="color:#F97583;">Nullable</span><span style="color:#E1E4E8;"> Object... args) throws BeansException {</span></span>
<span class="line"><span style="color:#E1E4E8;">  Assert.</span><span style="color:#B392F0;">notNull</span><span style="color:#E1E4E8;">(requiredType, </span><span style="color:#9ECBFF;">&quot;Required type must not be null&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  Object resolved </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolveBean</span><span style="color:#E1E4E8;">(ResolvableType.</span><span style="color:#B392F0;">forRawClass</span><span style="color:#E1E4E8;">(requiredType), args, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (resolved </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NoSuchBeanDefinitionException</span><span style="color:#E1E4E8;">(requiredType);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (T) resolved;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// DefaultListableBeanFactory#getBean</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(Class</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> requiredType, @</span><span style="color:#D73A49;">Nullable</span><span style="color:#24292E;"> Object... args) throws BeansException {</span></span>
<span class="line"><span style="color:#24292E;">  Assert.</span><span style="color:#6F42C1;">notNull</span><span style="color:#24292E;">(requiredType, </span><span style="color:#032F62;">&quot;Required type must not be null&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  Object resolved </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolveBean</span><span style="color:#24292E;">(ResolvableType.</span><span style="color:#6F42C1;">forRawClass</span><span style="color:#24292E;">(requiredType), args, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (resolved </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NoSuchBeanDefinitionException</span><span style="color:#24292E;">(requiredType);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (T) resolved;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><br><h4 id="resolvebean" tabindex="-1">resolveBean <a class="header-anchor" href="#resolvebean" aria-label="Permalink to &quot;resolveBean&quot;">​</a></h4><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// DefaultListableBeanFactory#resolveBean</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">resolveBean</span><span style="color:#E1E4E8;">(ResolvableType requiredType, @</span><span style="color:#F97583;">Nullable</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] args, </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> nonUniqueAsNull) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  NamedBeanHolder&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; namedBean </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolveNamedBean</span><span style="color:#E1E4E8;">(requiredType, args, nonUniqueAsNull);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (namedBean </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> namedBean.</span><span style="color:#B392F0;">getBeanInstance</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  BeanFactory parent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getParentBeanFactory</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (parent </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> DefaultListableBeanFactory dlfb) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> dlfb.</span><span style="color:#B392F0;">resolveBean</span><span style="color:#E1E4E8;">(requiredType, args, nonUniqueAsNull);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (parent </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ObjectProvider&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; parentProvider </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parent.</span><span style="color:#B392F0;">getBeanProvider</span><span style="color:#E1E4E8;">(requiredType);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (args </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> parentProvider.</span><span style="color:#B392F0;">getObject</span><span style="color:#E1E4E8;">(args);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (nonUniqueAsNull </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> parentProvider.</span><span style="color:#B392F0;">getIfUnique</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> parentProvider.</span><span style="color:#B392F0;">getIfAvailable</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// DefaultListableBeanFactory#resolveBean</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">resolveBean</span><span style="color:#24292E;">(ResolvableType requiredType, @</span><span style="color:#D73A49;">Nullable</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] args, </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> nonUniqueAsNull) {</span></span>
<span class="line"><span style="color:#24292E;">  NamedBeanHolder&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; namedBean </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolveNamedBean</span><span style="color:#24292E;">(requiredType, args, nonUniqueAsNull);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (namedBean </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> namedBean.</span><span style="color:#6F42C1;">getBeanInstance</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  BeanFactory parent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getParentBeanFactory</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (parent </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> DefaultListableBeanFactory dlfb) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> dlfb.</span><span style="color:#6F42C1;">resolveBean</span><span style="color:#24292E;">(requiredType, args, nonUniqueAsNull);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (parent </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    ObjectProvider&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; parentProvider </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parent.</span><span style="color:#6F42C1;">getBeanProvider</span><span style="color:#24292E;">(requiredType);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (args </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> parentProvider.</span><span style="color:#6F42C1;">getObject</span><span style="color:#24292E;">(args);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (nonUniqueAsNull </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> parentProvider.</span><span style="color:#6F42C1;">getIfUnique</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> parentProvider.</span><span style="color:#6F42C1;">getIfAvailable</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><br><h4 id="namedbeanholder" tabindex="-1">NamedBeanHolder <a class="header-anchor" href="#namedbeanholder" aria-label="Permalink to &quot;NamedBeanHolder&quot;">​</a></h4><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// DefaultListableBeanFactory#resolveNamedBean</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> NamedBeanHolder</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolveNamedBean</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    ResolvableType requiredType, @</span><span style="color:#F97583;">Nullable</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] args, </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> nonUniqueAsNull) throws BeansException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  Assert.</span><span style="color:#B392F0;">notNull</span><span style="color:#E1E4E8;">(requiredType, </span><span style="color:#9ECBFF;">&quot;Required type must not be null&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 根据 requiredType 获取到同一类型的所有 beanName</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] candidateNames </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getBeanNamesForType</span><span style="color:#E1E4E8;">(requiredType);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (candidateNames.length </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 如果存在多个 requiredType 同一类型的 bean</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; autowireCandidates </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;(candidateNames.length);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String beanName </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> candidateNames) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">containsBeanDefinition</span><span style="color:#E1E4E8;">(beanName) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getBeanDefinition</span><span style="color:#E1E4E8;">(beanName).</span><span style="color:#B392F0;">isAutowireCandidate</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        autowireCandidates.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">autowireCandidates.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      candidateNames </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> StringUtils.</span><span style="color:#B392F0;">toStringArray</span><span style="color:#E1E4E8;">(autowireCandidates);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (candidateNames.length </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 只存在一个 requiredType 类型的 bean</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolveNamedBean</span><span style="color:#E1E4E8;">(candidateNames[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">], requiredType, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (candidateNames.length </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; candidates </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CollectionUtils.</span><span style="color:#B392F0;">newLinkedHashMap</span><span style="color:#E1E4E8;">(candidateNames.length);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String beanName </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> candidateNames) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">containsSingleton</span><span style="color:#E1E4E8;">(beanName) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> args </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Object beanInstance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getBean</span><span style="color:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">        candidates.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(beanName, (beanInstance </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> NullBean </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> beanInstance));</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        candidates.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(beanName, </span><span style="color:#B392F0;">getType</span><span style="color:#E1E4E8;">(beanName));</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    String candidateName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">determinePrimaryCandidate</span><span style="color:#E1E4E8;">(candidates, requiredType.</span><span style="color:#B392F0;">toClass</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (candidateName </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      candidateName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">determineHighestPriorityCandidate</span><span style="color:#E1E4E8;">(candidates, requiredType.</span><span style="color:#B392F0;">toClass</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (candidateName </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      Object beanInstance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> candidates.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(candidateName);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (beanInstance </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (beanInstance </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> Class) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolveNamedBean</span><span style="color:#E1E4E8;">(candidateName, requiredType, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> NamedBeanHolder&lt;&gt;(candidateName, (T) beanInstance);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">nonUniqueAsNull) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NoUniqueBeanDefinitionException</span><span style="color:#E1E4E8;">(requiredType, candidates.</span><span style="color:#B392F0;">keySet</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// DefaultListableBeanFactory#resolveNamedBean</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> NamedBeanHolder</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolveNamedBean</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    ResolvableType requiredType, @</span><span style="color:#D73A49;">Nullable</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] args, </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> nonUniqueAsNull) throws BeansException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  Assert.</span><span style="color:#6F42C1;">notNull</span><span style="color:#24292E;">(requiredType, </span><span style="color:#032F62;">&quot;Required type must not be null&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 根据 requiredType 获取到同一类型的所有 beanName</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] candidateNames </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getBeanNamesForType</span><span style="color:#24292E;">(requiredType);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (candidateNames.length </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 如果存在多个 requiredType 同一类型的 bean</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; autowireCandidates </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;(candidateNames.length);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String beanName </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> candidateNames) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">containsBeanDefinition</span><span style="color:#24292E;">(beanName) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getBeanDefinition</span><span style="color:#24292E;">(beanName).</span><span style="color:#6F42C1;">isAutowireCandidate</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        autowireCandidates.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(beanName);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">autowireCandidates.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">      candidateNames </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> StringUtils.</span><span style="color:#6F42C1;">toStringArray</span><span style="color:#24292E;">(autowireCandidates);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (candidateNames.length </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 只存在一个 requiredType 类型的 bean</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolveNamedBean</span><span style="color:#24292E;">(candidateNames[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">], requiredType, args);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (candidateNames.length </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; candidates </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CollectionUtils.</span><span style="color:#6F42C1;">newLinkedHashMap</span><span style="color:#24292E;">(candidateNames.length);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String beanName </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> candidateNames) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">containsSingleton</span><span style="color:#24292E;">(beanName) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> args </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Object beanInstance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(beanName);</span></span>
<span class="line"><span style="color:#24292E;">        candidates.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(beanName, (beanInstance </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> NullBean </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> beanInstance));</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        candidates.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(beanName, </span><span style="color:#6F42C1;">getType</span><span style="color:#24292E;">(beanName));</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    String candidateName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">determinePrimaryCandidate</span><span style="color:#24292E;">(candidates, requiredType.</span><span style="color:#6F42C1;">toClass</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (candidateName </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      candidateName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">determineHighestPriorityCandidate</span><span style="color:#24292E;">(candidates, requiredType.</span><span style="color:#6F42C1;">toClass</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (candidateName </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      Object beanInstance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> candidates.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(candidateName);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (beanInstance </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (beanInstance </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> Class) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolveNamedBean</span><span style="color:#24292E;">(candidateName, requiredType, args);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> NamedBeanHolder&lt;&gt;(candidateName, (T) beanInstance);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">nonUniqueAsNull) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NoUniqueBeanDefinitionException</span><span style="color:#24292E;">(requiredType, candidates.</span><span style="color:#6F42C1;">keySet</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br></div></div><br><h4 id="resolvenamedbean" tabindex="-1">resolveNamedBean <a class="header-anchor" href="#resolvenamedbean" aria-label="Permalink to &quot;resolveNamedBean&quot;">​</a></h4><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> NamedBeanHolder</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolveNamedBean</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    String beanName, ResolvableType requiredType, @</span><span style="color:#F97583;">Nullable</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] args) throws BeansException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  Object bean </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getBean</span><span style="color:#E1E4E8;">(beanName, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, args); </span><span style="color:#6A737D;">// 调用 getSingleton 从缓存中获取 bean</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (bean </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> NullBean) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> NamedBeanHolder&lt;&gt;(beanName, </span><span style="color:#B392F0;">adaptBeanInstance</span><span style="color:#E1E4E8;">(beanName, bean, requiredType.</span><span style="color:#B392F0;">toClass</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> NamedBeanHolder</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolveNamedBean</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    String beanName, ResolvableType requiredType, @</span><span style="color:#D73A49;">Nullable</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] args) throws BeansException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  Object bean </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(beanName, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, args); </span><span style="color:#6A737D;">// 调用 getSingleton 从缓存中获取 bean</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (bean </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> NullBean) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> NamedBeanHolder&lt;&gt;(beanName, </span><span style="color:#6F42C1;">adaptBeanInstance</span><span style="color:#24292E;">(beanName, bean, requiredType.</span><span style="color:#6F42C1;">toClass</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><br><h4 id="getsingleton" tabindex="-1">getSingleton <a class="header-anchor" href="#getsingleton" aria-label="Permalink to &quot;getSingleton&quot;">​</a></h4><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">getSingleton</span><span style="color:#E1E4E8;">(String beanName, </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> allowEarlyReference) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// singletonObjects 是一个 ConcurrentHashMap</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Quick check for existing instance without full singleton lock</span></span>
<span class="line"><span style="color:#E1E4E8;">  Object singletonObject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.singletonObjects.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果是并发创建 bean</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (singletonObject </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isSingletonCurrentlyInCreation</span><span style="color:#E1E4E8;">(beanName)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    singletonObject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.earlySingletonObjects.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (singletonObject </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> allowEarlyReference) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.singletonObjects) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Consistent creation of early reference within full singleton lock</span></span>
<span class="line"><span style="color:#E1E4E8;">        singletonObject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.singletonObjects.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (singletonObject </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          singletonObject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.earlySingletonObjects.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (singletonObject </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            ObjectFactory&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; singletonFactory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.singletonFactories.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (singletonFactory </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">              singletonObject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> singletonFactory.</span><span style="color:#B392F0;">getObject</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.earlySingletonObjects.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(beanName, singletonObject);</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.singletonFactories.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> singletonObject;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">getSingleton</span><span style="color:#24292E;">(String beanName, </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> allowEarlyReference) {</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// singletonObjects 是一个 ConcurrentHashMap</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Quick check for existing instance without full singleton lock</span></span>
<span class="line"><span style="color:#24292E;">  Object singletonObject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.singletonObjects.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(beanName);</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果是并发创建 bean</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (singletonObject </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isSingletonCurrentlyInCreation</span><span style="color:#24292E;">(beanName)) {</span></span>
<span class="line"><span style="color:#24292E;">    singletonObject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.earlySingletonObjects.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(beanName);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (singletonObject </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> allowEarlyReference) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.singletonObjects) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Consistent creation of early reference within full singleton lock</span></span>
<span class="line"><span style="color:#24292E;">        singletonObject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.singletonObjects.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(beanName);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (singletonObject </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          singletonObject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.earlySingletonObjects.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(beanName);</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (singletonObject </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            ObjectFactory&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; singletonFactory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.singletonFactories.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(beanName);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (singletonFactory </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">              singletonObject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> singletonFactory.</span><span style="color:#6F42C1;">getObject</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.earlySingletonObjects.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(beanName, singletonObject);</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.singletonFactories.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(beanName);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> singletonObject;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><br><h3 id="bean-状态" tabindex="-1">Bean 状态 <a class="header-anchor" href="#bean-状态" aria-label="Permalink to &quot;Bean 状态&quot;">​</a></h3><blockquote><p>Bean 有无状态和有状态之分：</p><ul><li>有状态是指在 bean 的生命周期内维护了某些状态变量，并且其他地方获取该 bean 时，仍能够访问到之前保存的状态变量数据；</li><li>无状态是指在 bean 的生命周期中的行为不受先前操作和状态的影响，每次操作都是独立的。</li></ul><br><p>Spring 的 IOC 容器中存在多种不同生命周期的 bean，singleton、prototype、request、session。</p><p>单例 bean 能被所有能获取到 IOC 容器的地方访问到，bean 本身是共享的。如果单例 bean 是无状态的，无任何成员变量，不保存任何状态，则说明是线程安全的，比如 dao 层的类；如果单例 bean 是有状态的，在并发环境下就需要注意线程安全问题。</p></blockquote><br><h2 id="事务管理" tabindex="-1">事务管理 <a class="header-anchor" href="#事务管理" aria-label="Permalink to &quot;事务管理&quot;">​</a></h2><h3 id="事务接口及抽象类" tabindex="-1">事务接口及抽象类 <a class="header-anchor" href="#事务接口及抽象类" aria-label="Permalink to &quot;事务接口及抽象类&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Spring 事务的顶层父类，用来管理 Spring 事务</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TransactionManager</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * PlatformTransactionManager 是 Spring 事务框架中最基础/重要的接口</span></span>
<span class="line"><span style="color:#6A737D;"> * The TransactionException that can be thrown by any of the PlatformTransactionManager interface’s methods is unchecked</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PlatformTransactionManager</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TransactionManager</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 此方法根据参数 TransactionDefinition 返回一个 TransactionStatus 对象</span></span>
<span class="line"><span style="color:#6A737D;">     * 返回的 TransactionStatus 可能是一个新事务或者已存在的事务（如果当前调用栈中存在事务）</span></span>
<span class="line"><span style="color:#6A737D;">     * 参数 TransactionDefinition 描述传播行为、隔离级别、超时等</span></span>
<span class="line"><span style="color:#6A737D;">     * 此方法会根据参数对事务传播行为的定义，返回一个当前处于活跃状态的事务（如果存在），或创建一个新的事务</span></span>
<span class="line"><span style="color:#6A737D;">     * 参数对事务隔离级别或者超时时间的设置，会忽略已存在的事务，只作用于新建的事务</span></span>
<span class="line"><span style="color:#6A737D;">     * 并非所有事务定义设置都会受到每个事务管理器的支持，在遇到不受支持的设置时事务管理器会抛出异常</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    TransactionStatus </span><span style="color:#B392F0;">getTransaction</span><span style="color:#E1E4E8;">(TransactionDefinition </span><span style="color:#FFAB70;">definition</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> TransactionException;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">commit</span><span style="color:#E1E4E8;">(TransactionStatus </span><span style="color:#FFAB70;">status</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> TransactionException;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rollback</span><span style="color:#E1E4E8;">(TransactionStatus </span><span style="color:#FFAB70;">status</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> TransactionException;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Based on the propagation behavior definitions analogous to EJB CMT attributes.</span></span>
<span class="line"><span style="color:#6A737D;"> * Note that isolation level and timeout settings will not get applied unless an actual new transaction gets started.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TransactionDefinition</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Spring 事务的隔离级别与 JDBC 定义的隔离级别对应</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> ISOLATION_DEFAULT </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#6A737D;">  	/**</span></span>
<span class="line"><span style="color:#6A737D;">  	 * 脏读：读取到另一个事务修改但未提交的数据</span></span>
<span class="line"><span style="color:#6A737D;">  	 * 不可重复度：当事务 A 首先读取数据，事务 B 也读取同一个数据，并将数据修改，而后事务 A 再次读取就会得到和第一次读取不一样的结果</span></span>
<span class="line"><span style="color:#6A737D;">  	 * 幻读：一个事务读取所有满足 WHERE 条件的行，第二个事务插入一条满足 WHERE 条件的记录，第一个事务使用相同条件重新读取，在第二次读取中读取出额外的 &quot;幻影 &quot;记录</span></span>
<span class="line"><span style="color:#6A737D;">  	 */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 读未提交</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 可读取到另一个事务修改但未提交的数据</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 存在脏读/不可重复度/幻读</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> ISOLATION_READ_UNCOMMITTED </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;  </span><span style="color:#6A737D;">// same as java.sql.Connection.TRANSACTION_READ_UNCOMMITTED;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 读已提交</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 解决脏读，存在不可重复度/幻读</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> ISOLATION_READ_COMMITTED </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;  </span><span style="color:#6A737D;">// same as java.sql.Connection.TRANSACTION_READ_COMMITTED;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 可重复度</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 解决脏读/不可重复度，存在幻读</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> ISOLATION_REPEATABLE_READ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">;  </span><span style="color:#6A737D;">// same as java.sql.Connection.TRANSACTION_REPEATABLE_READ;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 可序列化/串行化，事务串行化执行，一次只允许一个事务操作</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 解决脏读/不可重复度/幻读</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> ISOLATION_SERIALIZABLE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">;  </span><span style="color:#6A737D;">// same as java.sql.Connection.TRANSACTION_SERIALIZABLE;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 以下为 Spring 事务管理支持的传播行为，一共 7 种</span></span>
<span class="line"><span style="color:#6A737D;">  	/**</span></span>
<span class="line"><span style="color:#6A737D;">  	 * Support a current transaction. Create a new one if none exists. This is typically the default setting of a transaction definition and typically defines a transaction synchronization scope.</span></span>
<span class="line"><span style="color:#6A737D;">  	 * 如果当前存在事务，则加入；如果事务不存在，则新建</span></span>
<span class="line"><span style="color:#6A737D;">  	 * 这通常是事务的默认隔离级别，通常定义事务同步范围</span></span>
<span class="line"><span style="color:#6A737D;">  	 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> PROPAGATION_REQUIRED </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span></span>
<span class="line"><span style="color:#6A737D;">  	/**</span></span>
<span class="line"><span style="color:#6A737D;">  	 * Support a current transaction; execute non-transactionally if none exists.</span></span>
<span class="line"><span style="color:#6A737D;">  	 * 如果当前存在事务，则加入；如果事务不存在，则以无事务的方式运行</span></span>
<span class="line"><span style="color:#6A737D;">  	 */</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> PROPAGATION_SUPPORTS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#6A737D;">  	/**</span></span>
<span class="line"><span style="color:#6A737D;">  	 * Support a current transaction; throw an exception if no current transaction exists.</span></span>
<span class="line"><span style="color:#6A737D;">  	 * 如果当前存在事务，则加入；如果不存在则抛出异常</span></span>
<span class="line"><span style="color:#6A737D;">  	 */</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> PROPAGATION_MANDATORY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">  	/**</span></span>
<span class="line"><span style="color:#6A737D;">  	 * Create a new transaction, suspending the current transaction if one exists.</span></span>
<span class="line"><span style="color:#6A737D;">  	 * 如果存在事务，则暂停当前事务，创建新事务</span></span>
<span class="line"><span style="color:#6A737D;">  	 */</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> PROPAGATION_REQUIRES_NEW </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">  	/**</span></span>
<span class="line"><span style="color:#6A737D;">  	 * Do not support a current transaction; rather always execute non-transactionally.</span></span>
<span class="line"><span style="color:#6A737D;">  	 * 总是以无事务的方式运行</span></span>
<span class="line"><span style="color:#6A737D;">  	 */</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> PROPAGATION_NOT_SUPPORTED </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">  	/**</span></span>
<span class="line"><span style="color:#6A737D;">  	 * Do not support a current transaction; throw an exception if a current transaction exists.</span></span>
<span class="line"><span style="color:#6A737D;">  	 * 如果当前存在事务则抛出异常</span></span>
<span class="line"><span style="color:#6A737D;">  	 */</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> PROPAGATION_NEVER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">  	/**</span></span>
<span class="line"><span style="color:#6A737D;">  	 * Execute within a nested transaction if a current transaction exists, behaving like PROPAGATION_REQUIRED otherwise.</span></span>
<span class="line"><span style="color:#6A737D;">  	 * 如果当前存在事务，则在嵌套事务中执行，否则表现为 PROPAGATION_REQUIRED</span></span>
<span class="line"><span style="color:#6A737D;">  	 */</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> PROPAGATION_NESTED </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#6A737D;">  	/**</span></span>
<span class="line"><span style="color:#6A737D;">  	 * 是否将事务优化为只读事务，只读标志适用于任何事务隔离级别</span></span>
<span class="line"><span style="color:#6A737D;">  	 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isReadOnly</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * PlatformTransactionManager 的抽象实现类，它预先实现了定义的传播行为，并负责处理事务的同步。</span></span>
<span class="line"><span style="color:#6A737D;"> * 如果需要自定义事务管理框架，继承 AbstractPlatformTransactionManager 即可。子类只需要关心事务的开始，暂停，恢复和提交。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AbstractPlatformTransactionManager</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PlatformTransactionManager</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Serializable</span><span style="color:#E1E4E8;"> {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Spring 事务的顶层父类，用来管理 Spring 事务</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TransactionManager</span><span style="color:#24292E;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * PlatformTransactionManager 是 Spring 事务框架中最基础/重要的接口</span></span>
<span class="line"><span style="color:#6A737D;"> * The TransactionException that can be thrown by any of the PlatformTransactionManager interface’s methods is unchecked</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PlatformTransactionManager</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TransactionManager</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 此方法根据参数 TransactionDefinition 返回一个 TransactionStatus 对象</span></span>
<span class="line"><span style="color:#6A737D;">     * 返回的 TransactionStatus 可能是一个新事务或者已存在的事务（如果当前调用栈中存在事务）</span></span>
<span class="line"><span style="color:#6A737D;">     * 参数 TransactionDefinition 描述传播行为、隔离级别、超时等</span></span>
<span class="line"><span style="color:#6A737D;">     * 此方法会根据参数对事务传播行为的定义，返回一个当前处于活跃状态的事务（如果存在），或创建一个新的事务</span></span>
<span class="line"><span style="color:#6A737D;">     * 参数对事务隔离级别或者超时时间的设置，会忽略已存在的事务，只作用于新建的事务</span></span>
<span class="line"><span style="color:#6A737D;">     * 并非所有事务定义设置都会受到每个事务管理器的支持，在遇到不受支持的设置时事务管理器会抛出异常</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    TransactionStatus </span><span style="color:#6F42C1;">getTransaction</span><span style="color:#24292E;">(TransactionDefinition </span><span style="color:#E36209;">definition</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> TransactionException;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">commit</span><span style="color:#24292E;">(TransactionStatus </span><span style="color:#E36209;">status</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> TransactionException;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rollback</span><span style="color:#24292E;">(TransactionStatus </span><span style="color:#E36209;">status</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> TransactionException;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Based on the propagation behavior definitions analogous to EJB CMT attributes.</span></span>
<span class="line"><span style="color:#6A737D;"> * Note that isolation level and timeout settings will not get applied unless an actual new transaction gets started.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TransactionDefinition</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Spring 事务的隔离级别与 JDBC 定义的隔离级别对应</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ISOLATION_DEFAULT </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#6A737D;">  	/**</span></span>
<span class="line"><span style="color:#6A737D;">  	 * 脏读：读取到另一个事务修改但未提交的数据</span></span>
<span class="line"><span style="color:#6A737D;">  	 * 不可重复度：当事务 A 首先读取数据，事务 B 也读取同一个数据，并将数据修改，而后事务 A 再次读取就会得到和第一次读取不一样的结果</span></span>
<span class="line"><span style="color:#6A737D;">  	 * 幻读：一个事务读取所有满足 WHERE 条件的行，第二个事务插入一条满足 WHERE 条件的记录，第一个事务使用相同条件重新读取，在第二次读取中读取出额外的 &quot;幻影 &quot;记录</span></span>
<span class="line"><span style="color:#6A737D;">  	 */</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 读未提交</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 可读取到另一个事务修改但未提交的数据</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 存在脏读/不可重复度/幻读</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ISOLATION_READ_UNCOMMITTED </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;  </span><span style="color:#6A737D;">// same as java.sql.Connection.TRANSACTION_READ_UNCOMMITTED;</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 读已提交</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 解决脏读，存在不可重复度/幻读</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ISOLATION_READ_COMMITTED </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;  </span><span style="color:#6A737D;">// same as java.sql.Connection.TRANSACTION_READ_COMMITTED;</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 可重复度</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 解决脏读/不可重复度，存在幻读</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ISOLATION_REPEATABLE_READ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">;  </span><span style="color:#6A737D;">// same as java.sql.Connection.TRANSACTION_REPEATABLE_READ;</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 可序列化/串行化，事务串行化执行，一次只允许一个事务操作</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 解决脏读/不可重复度/幻读</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ISOLATION_SERIALIZABLE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">;  </span><span style="color:#6A737D;">// same as java.sql.Connection.TRANSACTION_SERIALIZABLE;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 以下为 Spring 事务管理支持的传播行为，一共 7 种</span></span>
<span class="line"><span style="color:#6A737D;">  	/**</span></span>
<span class="line"><span style="color:#6A737D;">  	 * Support a current transaction. Create a new one if none exists. This is typically the default setting of a transaction definition and typically defines a transaction synchronization scope.</span></span>
<span class="line"><span style="color:#6A737D;">  	 * 如果当前存在事务，则加入；如果事务不存在，则新建</span></span>
<span class="line"><span style="color:#6A737D;">  	 * 这通常是事务的默认隔离级别，通常定义事务同步范围</span></span>
<span class="line"><span style="color:#6A737D;">  	 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> PROPAGATION_REQUIRED </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  	</span></span>
<span class="line"><span style="color:#6A737D;">  	/**</span></span>
<span class="line"><span style="color:#6A737D;">  	 * Support a current transaction; execute non-transactionally if none exists.</span></span>
<span class="line"><span style="color:#6A737D;">  	 * 如果当前存在事务，则加入；如果事务不存在，则以无事务的方式运行</span></span>
<span class="line"><span style="color:#6A737D;">  	 */</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> PROPAGATION_SUPPORTS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#6A737D;">  	/**</span></span>
<span class="line"><span style="color:#6A737D;">  	 * Support a current transaction; throw an exception if no current transaction exists.</span></span>
<span class="line"><span style="color:#6A737D;">  	 * 如果当前存在事务，则加入；如果不存在则抛出异常</span></span>
<span class="line"><span style="color:#6A737D;">  	 */</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> PROPAGATION_MANDATORY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">  	/**</span></span>
<span class="line"><span style="color:#6A737D;">  	 * Create a new transaction, suspending the current transaction if one exists.</span></span>
<span class="line"><span style="color:#6A737D;">  	 * 如果存在事务，则暂停当前事务，创建新事务</span></span>
<span class="line"><span style="color:#6A737D;">  	 */</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> PROPAGATION_REQUIRES_NEW </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">  	/**</span></span>
<span class="line"><span style="color:#6A737D;">  	 * Do not support a current transaction; rather always execute non-transactionally.</span></span>
<span class="line"><span style="color:#6A737D;">  	 * 总是以无事务的方式运行</span></span>
<span class="line"><span style="color:#6A737D;">  	 */</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> PROPAGATION_NOT_SUPPORTED </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">  	/**</span></span>
<span class="line"><span style="color:#6A737D;">  	 * Do not support a current transaction; throw an exception if a current transaction exists.</span></span>
<span class="line"><span style="color:#6A737D;">  	 * 如果当前存在事务则抛出异常</span></span>
<span class="line"><span style="color:#6A737D;">  	 */</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> PROPAGATION_NEVER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">  	/**</span></span>
<span class="line"><span style="color:#6A737D;">  	 * Execute within a nested transaction if a current transaction exists, behaving like PROPAGATION_REQUIRED otherwise.</span></span>
<span class="line"><span style="color:#6A737D;">  	 * 如果当前存在事务，则在嵌套事务中执行，否则表现为 PROPAGATION_REQUIRED</span></span>
<span class="line"><span style="color:#6A737D;">  	 */</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> PROPAGATION_NESTED </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#6A737D;">  	/**</span></span>
<span class="line"><span style="color:#6A737D;">  	 * 是否将事务优化为只读事务，只读标志适用于任何事务隔离级别</span></span>
<span class="line"><span style="color:#6A737D;">  	 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isReadOnly</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * PlatformTransactionManager 的抽象实现类，它预先实现了定义的传播行为，并负责处理事务的同步。</span></span>
<span class="line"><span style="color:#6A737D;"> * 如果需要自定义事务管理框架，继承 AbstractPlatformTransactionManager 即可。子类只需要关心事务的开始，暂停，恢复和提交。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbstractPlatformTransactionManager</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PlatformTransactionManager</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Serializable</span><span style="color:#24292E;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br></div></div><h3 id="声明式事务" tabindex="-1">声明式事务 <a class="header-anchor" href="#声明式事务" aria-label="Permalink to &quot;声明式事务&quot;">​</a></h3><h4 id="开启声明式事务" tabindex="-1">开启声明式事务 <a class="header-anchor" href="#开启声明式事务" aria-label="Permalink to &quot;开启声明式事务&quot;">​</a></h4><p>Spring 的声明式事务支持需手动开启，注解驱动使用 <code>@EnableTransactionManagement</code> 标注在 Spring 配置类上，XML 开发则在配置文件加上 <code>&lt;tx:annotation-driven/&gt;</code> 。</p><blockquote><p>However <code>@EnableTransactionManagement</code> is more flexible; it will fall back to a by-type lookup for any <code>TransactionManager</code> bean in the container. Thus the name can be &quot;txManager&quot;, &quot;transactionManager&quot;, or &quot;tm&quot;: it simply does not matter.</p></blockquote><p>使用 <code>@EnableTransactionManagement</code> 相对来说更加灵活，因为它不仅可以根据名称还能根据类型将 <code>TransactionManager</code> 加载到 IOC 容器中。</p><blockquote><p><code>@EnableTransactionManagement</code> and <code>&lt;tx:annotation-driven/&gt;</code> look for <code>@Transactional</code> only on beans in the same application context in which they are defined. This means that, if you put annotation-driven configuration in a <code>WebApplicationContext</code> for a <code>DispatcherServlet</code>, it checks for <code>@Transactional</code> beans only in your controllers and not in your services.</p></blockquote><p><code>@EnableTransactionManagement</code> 和 <code>&lt;tx:annotation-driven/&gt;</code> 只会扫描和它们自己相同的应用上下文内的 <code>@Transactional</code> 注解，也就是说，如果在 <code>DispatcherServlet</code> 的 <code>WebApplicationContext</code> 中标注 <code>@EnableTransactionManagement</code>，它只会扫描和 Controller 同级别下的 <code>@Transactional</code>。</p><h4 id="transactional" tabindex="-1">@Transactional <a class="header-anchor" href="#transactional" aria-label="Permalink to &quot;@Transactional&quot;">​</a></h4><blockquote><p>When you use transactional proxies with Spring’s standard configuration, you should apply the <code>@Transactional</code> annotation only to methods with <code>public</code> visibility. If you do annotate <code>protected</code>, <code>private</code>, or package-visible methods with the <code>@Transactional</code> annotation, no error is raised, but the annotated method does not exhibit the configured transactional settings.</p></blockquote><p><code>@Transactional</code> 注解可以标注在类或者 <code>public</code> 方法上，如果标注在 <code>protected/private</code> 方法或者近包内可见的方法上不会报错，但是在这些地方 Spring 事务不会生效。</p><blockquote><p>When using <code>@EnableTransactionManagement</code> in a <code>@Configuration</code> class, <code>protected</code> or package-visible methods can also be made transactional for class-based proxies by registering a custom <code>transactionAttributeSource</code> bean.</p></blockquote><p>如果在 Spring 配置类上标注 <code>@EnableTransactionManagement</code>，可以通过注入自定义的 <code>TransactionAttributeSource</code> 来让事务可以在类中的非 <code>public</code> 方法中生效。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * enable support for protected and package-private @Transactional methods in</span></span>
<span class="line"><span style="color:#6A737D;"> * class-based proxies.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">TransactionAttributeSource </span><span style="color:#B392F0;">transactionAttributeSource</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AnnotationTransactionAttributeSource</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * enable support for protected and package-private @Transactional methods in</span></span>
<span class="line"><span style="color:#6A737D;"> * class-based proxies.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">TransactionAttributeSource </span><span style="color:#6F42C1;">transactionAttributeSource</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AnnotationTransactionAttributeSource</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>类和方法的优先级</strong></p><p><code>@Transactional</code> 注解可以同时标注在类和方法上，但是标注在方法上的优先级会比标注在类上的优先级高。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Transactional</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">readOnly</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultFooService</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FooService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Foo </span><span style="color:#B392F0;">getFoo</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">fooName</span><span style="color:#E1E4E8;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 标注在方法上的优先级大于类上</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Transactional</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">readOnly</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">propagation</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Propagation.REQUIRES_NEW)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">updateFoo</span><span style="color:#E1E4E8;">(Foo </span><span style="color:#FFAB70;">foo</span><span style="color:#E1E4E8;">) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Transactional</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">readOnly</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultFooService</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FooService</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Foo </span><span style="color:#6F42C1;">getFoo</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">fooName</span><span style="color:#24292E;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 标注在方法上的优先级大于类上</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Transactional</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">readOnly</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">propagation</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Propagation.REQUIRES_NEW)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">updateFoo</span><span style="color:#24292E;">(Foo </span><span style="color:#E36209;">foo</span><span style="color:#24292E;">) {}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><strong>属性设置</strong></p><ul><li><code>propagation</code> default <code>Propagation.REQUIRED</code></li><li><code>isolation</code> default <code>Isolation.DEFAULT</code></li><li><code>timeout</code> default <code>TransactionDefinition.TIMEOUT_DEFAULT = -1</code></li><li><code>readOnly</code> 是否是只读事务 default <code>false</code></li><li><code>rollbackFor </code> Any <code>RuntimeException</code> or <code>Error</code> triggers rollback, and any checked <code>Exception</code> does not.</li><li><code>noRollbackFor</code></li></ul><h3 id="编程式事务" tabindex="-1">编程式事务 <a class="header-anchor" href="#编程式事务" aria-label="Permalink to &quot;编程式事务&quot;">​</a></h3><blockquote><p>因为开发中用的大多都是声明式事务，编程式事务做了解即可</p></blockquote><h4 id="transactiontemplate" tabindex="-1">TransactionTemplate <a class="header-anchor" href="#transactiontemplate" aria-label="Permalink to &quot;TransactionTemplate&quot;">​</a></h4><p>类似 JdbcTemplate，由 Spring 提供的操作事务的模版方法类。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SimpleService</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Service</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// single TransactionTemplate shared amongst all methods in this instance</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> TransactionTemplate transactionTemplate;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// use constructor-injection to supply the PlatformTransactionManager</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SimpleService</span><span style="color:#E1E4E8;">(PlatformTransactionManager </span><span style="color:#FFAB70;">transactionManager</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.transactionTemplate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TransactionTemplate</span><span style="color:#E1E4E8;">(transactionManager);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// with result</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">someServiceMethod</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> transactionTemplate.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TransactionCallback</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// the code in this method runs in a transactional context</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">doInTransaction</span><span style="color:#E1E4E8;">(TransactionStatus </span><span style="color:#FFAB70;">status</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">updateOperation1</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resultOfUpdateOperation2</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// without result</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">methodWithoutResult</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        transactionTemplate.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TransactionCallbackWithoutResult</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doInTransactionWithoutResult</span><span style="color:#E1E4E8;">(TransactionStatus </span><span style="color:#FFAB70;">status</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">updateOperation1</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">updateOperation2</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#6A737D;">// with rollback</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">methodWithoutRollback</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        transactionTemplate.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TransactionCallbackWithoutResult</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doInTransactionWithoutResult</span><span style="color:#E1E4E8;">(TransactionStatus </span><span style="color:#FFAB70;">status</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">updateOperation1</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">updateOperation2</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (SomeBusinessException </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                		status.</span><span style="color:#B392F0;">setRollbackOnly</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleService</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Service</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// single TransactionTemplate shared amongst all methods in this instance</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> TransactionTemplate transactionTemplate;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// use constructor-injection to supply the PlatformTransactionManager</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleService</span><span style="color:#24292E;">(PlatformTransactionManager </span><span style="color:#E36209;">transactionManager</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.transactionTemplate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TransactionTemplate</span><span style="color:#24292E;">(transactionManager);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// with result</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">someServiceMethod</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> transactionTemplate.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TransactionCallback</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// the code in this method runs in a transactional context</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">doInTransaction</span><span style="color:#24292E;">(TransactionStatus </span><span style="color:#E36209;">status</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">updateOperation1</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resultOfUpdateOperation2</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// without result</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">methodWithoutResult</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        transactionTemplate.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TransactionCallbackWithoutResult</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doInTransactionWithoutResult</span><span style="color:#24292E;">(TransactionStatus </span><span style="color:#E36209;">status</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">updateOperation1</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">updateOperation2</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#6A737D;">// with rollback</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">methodWithoutRollback</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        transactionTemplate.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TransactionCallbackWithoutResult</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doInTransactionWithoutResult</span><span style="color:#24292E;">(TransactionStatus </span><span style="color:#E36209;">status</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">updateOperation1</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">updateOperation2</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (SomeBusinessException </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                		status.</span><span style="color:#6F42C1;">setRollbackOnly</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><h4 id="transactionmanager" tabindex="-1">TransactionManager <a class="header-anchor" href="#transactionmanager" aria-label="Permalink to &quot;TransactionManager&quot;">​</a></h4><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">DefaultTransactionDefinition def </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultTransactionDefinition</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 定义事务属性，如事务名，传播行为，隔离级别等</span></span>
<span class="line"><span style="color:#E1E4E8;">def.</span><span style="color:#B392F0;">setName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;SomeTxName&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">def.</span><span style="color:#B392F0;">setPropagationBehavior</span><span style="color:#E1E4E8;">(TransactionDefinition.PROPAGATION_REQUIRED);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">TransactionManager txManager </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JdbcTransactionManager</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">TransactionStatus status </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> txManager.</span><span style="color:#B392F0;">getTransaction</span><span style="color:#E1E4E8;">(def);</span></span>
<span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// put your business logic here</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (MyException </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    txManager.</span><span style="color:#B392F0;">rollback</span><span style="color:#E1E4E8;">(status);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> ex;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">txManager.</span><span style="color:#B392F0;">commit</span><span style="color:#E1E4E8;">(status);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">DefaultTransactionDefinition def </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultTransactionDefinition</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 定义事务属性，如事务名，传播行为，隔离级别等</span></span>
<span class="line"><span style="color:#24292E;">def.</span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;SomeTxName&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">def.</span><span style="color:#6F42C1;">setPropagationBehavior</span><span style="color:#24292E;">(TransactionDefinition.PROPAGATION_REQUIRED);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">TransactionManager txManager </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JdbcTransactionManager</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">TransactionStatus status </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> txManager.</span><span style="color:#6F42C1;">getTransaction</span><span style="color:#24292E;">(def);</span></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// put your business logic here</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (MyException </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    txManager.</span><span style="color:#6F42C1;">rollback</span><span style="color:#24292E;">(status);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> ex;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">txManager.</span><span style="color:#6F42C1;">commit</span><span style="color:#24292E;">(status);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><strong>声明式事务和编程式事务如何选择</strong></p><ul><li>如果只是在代码中进行小规模的事务操作，选择编程式，比如 <code>TransactionTemplate</code>；</li><li>如果存在大量事务操作，优先选择声明式事务，操作简单，并且还把事务逻辑和业务逻辑分离开，利于维护；</li><li>如果使用的是 Spring 框架，推荐使用声明式事务。</li></ul><br><h3 id="回滚规则" tabindex="-1">回滚规则 <a class="header-anchor" href="#回滚规则" aria-label="Permalink to &quot;回滚规则&quot;">​</a></h3><blockquote><p>In its default configuration, the Spring Framework’s transaction infrastructure code marks a transaction for rollback only in the case of runtime, unchecked exceptions. That is, when the thrown exception is an instance or subclass of <code>RuntimeException</code>. (<code>Error</code> instances also, by default, result in a rollback). Checked exceptions that are thrown from a transactional method do not result in rollback in the default configuration.</p></blockquote><p>Spring 事务只会在遇到运行时异常和未受检查异常时会滚，也就是说只有在遇到 <code>RuntimeException</code> 及其之类或者 <code>Error</code> 及其之类的时候才会回滚。事务遇到受检查异常时，不会回滚，而是将其捕获并抛出。</p><p>但仍然可以通过指定回滚规则，精确配置哪些异常类型会将事务标记为回滚，包括已检查的异常。</p><br><h3 id="事务失效" tabindex="-1">事务失效 <a class="header-anchor" href="#事务失效" aria-label="Permalink to &quot;事务失效&quot;">​</a></h3><p>1、注解 <code>@Transactional</code> 修饰的类非 Spring 容器对象；</p><p>2、用 <code>@Transactional</code> 修饰方法，且该方法被类内部方法调用；</p><p>3、注解 <code>@Transactional</code> 修饰的方法非 <code>public</code> 修饰；</p><p>4、代码中出现的异常被 catch 代码块捕获，而不是被 Spring 事务框架捕获;</p><p>5、Spring 事务 <code>rollback</code> 策略默认是 <code>RuntimeException</code> 及其子类和 <code>Error</code> 及其之类，其他情况如果未提前定义则事务失效；</p><p>6、数据库不支持事务。</p><br><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/data-access.html#transaction" target="_blank" rel="noreferrer">spring#transaction</a></p>`,100),o=[e];function r(c,t,E,y,i,b){return n(),a("div",null,o)}const F=s(p,[["render",r]]);export{m as __pageData,F as default};
