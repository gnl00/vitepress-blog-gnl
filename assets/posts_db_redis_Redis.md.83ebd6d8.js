import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.834b76fb.js";const p="/assets/image-20210528110958956.ed45dd98.png",e="/assets/image-20210810141933541.a76c4d8f.png",o="/assets/image-20210810142733895.348b6b94.png",C=JSON.parse('{"title":"Redis","description":"","frontmatter":{},"headers":[],"relativePath":"posts/db/redis/Redis.md","filePath":"posts/db/redis/Redis.md"}'),r={name:"posts/db/redis/Redis.md"},c=l(`<h1 id="redis" tabindex="-1">Redis <a class="header-anchor" href="#redis" aria-label="Permalink to &quot;Redis&quot;">​</a></h1><br><h2 id="什么是-redis" tabindex="-1">什么是 Redis <a class="header-anchor" href="#什么是-redis" aria-label="Permalink to &quot;什么是 Redis&quot;">​</a></h2><br><p><strong>Redis 是单线程的吗？</strong></p><p>Redis 是一个 Key-Value 的非关系型数据库，Redis 单线程主要是指网络 IO 和 K-V 的读写是由一个主线程来完成的。但 Redis 的其他功能，比如说持久化、异步删除、集群数据同步，其实是开启了额外的线程来完成的。</p><br><p><strong>Redis 为什么能这么快/Redis 优点</strong></p><p>1、<strong>Redis 完全基于内存</strong>，绝大部分请求是纯粹的内存操作。数据存在内存中，类似于 HashMap，优势就是查找和操作的时间复杂度是 O(1)</p><blockquote><p>以 MySQL 为例，MySQL 的数据和索引都是持久化保存在磁盘上的，因此当我们使用 SQL 语句执行一条查询命令时，如果目标数据库的索引还没被加载到内存中，首先要先把索引加载到内存，再通过若干寻址定位和磁盘 I/O，把数据对应的磁盘块加载到内存中，最后再读取数据。</p></blockquote><p>2、<strong>数据结构简单，对数据操作也简单</strong></p><p>Redis 的数据结构是有特殊设计的，比如 String 类型采用 sds 数据结构来存储。<strong>String 的空间不够时，总是尝试去申请更多的内存；String 空间多余的时候，不把多余的空间还给系统，而是会将多余的空间维护起来</strong>。通过这种方式来减少内存的申请，可以更快实现对数据的操作。<strong>有序集合 ZSet 采用的跳跃表，获取数据时可以通过不同的层次间跳跃来达到加速访问节点的效果</strong></p><p>3、<strong>Redis 的主体模式还是单线程的</strong>，避免了不必要的上下文切换和竞争条件，不存在多线程导致的 CPU 切换。不用去考虑各种锁的问题，不存在加锁释放锁操作，没有死锁问题导致的性能消耗。官方也解释到：Redis 的性能不在 CPU，而在内存。</p><blockquote><p>多线程环境中，当一个线程的状态由 Runnable 转换为非 Runnable（Blocked、Waiting、Timed_Waiting）时，相应线程的上下文信息（包括 CPU 的寄存器和程序计数器在某一时间点的内容等）需要被保存，以便相应线程稍后再次进入 Runnable 状态时能够在之前的执行进度的基础上继续前进。而一个线程从非 Runnable 状态进入 Runnable 状态可能涉及恢复之前保存的上下文信息。这个对线程的上下文进行保存和恢复的过程就被称为上下文切换</p></blockquote><p>4、使用多路复用 IO 模型，非阻塞 IO</p><p>IO 多路复用就是多个 TCP 连接复用一个线程。如果采用多个请求起多个进程或者多个线程的模式，除了要考虑到进程或者线程的切换之外，还要用户去检查事件是否到达，效率低下。Redis 支持 select、poll、epoll 模式的多路复用，默认情况下，会选择系统支持的最好的模式。通过 IO 多路复用技术，用户不用去遍历 fd set 集合。通过内核通知告诉事件的到达，效率比较高</p><p>5、[渐进式 Rehash](##渐进式 Rehash)</p><br><h2 id="常用命令" tabindex="-1"><strong>常用命令</strong> <a class="header-anchor" href="#常用命令" aria-label="Permalink to &quot;**常用命令**&quot;">​</a></h2><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 切换数据库0-15</span></span>
<span class="line"><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> dbIndex</span></span>
<span class="line"><span style="color:#6A737D;"># 遍历当前库所有键</span></span>
<span class="line"><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span></span>
<span class="line"><span style="color:#6A737D;"># 查询当前库总键数</span></span>
<span class="line"><span style="color:#B392F0;">dbsize</span></span>
<span class="line"><span style="color:#6A737D;"># 存在返回1，不存在返回0</span></span>
<span class="line"><span style="color:#B392F0;">exists</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span></span>
<span class="line"><span style="color:#6A737D;"># 删除键</span></span>
<span class="line"><span style="color:#B392F0;">del</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span></span>
<span class="line"><span style="color:#6A737D;"># flushdb只清除当前数据库，flushall清除所有数据库</span></span>
<span class="line"><span style="color:#B392F0;">flushdb</span></span>
<span class="line"><span style="color:#B392F0;">flushall</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># （不建议再生产环境中使用）把指定的键从源数据库移动到目标数据库</span></span>
<span class="line"><span style="color:#B392F0;">move</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">db</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 键数据类型</span></span>
<span class="line"><span style="color:#79B8FF;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span></span>
<span class="line"><span style="color:#6A737D;"># 键重命名，若newkey已存在，将会被覆盖</span></span>
<span class="line"><span style="color:#B392F0;">rename</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">newkey</span></span>
<span class="line"><span style="color:#6A737D;"># 只有newkey不存在时才会被覆盖</span></span>
<span class="line"><span style="color:#B392F0;">renamenx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">newkey</span></span>
<span class="line"><span style="color:#6A737D;"># 随机返回一个键</span></span>
<span class="line"><span style="color:#B392F0;">randomkey</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 当超过过期时间，会自动删除，key在seconds秒后过期</span></span>
<span class="line"><span style="color:#B392F0;">expire</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">seconds</span></span>
<span class="line"><span style="color:#6A737D;"># 键在秒级时间戳timestamp后过期</span></span>
<span class="line"><span style="color:#B392F0;">expireat</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">timestamp</span></span>
<span class="line"><span style="color:#6A737D;"># 当超过过期时间，会自动删除，key在milliseconds毫秒后过期</span></span>
<span class="line"><span style="color:#B392F0;">pexpire</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">milliseconds</span></span>
<span class="line"><span style="color:#6A737D;"># key在豪秒级时间戳timestamp后过期</span></span>
<span class="line"><span style="color:#B392F0;">pexpireat</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">milliseconds-timestamp</span></span>
<span class="line"><span style="color:#6A737D;"># 命令可以查看键hello的剩余过期时间，单位：秒（&gt;0剩余过期时间；-1没设置过期时间；-2键不存在）</span></span>
<span class="line"><span style="color:#B392F0;">ttl</span></span>
<span class="line"><span style="color:#6A737D;"># 毫秒级ttl</span></span>
<span class="line"><span style="color:#B392F0;">pttl</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 排序</span></span>
<span class="line"><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mylist</span></span>
<span class="line"><span style="color:#6A737D;"># 字母排序</span></span>
<span class="line"><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mylist</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">alpha</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">desc</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">limit</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#6A737D;"># by命令</span></span>
<span class="line"><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">list</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">by</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">it:</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">desc</span></span>
<span class="line"><span style="color:#6A737D;"># get参数</span></span>
<span class="line"><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">list</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">by</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">it:</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">desc</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">it:</span><span style="color:#79B8FF;">*</span></span>
<span class="line"><span style="color:#6A737D;"># sort命令之store参数：表示把sort查询的结果集保存起来</span></span>
<span class="line"><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">list</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">by</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">it:</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">desc</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">it:</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">store</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sorc:result</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 切换数据库0-15</span></span>
<span class="line"><span style="color:#D73A49;">select</span><span style="color:#24292E;"> dbIndex</span></span>
<span class="line"><span style="color:#6A737D;"># 遍历当前库所有键</span></span>
<span class="line"><span style="color:#6F42C1;">keys</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span></span>
<span class="line"><span style="color:#6A737D;"># 查询当前库总键数</span></span>
<span class="line"><span style="color:#6F42C1;">dbsize</span></span>
<span class="line"><span style="color:#6A737D;"># 存在返回1，不存在返回0</span></span>
<span class="line"><span style="color:#6F42C1;">exists</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span></span>
<span class="line"><span style="color:#6A737D;"># 删除键</span></span>
<span class="line"><span style="color:#6F42C1;">del</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span></span>
<span class="line"><span style="color:#6A737D;"># flushdb只清除当前数据库，flushall清除所有数据库</span></span>
<span class="line"><span style="color:#6F42C1;">flushdb</span></span>
<span class="line"><span style="color:#6F42C1;">flushall</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># （不建议再生产环境中使用）把指定的键从源数据库移动到目标数据库</span></span>
<span class="line"><span style="color:#6F42C1;">move</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">db</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 键数据类型</span></span>
<span class="line"><span style="color:#005CC5;">type</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span></span>
<span class="line"><span style="color:#6A737D;"># 键重命名，若newkey已存在，将会被覆盖</span></span>
<span class="line"><span style="color:#6F42C1;">rename</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">newkey</span></span>
<span class="line"><span style="color:#6A737D;"># 只有newkey不存在时才会被覆盖</span></span>
<span class="line"><span style="color:#6F42C1;">renamenx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">newkey</span></span>
<span class="line"><span style="color:#6A737D;"># 随机返回一个键</span></span>
<span class="line"><span style="color:#6F42C1;">randomkey</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 当超过过期时间，会自动删除，key在seconds秒后过期</span></span>
<span class="line"><span style="color:#6F42C1;">expire</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">seconds</span></span>
<span class="line"><span style="color:#6A737D;"># 键在秒级时间戳timestamp后过期</span></span>
<span class="line"><span style="color:#6F42C1;">expireat</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">timestamp</span></span>
<span class="line"><span style="color:#6A737D;"># 当超过过期时间，会自动删除，key在milliseconds毫秒后过期</span></span>
<span class="line"><span style="color:#6F42C1;">pexpire</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">milliseconds</span></span>
<span class="line"><span style="color:#6A737D;"># key在豪秒级时间戳timestamp后过期</span></span>
<span class="line"><span style="color:#6F42C1;">pexpireat</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">milliseconds-timestamp</span></span>
<span class="line"><span style="color:#6A737D;"># 命令可以查看键hello的剩余过期时间，单位：秒（&gt;0剩余过期时间；-1没设置过期时间；-2键不存在）</span></span>
<span class="line"><span style="color:#6F42C1;">ttl</span></span>
<span class="line"><span style="color:#6A737D;"># 毫秒级ttl</span></span>
<span class="line"><span style="color:#6F42C1;">pttl</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 排序</span></span>
<span class="line"><span style="color:#6F42C1;">sort</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mylist</span></span>
<span class="line"><span style="color:#6A737D;"># 字母排序</span></span>
<span class="line"><span style="color:#6F42C1;">sort</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mylist</span><span style="color:#24292E;"> </span><span style="color:#032F62;">alpha</span><span style="color:#24292E;"> </span><span style="color:#032F62;">desc</span><span style="color:#24292E;"> </span><span style="color:#032F62;">limit</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#6A737D;"># by命令</span></span>
<span class="line"><span style="color:#6F42C1;">sort</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list</span><span style="color:#24292E;"> </span><span style="color:#032F62;">by</span><span style="color:#24292E;"> </span><span style="color:#032F62;">it:</span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#032F62;">desc</span></span>
<span class="line"><span style="color:#6A737D;"># get参数</span></span>
<span class="line"><span style="color:#6F42C1;">sort</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list</span><span style="color:#24292E;"> </span><span style="color:#032F62;">by</span><span style="color:#24292E;"> </span><span style="color:#032F62;">it:</span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#032F62;">desc</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">it:</span><span style="color:#005CC5;">*</span></span>
<span class="line"><span style="color:#6A737D;"># sort命令之store参数：表示把sort查询的结果集保存起来</span></span>
<span class="line"><span style="color:#6F42C1;">sort</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list</span><span style="color:#24292E;"> </span><span style="color:#032F62;">by</span><span style="color:#24292E;"> </span><span style="color:#032F62;">it:</span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#032F62;">desc</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">it:</span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#032F62;">store</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sorc:result</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div><br><h2 id="内部结构" tabindex="-1">内部结构 <a class="header-anchor" href="#内部结构" aria-label="Permalink to &quot;内部结构&quot;">​</a></h2><blockquote><p>Redis 内部使用一个 redisObject 对象来表示所有的 key 和 value</p></blockquote><p><strong>redisObject 最主要的信息</strong></p><ul><li><p>type，表示一个 value 对象具体是何种数据类型</p></li><li><p>encoding，是不同数据类型在 Redis 内部的存储方式</p><p>type=string，表示 value 存储的是一个普通字符串， encoding 可以是 raw 或者 int</p></li></ul><p><img src="`+p+`" alt="image-20210528110958956"></p><br><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><h3 id="基本数据类型-5" tabindex="-1">基本数据类型（5） <a class="header-anchor" href="#基本数据类型-5" aria-label="Permalink to &quot;基本数据类型（5）&quot;">​</a></h3><h4 id="string" tabindex="-1">String <a class="header-anchor" href="#string" aria-label="Permalink to &quot;String&quot;">​</a></h4><blockquote><p>String 是 Redis 最基本的类型，String 类型是二进制安全的，意思是 Redis 的 String 类型可以包含任何数据，比如 jpg 图片或者序列化的对象。String 类型的值最大能存储 512M</p></blockquote><p><strong>操作</strong></p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">set</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">value</span></span>
<span class="line"><span style="color:#6A737D;"># 键必须不存在，才可以设置成功</span></span>
<span class="line"><span style="color:#B392F0;">setnx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">value</span></span>
<span class="line"><span style="color:#6A737D;"># 为键值设置秒级过期时间</span></span>
<span class="line"><span style="color:#B392F0;">setex</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">value</span></span>
<span class="line"><span style="color:#6A737D;"># 从index开始替换value</span></span>
<span class="line"><span style="color:#B392F0;">setrange</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">index</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">value</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 批量设置值</span></span>
<span class="line"><span style="color:#B392F0;">mset</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">k1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">v1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">k2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">v2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">k3</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">v3</span></span>
<span class="line"><span style="color:#B392F0;">mget</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">k1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">k2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">k3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># key计数增</span></span>
<span class="line"><span style="color:#B392F0;">incr</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span></span>
<span class="line"><span style="color:#6A737D;"># key计数增，每次增increment</span></span>
<span class="line"><span style="color:#B392F0;">incr</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">by</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">increment</span></span>
<span class="line"><span style="color:#6A737D;"># key计数减</span></span>
<span class="line"><span style="color:#B392F0;">decr</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span></span>
<span class="line"><span style="color:#B392F0;">decr</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">by</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">increment</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 追加值，向key中的value字符串尾部追加值</span></span>
<span class="line"><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 字符串长度，每个汉字占用3个字字节</span></span>
<span class="line"><span style="color:#B392F0;">strlen</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 设置并返回原值</span></span>
<span class="line"><span style="color:#B392F0;">getset</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 获取部分字符串，start和end分别为开始和结束的偏移量，偏移量从0开始</span></span>
<span class="line"><span style="color:#B392F0;">getrange</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">start</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">end</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 设置指定位置的字符，offeset是字符串下标</span></span>
<span class="line"><span style="color:#B392F0;">setrange</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">offeset</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">value</span></span>
<span class="line"><span style="color:#B392F0;">127.0.0.1:6379&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">set</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">aaa</span></span>
<span class="line"><span style="color:#B392F0;">OK</span></span>
<span class="line"><span style="color:#B392F0;">127.0.0.1:6379&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span></span>
<span class="line"><span style="color:#B392F0;">&quot;aaa&quot;</span></span>
<span class="line"><span style="color:#B392F0;">127.0.0.1:6379&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">setrange</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">b</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">integer</span><span style="color:#E1E4E8;">) 3</span></span>
<span class="line"><span style="color:#B392F0;">127.0.0.1:6379&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span></span>
<span class="line"><span style="color:#B392F0;">&quot;baa&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">set</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">value</span></span>
<span class="line"><span style="color:#6A737D;"># 键必须不存在，才可以设置成功</span></span>
<span class="line"><span style="color:#6F42C1;">setnx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">value</span></span>
<span class="line"><span style="color:#6A737D;"># 为键值设置秒级过期时间</span></span>
<span class="line"><span style="color:#6F42C1;">setex</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">value</span></span>
<span class="line"><span style="color:#6A737D;"># 从index开始替换value</span></span>
<span class="line"><span style="color:#6F42C1;">setrange</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">index</span><span style="color:#24292E;"> </span><span style="color:#032F62;">value</span><span style="color:#24292E;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 批量设置值</span></span>
<span class="line"><span style="color:#6F42C1;">mset</span><span style="color:#24292E;"> </span><span style="color:#032F62;">k1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">v1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">k2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">v2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">k3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">v3</span></span>
<span class="line"><span style="color:#6F42C1;">mget</span><span style="color:#24292E;"> </span><span style="color:#032F62;">k1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">k2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">k3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># key计数增</span></span>
<span class="line"><span style="color:#6F42C1;">incr</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span></span>
<span class="line"><span style="color:#6A737D;"># key计数增，每次增increment</span></span>
<span class="line"><span style="color:#6F42C1;">incr</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">by</span><span style="color:#24292E;"> </span><span style="color:#032F62;">increment</span></span>
<span class="line"><span style="color:#6A737D;"># key计数减</span></span>
<span class="line"><span style="color:#6F42C1;">decr</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span></span>
<span class="line"><span style="color:#6F42C1;">decr</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">by</span><span style="color:#24292E;"> </span><span style="color:#032F62;">increment</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 追加值，向key中的value字符串尾部追加值</span></span>
<span class="line"><span style="color:#6F42C1;">append</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 字符串长度，每个汉字占用3个字字节</span></span>
<span class="line"><span style="color:#6F42C1;">strlen</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 设置并返回原值</span></span>
<span class="line"><span style="color:#6F42C1;">getset</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 获取部分字符串，start和end分别为开始和结束的偏移量，偏移量从0开始</span></span>
<span class="line"><span style="color:#6F42C1;">getrange</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">start</span><span style="color:#24292E;"> </span><span style="color:#032F62;">end</span><span style="color:#24292E;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 设置指定位置的字符，offeset是字符串下标</span></span>
<span class="line"><span style="color:#6F42C1;">setrange</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">offeset</span><span style="color:#24292E;"> </span><span style="color:#032F62;">value</span></span>
<span class="line"><span style="color:#6F42C1;">127.0.0.1:6379&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">set</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">aaa</span></span>
<span class="line"><span style="color:#6F42C1;">OK</span></span>
<span class="line"><span style="color:#6F42C1;">127.0.0.1:6379&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span></span>
<span class="line"><span style="color:#6F42C1;">&quot;aaa&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">127.0.0.1:6379&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">setrange</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#032F62;">b</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">integer</span><span style="color:#24292E;">) 3</span></span>
<span class="line"><span style="color:#6F42C1;">127.0.0.1:6379&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span></span>
<span class="line"><span style="color:#6F42C1;">&quot;baa&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><p><strong>String key设置约定</strong></p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 中间不能用空格来隔开</span></span>
<span class="line"><span style="color:#B392F0;">表名:主键名:主键值:字段名</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">字段值</span></span>
<span class="line"><span style="color:#B392F0;">user:id:1001:name</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">aaa</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 中间不能用空格来隔开</span></span>
<span class="line"><span style="color:#6F42C1;">表名:主键名:主键值:字段名</span><span style="color:#24292E;"> </span><span style="color:#032F62;">字段值</span></span>
<span class="line"><span style="color:#6F42C1;">user:id:1001:name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">aaa</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="list" tabindex="-1">List <a class="header-anchor" href="#list" aria-label="Permalink to &quot;List&quot;">​</a></h4><blockquote><p>List 列表是简单的字符串列表，按照插入顺序排序。可以添加一个元素到列表的头部（左边）或者尾部（右边）</p></blockquote><p><strong>数据结构</strong></p><p>List 就是链表，可以用来当消息队列用</p><p><strong>实现方式</strong></p><p>Redis List 的是实现是一个双向链表，既可以支持反向查找和遍历，更方便操作，不过带来了额外的内存开销</p><p><strong>操作</strong></p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#添加</span></span>
<span class="line"><span style="color:#6A737D;"># 从右边插入元素</span></span>
<span class="line"><span style="color:#B392F0;">rpush</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">lists</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">elements[elements</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.]</span></span>
<span class="line"><span style="color:#B392F0;">rpush</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">lists</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">b</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">c</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">d</span></span>
<span class="line"><span style="color:#6A737D;"># 从左边插入元素</span></span>
<span class="line"><span style="color:#B392F0;">lpush</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">lists</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">elements[elements</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.]</span></span>
<span class="line"><span style="color:#6A737D;"># 向某个元素前或者后插入元素</span></span>
<span class="line"><span style="color:#B392F0;">linsert</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">lists</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">BEFORE</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">AFTER</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">element</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">127.0.0.1:6379[1]&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linsert</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">list</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">before</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">z</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">integer</span><span style="color:#E1E4E8;">) 5</span></span>
<span class="line"><span style="color:#B392F0;">127.0.0.1:6379[1]&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">lrange</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">list</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-1</span></span>
<span class="line"><span style="color:#B392F0;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">&quot;z&quot;</span></span>
<span class="line"><span style="color:#B392F0;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">&quot;a&quot;</span></span>
<span class="line"><span style="color:#B392F0;">3</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">&quot;b&quot;</span></span>
<span class="line"><span style="color:#B392F0;">4</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">&quot;c&quot;</span></span>
<span class="line"><span style="color:#B392F0;">5</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">&quot;d&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 遍历</span></span>
<span class="line"><span style="color:#6A737D;"># 获取指定范围内的元素列表</span></span>
<span class="line"><span style="color:#B392F0;">lrange</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-1</span></span>
<span class="line"><span style="color:#6A737D;"># 获取列表指定下标的元素</span></span>
<span class="line"><span style="color:#B392F0;">lindex</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#6A737D;"># 获取列表长度</span></span>
<span class="line"><span style="color:#B392F0;">llen</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 删除</span></span>
<span class="line"><span style="color:#6A737D;"># 从列表左侧弹出元素</span></span>
<span class="line"><span style="color:#B392F0;">lpop</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span></span>
<span class="line"><span style="color:#6A737D;"># 从列表右侧弹出元素</span></span>
<span class="line"><span style="color:#B392F0;">rpop</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span></span>
<span class="line"><span style="color:#6A737D;"># 删除count个指定元素value，若是指定元素个数小于count，则全部删除</span></span>
<span class="line"><span style="color:#B392F0;">lrem</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">count</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 修改</span></span>
<span class="line"><span style="color:#6A737D;"># 修改指定索引下标的元素</span></span>
<span class="line"><span style="color:#B392F0;">lset</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">index</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">newValue</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#添加</span></span>
<span class="line"><span style="color:#6A737D;"># 从右边插入元素</span></span>
<span class="line"><span style="color:#6F42C1;">rpush</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lists</span><span style="color:#24292E;"> </span><span style="color:#032F62;">elements[elements</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.]</span></span>
<span class="line"><span style="color:#6F42C1;">rpush</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lists</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">b</span><span style="color:#24292E;"> </span><span style="color:#032F62;">c</span><span style="color:#24292E;"> </span><span style="color:#032F62;">d</span></span>
<span class="line"><span style="color:#6A737D;"># 从左边插入元素</span></span>
<span class="line"><span style="color:#6F42C1;">lpush</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lists</span><span style="color:#24292E;"> </span><span style="color:#032F62;">elements[elements</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.]</span></span>
<span class="line"><span style="color:#6A737D;"># 向某个元素前或者后插入元素</span></span>
<span class="line"><span style="color:#6F42C1;">linsert</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lists</span><span style="color:#24292E;"> </span><span style="color:#032F62;">BEFORE</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">AFTER</span><span style="color:#24292E;"> </span><span style="color:#032F62;">element</span><span style="color:#24292E;"> </span><span style="color:#032F62;">value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">127.0.0.1:6379[1]&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linsert</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list</span><span style="color:#24292E;"> </span><span style="color:#032F62;">before</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">z</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">integer</span><span style="color:#24292E;">) 5</span></span>
<span class="line"><span style="color:#6F42C1;">127.0.0.1:6379[1]&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lrange</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-1</span></span>
<span class="line"><span style="color:#6F42C1;">1</span><span style="color:#24292E;">) </span><span style="color:#032F62;">&quot;z&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">2</span><span style="color:#24292E;">) </span><span style="color:#032F62;">&quot;a&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">3</span><span style="color:#24292E;">) </span><span style="color:#032F62;">&quot;b&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">4</span><span style="color:#24292E;">) </span><span style="color:#032F62;">&quot;c&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">5</span><span style="color:#24292E;">) </span><span style="color:#032F62;">&quot;d&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 遍历</span></span>
<span class="line"><span style="color:#6A737D;"># 获取指定范围内的元素列表</span></span>
<span class="line"><span style="color:#6F42C1;">lrange</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-1</span></span>
<span class="line"><span style="color:#6A737D;"># 获取列表指定下标的元素</span></span>
<span class="line"><span style="color:#6F42C1;">lindex</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#6A737D;"># 获取列表长度</span></span>
<span class="line"><span style="color:#6F42C1;">llen</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 删除</span></span>
<span class="line"><span style="color:#6A737D;"># 从列表左侧弹出元素</span></span>
<span class="line"><span style="color:#6F42C1;">lpop</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span></span>
<span class="line"><span style="color:#6A737D;"># 从列表右侧弹出元素</span></span>
<span class="line"><span style="color:#6F42C1;">rpop</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span></span>
<span class="line"><span style="color:#6A737D;"># 删除count个指定元素value，若是指定元素个数小于count，则全部删除</span></span>
<span class="line"><span style="color:#6F42C1;">lrem</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">count</span><span style="color:#24292E;"> </span><span style="color:#032F62;">value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 修改</span></span>
<span class="line"><span style="color:#6A737D;"># 修改指定索引下标的元素</span></span>
<span class="line"><span style="color:#6F42C1;">lset</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">index</span><span style="color:#24292E;"> </span><span style="color:#032F62;">newValue</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><h4 id="hash" tabindex="-1">Hash <a class="header-anchor" href="#hash" aria-label="Permalink to &quot;Hash&quot;">​</a></h4><blockquote><p>Hash是一个键值（key-value）的集合。Redis 的 Hash 是一个 String 的 Key 和 Value 的映射表，Hash 适合存储对象</p></blockquote><p><strong>操作</strong></p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 设置值</span></span>
<span class="line"><span style="color:#B392F0;">hset</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">field</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">value</span></span>
<span class="line"><span style="color:#B392F0;">hsetnx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">filed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">value</span></span>
<span class="line"><span style="color:#6A737D;"># 批量设置值</span></span>
<span class="line"><span style="color:#B392F0;">Hmset</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">field</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">value</span><span style="color:#E1E4E8;"> [field </span><span style="color:#9ECBFF;">value]</span></span>
<span class="line"><span style="color:#6A737D;"># 判断field是否存在</span></span>
<span class="line"><span style="color:#B392F0;">hexists</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">field</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 获取值</span></span>
<span class="line"><span style="color:#B392F0;">hget</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">field</span></span>
<span class="line"><span style="color:#6A737D;"># 批量获取值</span></span>
<span class="line"><span style="color:#B392F0;">Hmget</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">field</span><span style="color:#E1E4E8;"> [field </span><span style="color:#9ECBFF;">......]</span></span>
<span class="line"><span style="color:#6A737D;"># 计算field的个数</span></span>
<span class="line"><span style="color:#B392F0;">hlen</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span></span>
<span class="line"><span style="color:#6A737D;"># 计算value字符串的长度</span></span>
<span class="line"><span style="color:#B392F0;">hstrlen</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">field</span></span>
<span class="line"><span style="color:#6A737D;"># 获取所有field</span></span>
<span class="line"><span style="color:#B392F0;">hkeys</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span></span>
<span class="line"><span style="color:#6A737D;"># 获取所有value</span></span>
<span class="line"><span style="color:#B392F0;">hvals</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span></span>
<span class="line"><span style="color:#6A737D;"># 获取所有的field、value</span></span>
<span class="line"><span style="color:#B392F0;">hgetall</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span></span>
<span class="line"><span style="color:#6A737D;"># hincrby hincrbyfloat 作用域是field</span></span>
<span class="line"><span style="color:#B392F0;">hincrby</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">field</span></span>
<span class="line"><span style="color:#B392F0;">hincrbyfloat</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">field</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">127.0.0.1:6379[2]&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hset</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">user:1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">aaa</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">age</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">18</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">integer</span><span style="color:#E1E4E8;">) 2</span></span>
<span class="line"><span style="color:#B392F0;">127.0.0.1:6379[2]&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hget</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">user:1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">name</span></span>
<span class="line"><span style="color:#B392F0;">&quot;aaa&quot;</span></span>
<span class="line"><span style="color:#B392F0;">127.0.0.1:6379[2]&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hget</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">user:1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">age</span></span>
<span class="line"><span style="color:#B392F0;">&quot;18&quot;</span></span>
<span class="line"><span style="color:#B392F0;">127.0.0.1:6379[2]&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hget</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">user:1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">password</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">nil</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 删除field，会删除一个或多个field，返回结果为成功删除fiel的个数</span></span>
<span class="line"><span style="color:#B392F0;">hdel</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">field</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 设置值</span></span>
<span class="line"><span style="color:#6F42C1;">hset</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">field</span><span style="color:#24292E;"> </span><span style="color:#032F62;">value</span></span>
<span class="line"><span style="color:#6F42C1;">hsetnx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">filed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">value</span></span>
<span class="line"><span style="color:#6A737D;"># 批量设置值</span></span>
<span class="line"><span style="color:#6F42C1;">Hmset</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">field</span><span style="color:#24292E;"> </span><span style="color:#032F62;">value</span><span style="color:#24292E;"> [field </span><span style="color:#032F62;">value]</span></span>
<span class="line"><span style="color:#6A737D;"># 判断field是否存在</span></span>
<span class="line"><span style="color:#6F42C1;">hexists</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">field</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 获取值</span></span>
<span class="line"><span style="color:#6F42C1;">hget</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">field</span></span>
<span class="line"><span style="color:#6A737D;"># 批量获取值</span></span>
<span class="line"><span style="color:#6F42C1;">Hmget</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">field</span><span style="color:#24292E;"> [field </span><span style="color:#032F62;">......]</span></span>
<span class="line"><span style="color:#6A737D;"># 计算field的个数</span></span>
<span class="line"><span style="color:#6F42C1;">hlen</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span></span>
<span class="line"><span style="color:#6A737D;"># 计算value字符串的长度</span></span>
<span class="line"><span style="color:#6F42C1;">hstrlen</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">field</span></span>
<span class="line"><span style="color:#6A737D;"># 获取所有field</span></span>
<span class="line"><span style="color:#6F42C1;">hkeys</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span></span>
<span class="line"><span style="color:#6A737D;"># 获取所有value</span></span>
<span class="line"><span style="color:#6F42C1;">hvals</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span></span>
<span class="line"><span style="color:#6A737D;"># 获取所有的field、value</span></span>
<span class="line"><span style="color:#6F42C1;">hgetall</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span></span>
<span class="line"><span style="color:#6A737D;"># hincrby hincrbyfloat 作用域是field</span></span>
<span class="line"><span style="color:#6F42C1;">hincrby</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">field</span></span>
<span class="line"><span style="color:#6F42C1;">hincrbyfloat</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">field</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">127.0.0.1:6379[2]&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hset</span><span style="color:#24292E;"> </span><span style="color:#032F62;">user:1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">aaa</span><span style="color:#24292E;"> </span><span style="color:#032F62;">age</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">18</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">integer</span><span style="color:#24292E;">) 2</span></span>
<span class="line"><span style="color:#6F42C1;">127.0.0.1:6379[2]&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hget</span><span style="color:#24292E;"> </span><span style="color:#032F62;">user:1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">name</span></span>
<span class="line"><span style="color:#6F42C1;">&quot;aaa&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">127.0.0.1:6379[2]&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hget</span><span style="color:#24292E;"> </span><span style="color:#032F62;">user:1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">age</span></span>
<span class="line"><span style="color:#6F42C1;">&quot;18&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">127.0.0.1:6379[2]&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hget</span><span style="color:#24292E;"> </span><span style="color:#032F62;">user:1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">password</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">nil</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 删除field，会删除一个或多个field，返回结果为成功删除fiel的个数</span></span>
<span class="line"><span style="color:#6F42C1;">hdel</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">field</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><h4 id="set" tabindex="-1">Set <a class="header-anchor" href="#set" aria-label="Permalink to &quot;Set&quot;">​</a></h4><blockquote><p>Set 是 String 类型的无序集合。集合是通过 hashtable 实现的。Set 中的元素是没有顺序的，而且是没有重复的</p></blockquote><p><strong>操作</strong></p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 添加</span></span>
<span class="line"><span style="color:#6A737D;"># 返回结果为添加成功的元素个数</span></span>
<span class="line"><span style="color:#B392F0;">sadd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">element</span><span style="color:#E1E4E8;"> [element </span><span style="color:#9ECBFF;">.....]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 获取</span></span>
<span class="line"><span style="color:#B392F0;">smembers</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span></span>
<span class="line"><span style="color:#6A737D;"># 获取set中元素个数</span></span>
<span class="line"><span style="color:#B392F0;">scard</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span></span>
<span class="line"><span style="color:#6A737D;"># 判断元素是否存在set中，存在返回1，否则返回0 </span></span>
<span class="line"><span style="color:#B392F0;">sismember</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">element</span></span>
<span class="line"><span style="color:#6A737D;"># 随机从集合返回指定个数元素，count可以省略，默认是1</span></span>
<span class="line"><span style="color:#B392F0;">srandmember</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> [count]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 删除</span></span>
<span class="line"><span style="color:#6A737D;"># 返回结果为删除成功的元素个数</span></span>
<span class="line"><span style="color:#B392F0;">srem</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">element</span><span style="color:#E1E4E8;"> [element </span><span style="color:#9ECBFF;">.....]</span></span>
<span class="line"><span style="color:#6A737D;"># 从set中随机pop元素，count可以省略，默认1</span></span>
<span class="line"><span style="color:#B392F0;">spop</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> [count]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># set集合间的操作</span></span>
<span class="line"><span style="color:#6A737D;"># 交集</span></span>
<span class="line"><span style="color:#B392F0;">sinter</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> [key </span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.]</span></span>
<span class="line"><span style="color:#6A737D;"># 并集</span></span>
<span class="line"><span style="color:#B392F0;">sunion</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> [key </span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.]</span></span>
<span class="line"><span style="color:#6A737D;"># 差集</span></span>
<span class="line"><span style="color:#B392F0;">sdiff</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> [key </span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 将交集、并集、差集的结果保存，destination：保存到的目的地</span></span>
<span class="line"><span style="color:#B392F0;">sinterstore</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">destination</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> [ </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">......]</span></span>
<span class="line"><span style="color:#B392F0;">sunionstore</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">destination</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> [ </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">......]</span></span>
<span class="line"><span style="color:#B392F0;">sdiffstore</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">destination</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> [ </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">......]</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 添加</span></span>
<span class="line"><span style="color:#6A737D;"># 返回结果为添加成功的元素个数</span></span>
<span class="line"><span style="color:#6F42C1;">sadd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">element</span><span style="color:#24292E;"> [element </span><span style="color:#032F62;">.....]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 获取</span></span>
<span class="line"><span style="color:#6F42C1;">smembers</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span></span>
<span class="line"><span style="color:#6A737D;"># 获取set中元素个数</span></span>
<span class="line"><span style="color:#6F42C1;">scard</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span></span>
<span class="line"><span style="color:#6A737D;"># 判断元素是否存在set中，存在返回1，否则返回0 </span></span>
<span class="line"><span style="color:#6F42C1;">sismember</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">element</span></span>
<span class="line"><span style="color:#6A737D;"># 随机从集合返回指定个数元素，count可以省略，默认是1</span></span>
<span class="line"><span style="color:#6F42C1;">srandmember</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> [count]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 删除</span></span>
<span class="line"><span style="color:#6A737D;"># 返回结果为删除成功的元素个数</span></span>
<span class="line"><span style="color:#6F42C1;">srem</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">element</span><span style="color:#24292E;"> [element </span><span style="color:#032F62;">.....]</span></span>
<span class="line"><span style="color:#6A737D;"># 从set中随机pop元素，count可以省略，默认1</span></span>
<span class="line"><span style="color:#6F42C1;">spop</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> [count]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># set集合间的操作</span></span>
<span class="line"><span style="color:#6A737D;"># 交集</span></span>
<span class="line"><span style="color:#6F42C1;">sinter</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> [key </span><span style="color:#032F62;">.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.]</span></span>
<span class="line"><span style="color:#6A737D;"># 并集</span></span>
<span class="line"><span style="color:#6F42C1;">sunion</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> [key </span><span style="color:#032F62;">.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.]</span></span>
<span class="line"><span style="color:#6A737D;"># 差集</span></span>
<span class="line"><span style="color:#6F42C1;">sdiff</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> [key </span><span style="color:#032F62;">.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 将交集、并集、差集的结果保存，destination：保存到的目的地</span></span>
<span class="line"><span style="color:#6F42C1;">sinterstore</span><span style="color:#24292E;"> </span><span style="color:#032F62;">destination</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> [ </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">......]</span></span>
<span class="line"><span style="color:#6F42C1;">sunionstore</span><span style="color:#24292E;"> </span><span style="color:#032F62;">destination</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> [ </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">......]</span></span>
<span class="line"><span style="color:#6F42C1;">sdiffstore</span><span style="color:#24292E;"> </span><span style="color:#032F62;">destination</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> [ </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">......]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h4 id="zset" tabindex="-1">ZSet <a class="header-anchor" href="#zset" aria-label="Permalink to &quot;ZSet&quot;">​</a></h4><blockquote><p>ZSet 和 Set 一样是 String 类型元素的集合，且是插入有序的，即自动排序。和 Set 相比，ZSet（Sorted Set）关联了一个 Double 类型权重的参数 Score，使得集合中的元素能够按照 Score 进行有序排列，Redis 正是通过分数来为集合中的成员进行从小到大的排序</p></blockquote><p><strong>实现方式</strong></p><p>Redis ZSet 的<strong>内部使用 HashMap 和跳跃表（SkipList）来保证数据的存储和有序</strong>，HashMap 里放的是成员到 Score 的映射。而跳跃表里存放的是所有的成员，排序依据是 HashMap 里存的 Score，使用跳跃表的结构可以获得比较高的查找效率，并且在实现上比较简单</p><p><strong>操作</strong></p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 添加</span></span>
<span class="line"><span style="color:#6A737D;"># Add one or more members to a sorted set, or update its score if it already exists</span></span>
<span class="line"><span style="color:#B392F0;">zadd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> [NX</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">XX]</span><span style="color:#E1E4E8;"> [GT</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">LT]</span><span style="color:#E1E4E8;"> [CH] [INCR] score member [score member ...]</span></span>
<span class="line"><span style="color:#B392F0;">zadd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">score</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">member</span><span style="color:#E1E4E8;"> [score </span><span style="color:#9ECBFF;">member</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">...]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 增加成员的分数</span></span>
<span class="line"><span style="color:#B392F0;">zincrby</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">increment</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">member</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 返回指定排名范围的成员</span></span>
<span class="line"><span style="color:#6A737D;"># 从低分到高分</span></span>
<span class="line"><span style="color:#B392F0;">zrange</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">start</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">end</span><span style="color:#E1E4E8;"> [withscores]</span></span>
<span class="line"><span style="color:#6A737D;"># 从高分到低分</span></span>
<span class="line"><span style="color:#B392F0;">zrevrange</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">start</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">end</span><span style="color:#E1E4E8;"> [withscores] </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 返回指定分数范围的成员</span></span>
<span class="line"><span style="color:#6A737D;"># 按照分数从低分到高分</span></span>
<span class="line"><span style="color:#B392F0;">zrange</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">min</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">max</span><span style="color:#E1E4E8;"> [withscores] [limit offset count ]</span></span>
<span class="line"><span style="color:#6A737D;"># 按照分数从高分到低分</span></span>
<span class="line"><span style="color:#B392F0;">zrevrange</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">max</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">min</span><span style="color:#E1E4E8;"> [withscores] [limit offset count ]</span></span>
<span class="line"><span style="color:#6A737D;"># 返回指定分数范围的成员个数</span></span>
<span class="line"><span style="color:#B392F0;">zcount</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">min</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">max</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 计算成员个数</span></span>
<span class="line"><span style="color:#B392F0;">zcard</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span></span>
<span class="line"><span style="color:#6A737D;"># 计算某个成员分数</span></span>
<span class="line"><span style="color:#B392F0;">zsore</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">member</span></span>
<span class="line"><span style="color:#6A737D;"># 从0开始计算成员的排名</span></span>
<span class="line"><span style="color:#B392F0;">zrank</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">member</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 删除</span></span>
<span class="line"><span style="color:#6A737D;"># 删除成员</span></span>
<span class="line"><span style="color:#B392F0;">zrem</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">member</span><span style="color:#E1E4E8;"> [member </span><span style="color:#9ECBFF;">.......]</span></span>
<span class="line"><span style="color:#6A737D;"># 删除指定排名内的升序元素</span></span>
<span class="line"><span style="color:#B392F0;">zremrangebyrank</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">start</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">end</span></span>
<span class="line"><span style="color:#6A737D;"># 删除指定分数范围的成员</span></span>
<span class="line"><span style="color:#B392F0;">zremrangebystore</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">min</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">max</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># zset集合操作</span></span>
<span class="line"><span style="color:#6A737D;"># 交集</span></span>
<span class="line"><span style="color:#B392F0;">zinter</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> [key </span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.]</span></span>
<span class="line"><span style="color:#6A737D;"># 并集</span></span>
<span class="line"><span style="color:#B392F0;">zunion</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> [key </span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.]</span></span>
<span class="line"><span style="color:#6A737D;"># 差集</span></span>
<span class="line"><span style="color:#B392F0;">zdiff</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> [key </span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 将交集、并集、差集的结果保存，destination：保存到的目的地</span></span>
<span class="line"><span style="color:#B392F0;">zinterstore</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">destination</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> [ </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">......]</span></span>
<span class="line"><span style="color:#B392F0;">zunionstore</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">destination</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> [ </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">......]</span></span>
<span class="line"><span style="color:#B392F0;">zdiffstore</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">destination</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> [ </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">......]</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 添加</span></span>
<span class="line"><span style="color:#6A737D;"># Add one or more members to a sorted set, or update its score if it already exists</span></span>
<span class="line"><span style="color:#6F42C1;">zadd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> [NX</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">XX]</span><span style="color:#24292E;"> [GT</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">LT]</span><span style="color:#24292E;"> [CH] [INCR] score member [score member ...]</span></span>
<span class="line"><span style="color:#6F42C1;">zadd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">score</span><span style="color:#24292E;"> </span><span style="color:#032F62;">member</span><span style="color:#24292E;"> [score </span><span style="color:#032F62;">member</span><span style="color:#24292E;"> </span><span style="color:#032F62;">...]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 增加成员的分数</span></span>
<span class="line"><span style="color:#6F42C1;">zincrby</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">increment</span><span style="color:#24292E;"> </span><span style="color:#032F62;">member</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 返回指定排名范围的成员</span></span>
<span class="line"><span style="color:#6A737D;"># 从低分到高分</span></span>
<span class="line"><span style="color:#6F42C1;">zrange</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">start</span><span style="color:#24292E;"> </span><span style="color:#032F62;">end</span><span style="color:#24292E;"> [withscores]</span></span>
<span class="line"><span style="color:#6A737D;"># 从高分到低分</span></span>
<span class="line"><span style="color:#6F42C1;">zrevrange</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">start</span><span style="color:#24292E;"> </span><span style="color:#032F62;">end</span><span style="color:#24292E;"> [withscores] </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 返回指定分数范围的成员</span></span>
<span class="line"><span style="color:#6A737D;"># 按照分数从低分到高分</span></span>
<span class="line"><span style="color:#6F42C1;">zrange</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">min</span><span style="color:#24292E;"> </span><span style="color:#032F62;">max</span><span style="color:#24292E;"> [withscores] [limit offset count ]</span></span>
<span class="line"><span style="color:#6A737D;"># 按照分数从高分到低分</span></span>
<span class="line"><span style="color:#6F42C1;">zrevrange</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">max</span><span style="color:#24292E;"> </span><span style="color:#032F62;">min</span><span style="color:#24292E;"> [withscores] [limit offset count ]</span></span>
<span class="line"><span style="color:#6A737D;"># 返回指定分数范围的成员个数</span></span>
<span class="line"><span style="color:#6F42C1;">zcount</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">min</span><span style="color:#24292E;"> </span><span style="color:#032F62;">max</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 计算成员个数</span></span>
<span class="line"><span style="color:#6F42C1;">zcard</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span></span>
<span class="line"><span style="color:#6A737D;"># 计算某个成员分数</span></span>
<span class="line"><span style="color:#6F42C1;">zsore</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">member</span></span>
<span class="line"><span style="color:#6A737D;"># 从0开始计算成员的排名</span></span>
<span class="line"><span style="color:#6F42C1;">zrank</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">member</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 删除</span></span>
<span class="line"><span style="color:#6A737D;"># 删除成员</span></span>
<span class="line"><span style="color:#6F42C1;">zrem</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">member</span><span style="color:#24292E;"> [member </span><span style="color:#032F62;">.......]</span></span>
<span class="line"><span style="color:#6A737D;"># 删除指定排名内的升序元素</span></span>
<span class="line"><span style="color:#6F42C1;">zremrangebyrank</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">start</span><span style="color:#24292E;"> </span><span style="color:#032F62;">end</span></span>
<span class="line"><span style="color:#6A737D;"># 删除指定分数范围的成员</span></span>
<span class="line"><span style="color:#6F42C1;">zremrangebystore</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">min</span><span style="color:#24292E;"> </span><span style="color:#032F62;">max</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># zset集合操作</span></span>
<span class="line"><span style="color:#6A737D;"># 交集</span></span>
<span class="line"><span style="color:#6F42C1;">zinter</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> [key </span><span style="color:#032F62;">.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.]</span></span>
<span class="line"><span style="color:#6A737D;"># 并集</span></span>
<span class="line"><span style="color:#6F42C1;">zunion</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> [key </span><span style="color:#032F62;">.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.]</span></span>
<span class="line"><span style="color:#6A737D;"># 差集</span></span>
<span class="line"><span style="color:#6F42C1;">zdiff</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> [key </span><span style="color:#032F62;">.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 将交集、并集、差集的结果保存，destination：保存到的目的地</span></span>
<span class="line"><span style="color:#6F42C1;">zinterstore</span><span style="color:#24292E;"> </span><span style="color:#032F62;">destination</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> [ </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">......]</span></span>
<span class="line"><span style="color:#6F42C1;">zunionstore</span><span style="color:#24292E;"> </span><span style="color:#032F62;">destination</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> [ </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">......]</span></span>
<span class="line"><span style="color:#6F42C1;">zdiffstore</span><span style="color:#24292E;"> </span><span style="color:#032F62;">destination</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> [ </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">......]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div><p><strong>跳跃表</strong></p><blockquote><p>Redis 的 <strong>ZSet</strong> 是个复合结构, 是由一个 <strong>哈希表</strong> 和 <strong>SkipList</strong> 组成的。其中 hash 用来保存 value 和 score 对应关系，skiplist 用来给 score 排序</p></blockquote><p><strong>SkipList 跳跃表</strong></p><p>Zset 需要高效的插入和删除，数组插入删除的时间复杂度为 O(n)，所以底层不适合使用数组实现。需要使用链表，链表的插入删除的时间复杂度为O(1)。当插入新元素时需要根据 score 插入到链表合适的位置，保证链表的有序性， 高效的办法是通过<strong>二分查找</strong>去找到插入点</p><blockquote><p>那么问题就来了，二分查找的对象必须是有序数组，只有数组支持快速定位，链表做不到该怎么办呢?</p></blockquote><p>这就需要<strong>跳跃表</strong>了</p><p>详情先看参考链接，后续再加上总结</p><blockquote><p>关于排序问题，我们也很容易就想到 <strong>红黑树/ 平衡树</strong> 这样的树形结构，为什么 Redis 不使用这样一些结构呢？</p></blockquote><ol><li><strong>性能考虑：</strong> 在高并发的情况下，树形结构需要执行一些类似于 rebalance 这样的可能涉及整棵树的操作，相对来说跳跃表的变化只涉及局部</li><li><strong>实现考虑：</strong> 在复杂度与红黑树相同的情况下，跳跃表实现起来更简单，看起来也更加直观</li></ol><h3 id="特殊数据类型-3" tabindex="-1">特殊数据类型（3） <a class="header-anchor" href="#特殊数据类型-3" aria-label="Permalink to &quot;特殊数据类型（3）&quot;">​</a></h3><h4 id="geospatial" tabindex="-1">Geospatial <a class="header-anchor" href="#geospatial" aria-label="Permalink to &quot;Geospatial&quot;">​</a></h4><blockquote><p>地理位置，记录某地点的经纬度，可用来求两地的距离、距离范围内的值等</p></blockquote><p><strong>操作</strong></p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 添加</span></span>
<span class="line"><span style="color:#B392F0;">geoadd</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> [NX</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">XX]</span><span style="color:#E1E4E8;"> [CH] longitude latitude member [longitude latitude member ...]</span></span>
<span class="line"><span style="color:#6A737D;"># 例子</span></span>
<span class="line"><span style="color:#B392F0;">geoadd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">china:city</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">120.20000</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">30.26667</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hangzhou</span></span>
<span class="line"><span style="color:#B392F0;">geoadd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">china:city</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">120.20000</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">30.26667</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hangzhou</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">121.473720</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">31.230350</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">shanghai</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 获取</span></span>
<span class="line"><span style="color:#B392F0;">geopos</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">member</span><span style="color:#E1E4E8;"> [member. </span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.]</span></span>
<span class="line"><span style="color:#B392F0;">geoadd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">china:city</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hangzhou</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">shanghai</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 获取两地距离，默认距离单位m</span></span>
<span class="line"><span style="color:#B392F0;">geodist</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">china:key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hangzhou</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">shanghai</span></span>
<span class="line"><span style="color:#B392F0;">geodist</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">china:key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hangzhou</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">shanghai</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">km</span></span>
<span class="line"><span style="color:#6A737D;"># 以某个地理位置为中心，找出某半径内的包含的位置</span></span>
<span class="line"><span style="color:#B392F0;">georadius</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">longitude</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">latitude</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">radius</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">m</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">km</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">ft</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">mi</span><span style="color:#E1E4E8;"> [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count [ANY]] [ASC</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">DESC] [STORE key] [STOREDIST key]</span></span>
<span class="line"><span style="color:#B392F0;">georadius</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">经度</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">纬度</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">半径</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">半径单位m/km</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">包含直线距离</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">显示经纬度</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">count</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">显示的个数</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">升序/降序</span></span>
<span class="line"><span style="color:#6A737D;"># 根据给定的成员元素，找出指定距离内的其他元素</span></span>
<span class="line"><span style="color:#B392F0;">georadiusbymember</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">china:city</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hangzhou</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">km</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">withcoord</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">withdist</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 获取位置元素地理位置的哈希值</span></span>
<span class="line"><span style="color:#B392F0;">geohash</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">member</span><span style="color:#E1E4E8;"> [member. </span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">127.0.0.1:6379[5]&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">geodist</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">china:city</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">shanghai</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hangzhou</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">km</span></span>
<span class="line"><span style="color:#B392F0;">&quot;162.2105&quot;</span></span>
<span class="line"><span style="color:#B392F0;">127.0.0.1:6379[5]&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">georadius</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">china:city</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">120.2</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">30.2</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">km</span></span>
<span class="line"><span style="color:#B392F0;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">&quot;hangzhou&quot;</span></span>
<span class="line"><span style="color:#B392F0;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">&quot;shanghai&quot;</span></span>
<span class="line"><span style="color:#B392F0;">127.0.0.1:6379[5]&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">georadius</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">china:city</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">120.2</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">30.2</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">km</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">withdist</span></span>
<span class="line"><span style="color:#B392F0;">1</span><span style="color:#E1E4E8;">) 1) </span><span style="color:#9ECBFF;">&quot;hangzhou&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">&quot;7.4155&quot;</span></span>
<span class="line"><span style="color:#B392F0;">2</span><span style="color:#E1E4E8;">) 1) </span><span style="color:#9ECBFF;">&quot;shanghai&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">&quot;167.2338&quot;</span></span>
<span class="line"><span style="color:#B392F0;">127.0.0.1:6379[5]&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">georadius</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">china:city</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">120.2</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">30.2</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">km</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">withdist</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">withcoord</span></span>
<span class="line"><span style="color:#B392F0;">1</span><span style="color:#E1E4E8;">) 1) </span><span style="color:#9ECBFF;">&quot;hangzhou&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">&quot;7.4155&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">3</span><span style="color:#E1E4E8;">) 1) </span><span style="color:#9ECBFF;">&quot;120.20000249147415161&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">&quot;30.2666706589875858&quot;</span></span>
<span class="line"><span style="color:#B392F0;">2</span><span style="color:#E1E4E8;">) 1) </span><span style="color:#9ECBFF;">&quot;shanghai&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">&quot;167.2338&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">3</span><span style="color:#E1E4E8;">) 1) </span><span style="color:#9ECBFF;">&quot;121.47371917963027954&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">&quot;31.2303488312778228&quot;</span></span>
<span class="line"><span style="color:#B392F0;">127.0.0.1:6379[5]&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">georadiusbymember</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">china:city</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hangzhou</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">km</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">withcoord</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">withdist</span></span>
<span class="line"><span style="color:#B392F0;">1</span><span style="color:#E1E4E8;">) 1) </span><span style="color:#9ECBFF;">&quot;hangzhou&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">&quot;0.0000&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">3</span><span style="color:#E1E4E8;">) 1) </span><span style="color:#9ECBFF;">&quot;120.20000249147415161&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">&quot;30.2666706589875858&quot;</span></span>
<span class="line"><span style="color:#B392F0;">2</span><span style="color:#E1E4E8;">) 1) </span><span style="color:#9ECBFF;">&quot;shanghai&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">&quot;162.2105&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">3</span><span style="color:#E1E4E8;">) 1) </span><span style="color:#9ECBFF;">&quot;121.47371917963027954&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">&quot;31.2303488312778228&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">127.0.0.1:6379[5]&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">geohash</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">china:city</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hangzhou</span></span>
<span class="line"><span style="color:#B392F0;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">&quot;wtmkpjyuph0&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 添加</span></span>
<span class="line"><span style="color:#6F42C1;">geoadd</span><span style="color:#24292E;">  </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> [NX</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">XX]</span><span style="color:#24292E;"> [CH] longitude latitude member [longitude latitude member ...]</span></span>
<span class="line"><span style="color:#6A737D;"># 例子</span></span>
<span class="line"><span style="color:#6F42C1;">geoadd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">china:city</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">120.20000</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">30.26667</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hangzhou</span></span>
<span class="line"><span style="color:#6F42C1;">geoadd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">china:city</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">120.20000</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">30.26667</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hangzhou</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">121.473720</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">31.230350</span><span style="color:#24292E;"> </span><span style="color:#032F62;">shanghai</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 获取</span></span>
<span class="line"><span style="color:#6F42C1;">geopos</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">member</span><span style="color:#24292E;"> [member. </span><span style="color:#032F62;">.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.]</span></span>
<span class="line"><span style="color:#6F42C1;">geoadd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">china:city</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hangzhou</span><span style="color:#24292E;"> </span><span style="color:#032F62;">shanghai</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 获取两地距离，默认距离单位m</span></span>
<span class="line"><span style="color:#6F42C1;">geodist</span><span style="color:#24292E;"> </span><span style="color:#032F62;">china:key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hangzhou</span><span style="color:#24292E;"> </span><span style="color:#032F62;">shanghai</span></span>
<span class="line"><span style="color:#6F42C1;">geodist</span><span style="color:#24292E;"> </span><span style="color:#032F62;">china:key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hangzhou</span><span style="color:#24292E;"> </span><span style="color:#032F62;">shanghai</span><span style="color:#24292E;"> </span><span style="color:#032F62;">km</span></span>
<span class="line"><span style="color:#6A737D;"># 以某个地理位置为中心，找出某半径内的包含的位置</span></span>
<span class="line"><span style="color:#6F42C1;">georadius</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">longitude</span><span style="color:#24292E;"> </span><span style="color:#032F62;">latitude</span><span style="color:#24292E;"> </span><span style="color:#032F62;">radius</span><span style="color:#24292E;"> </span><span style="color:#032F62;">m</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">km</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">ft</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">mi</span><span style="color:#24292E;"> [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count [ANY]] [ASC</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">DESC] [STORE key] [STOREDIST key]</span></span>
<span class="line"><span style="color:#6F42C1;">georadius</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">经度</span><span style="color:#24292E;"> </span><span style="color:#032F62;">纬度</span><span style="color:#24292E;"> </span><span style="color:#032F62;">半径</span><span style="color:#24292E;"> </span><span style="color:#032F62;">半径单位m/km</span><span style="color:#24292E;"> </span><span style="color:#032F62;">包含直线距离</span><span style="color:#24292E;"> </span><span style="color:#032F62;">显示经纬度</span><span style="color:#24292E;"> </span><span style="color:#032F62;">count</span><span style="color:#24292E;"> </span><span style="color:#032F62;">显示的个数</span><span style="color:#24292E;"> </span><span style="color:#032F62;">升序/降序</span></span>
<span class="line"><span style="color:#6A737D;"># 根据给定的成员元素，找出指定距离内的其他元素</span></span>
<span class="line"><span style="color:#6F42C1;">georadiusbymember</span><span style="color:#24292E;"> </span><span style="color:#032F62;">china:city</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hangzhou</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;"> </span><span style="color:#032F62;">km</span><span style="color:#24292E;"> </span><span style="color:#032F62;">withcoord</span><span style="color:#24292E;"> </span><span style="color:#032F62;">withdist</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 获取位置元素地理位置的哈希值</span></span>
<span class="line"><span style="color:#6F42C1;">geohash</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">member</span><span style="color:#24292E;"> [member. </span><span style="color:#032F62;">.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">127.0.0.1:6379[5]&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">geodist</span><span style="color:#24292E;"> </span><span style="color:#032F62;">china:city</span><span style="color:#24292E;"> </span><span style="color:#032F62;">shanghai</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hangzhou</span><span style="color:#24292E;"> </span><span style="color:#032F62;">km</span></span>
<span class="line"><span style="color:#6F42C1;">&quot;162.2105&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">127.0.0.1:6379[5]&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">georadius</span><span style="color:#24292E;"> </span><span style="color:#032F62;">china:city</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">120.2</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">30.2</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;"> </span><span style="color:#032F62;">km</span></span>
<span class="line"><span style="color:#6F42C1;">1</span><span style="color:#24292E;">) </span><span style="color:#032F62;">&quot;hangzhou&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">2</span><span style="color:#24292E;">) </span><span style="color:#032F62;">&quot;shanghai&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">127.0.0.1:6379[5]&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">georadius</span><span style="color:#24292E;"> </span><span style="color:#032F62;">china:city</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">120.2</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">30.2</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;"> </span><span style="color:#032F62;">km</span><span style="color:#24292E;"> </span><span style="color:#032F62;">withdist</span></span>
<span class="line"><span style="color:#6F42C1;">1</span><span style="color:#24292E;">) 1) </span><span style="color:#032F62;">&quot;hangzhou&quot;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">2</span><span style="color:#24292E;">) </span><span style="color:#032F62;">&quot;7.4155&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">2</span><span style="color:#24292E;">) 1) </span><span style="color:#032F62;">&quot;shanghai&quot;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">2</span><span style="color:#24292E;">) </span><span style="color:#032F62;">&quot;167.2338&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">127.0.0.1:6379[5]&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">georadius</span><span style="color:#24292E;"> </span><span style="color:#032F62;">china:city</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">120.2</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">30.2</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;"> </span><span style="color:#032F62;">km</span><span style="color:#24292E;"> </span><span style="color:#032F62;">withdist</span><span style="color:#24292E;"> </span><span style="color:#032F62;">withcoord</span></span>
<span class="line"><span style="color:#6F42C1;">1</span><span style="color:#24292E;">) 1) </span><span style="color:#032F62;">&quot;hangzhou&quot;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">2</span><span style="color:#24292E;">) </span><span style="color:#032F62;">&quot;7.4155&quot;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">3</span><span style="color:#24292E;">) 1) </span><span style="color:#032F62;">&quot;120.20000249147415161&quot;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">2</span><span style="color:#24292E;">) </span><span style="color:#032F62;">&quot;30.2666706589875858&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">2</span><span style="color:#24292E;">) 1) </span><span style="color:#032F62;">&quot;shanghai&quot;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">2</span><span style="color:#24292E;">) </span><span style="color:#032F62;">&quot;167.2338&quot;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">3</span><span style="color:#24292E;">) 1) </span><span style="color:#032F62;">&quot;121.47371917963027954&quot;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">2</span><span style="color:#24292E;">) </span><span style="color:#032F62;">&quot;31.2303488312778228&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">127.0.0.1:6379[5]&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">georadiusbymember</span><span style="color:#24292E;"> </span><span style="color:#032F62;">china:city</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hangzhou</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;"> </span><span style="color:#032F62;">km</span><span style="color:#24292E;"> </span><span style="color:#032F62;">withcoord</span><span style="color:#24292E;"> </span><span style="color:#032F62;">withdist</span></span>
<span class="line"><span style="color:#6F42C1;">1</span><span style="color:#24292E;">) 1) </span><span style="color:#032F62;">&quot;hangzhou&quot;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">2</span><span style="color:#24292E;">) </span><span style="color:#032F62;">&quot;0.0000&quot;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">3</span><span style="color:#24292E;">) 1) </span><span style="color:#032F62;">&quot;120.20000249147415161&quot;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">2</span><span style="color:#24292E;">) </span><span style="color:#032F62;">&quot;30.2666706589875858&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">2</span><span style="color:#24292E;">) 1) </span><span style="color:#032F62;">&quot;shanghai&quot;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">2</span><span style="color:#24292E;">) </span><span style="color:#032F62;">&quot;162.2105&quot;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">3</span><span style="color:#24292E;">) 1) </span><span style="color:#032F62;">&quot;121.47371917963027954&quot;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">2</span><span style="color:#24292E;">) </span><span style="color:#032F62;">&quot;31.2303488312778228&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">127.0.0.1:6379[5]&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">geohash</span><span style="color:#24292E;"> </span><span style="color:#032F62;">china:city</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hangzhou</span></span>
<span class="line"><span style="color:#6F42C1;">1</span><span style="color:#24292E;">) </span><span style="color:#032F62;">&quot;wtmkpjyuph0&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br></div></div><h4 id="hyperloglog" tabindex="-1">Hyperloglog <a class="header-anchor" href="#hyperloglog" aria-label="Permalink to &quot;Hyperloglog&quot;">​</a></h4><blockquote><p>基数，数据集中不重复的元素个数，可用于求集合（交并补）。用于网页的访问量（UV）、点赞量，一个用户多次访问，也只能算作一个人</p></blockquote><p><strong>操作</strong></p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 添加</span></span>
<span class="line"><span style="color:#B392F0;">pfadd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">element</span><span style="color:#E1E4E8;"> [element </span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.]</span></span>
<span class="line"><span style="color:#6A737D;"># 获取key基数</span></span>
<span class="line"><span style="color:#B392F0;">pfcount</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span></span>
<span class="line"><span style="color:#6A737D;"># 将多个hyperloglog合并为一个</span></span>
<span class="line"><span style="color:#B392F0;">pfmerge</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">destkey</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sourcekey</span><span style="color:#E1E4E8;"> [sourcekey </span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">127.0.0.1:6379[6]&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pfadd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hyper</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">b</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">c</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">d</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">f</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">g</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">integer</span><span style="color:#E1E4E8;">) 1</span></span>
<span class="line"><span style="color:#B392F0;">127.0.0.1:6379[6]&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pfcount</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hyper</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">integer</span><span style="color:#E1E4E8;">) 7</span></span>
<span class="line"><span style="color:#B392F0;">127.0.0.1:6379[6]&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pfadd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hyper</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">b</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">c</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">integer</span><span style="color:#E1E4E8;">) 0</span></span>
<span class="line"><span style="color:#B392F0;">127.0.0.1:6379[6]&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pfcount</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hyper</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">integer</span><span style="color:#E1E4E8;">) 7</span></span>
<span class="line"><span style="color:#B392F0;">127.0.0.1:6379[6]&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pfadd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hyper2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">c</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">h</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">i</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">integer</span><span style="color:#E1E4E8;">) 1</span></span>
<span class="line"><span style="color:#B392F0;">127.0.0.1:6379[6]&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pfmerge</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hyper0</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hyper</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hyper2</span></span>
<span class="line"><span style="color:#B392F0;">OK</span></span>
<span class="line"><span style="color:#B392F0;">127.0.0.1:6379[6]&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pfcount</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hyper0</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">integer</span><span style="color:#E1E4E8;">) 9</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 添加</span></span>
<span class="line"><span style="color:#6F42C1;">pfadd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">element</span><span style="color:#24292E;"> [element </span><span style="color:#032F62;">.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.]</span></span>
<span class="line"><span style="color:#6A737D;"># 获取key基数</span></span>
<span class="line"><span style="color:#6F42C1;">pfcount</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span></span>
<span class="line"><span style="color:#6A737D;"># 将多个hyperloglog合并为一个</span></span>
<span class="line"><span style="color:#6F42C1;">pfmerge</span><span style="color:#24292E;"> </span><span style="color:#032F62;">destkey</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sourcekey</span><span style="color:#24292E;"> [sourcekey </span><span style="color:#032F62;">.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">127.0.0.1:6379[6]&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pfadd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hyper</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">b</span><span style="color:#24292E;"> </span><span style="color:#032F62;">c</span><span style="color:#24292E;"> </span><span style="color:#032F62;">d</span><span style="color:#24292E;"> </span><span style="color:#032F62;">e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">g</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">integer</span><span style="color:#24292E;">) 1</span></span>
<span class="line"><span style="color:#6F42C1;">127.0.0.1:6379[6]&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pfcount</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hyper</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">integer</span><span style="color:#24292E;">) 7</span></span>
<span class="line"><span style="color:#6F42C1;">127.0.0.1:6379[6]&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pfadd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hyper</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">b</span><span style="color:#24292E;"> </span><span style="color:#032F62;">c</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">integer</span><span style="color:#24292E;">) 0</span></span>
<span class="line"><span style="color:#6F42C1;">127.0.0.1:6379[6]&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pfcount</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hyper</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">integer</span><span style="color:#24292E;">) 7</span></span>
<span class="line"><span style="color:#6F42C1;">127.0.0.1:6379[6]&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pfadd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hyper2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">c</span><span style="color:#24292E;"> </span><span style="color:#032F62;">h</span><span style="color:#24292E;"> </span><span style="color:#032F62;">i</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">integer</span><span style="color:#24292E;">) 1</span></span>
<span class="line"><span style="color:#6F42C1;">127.0.0.1:6379[6]&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pfmerge</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hyper0</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hyper</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hyper2</span></span>
<span class="line"><span style="color:#6F42C1;">OK</span></span>
<span class="line"><span style="color:#6F42C1;">127.0.0.1:6379[6]&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pfcount</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hyper0</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">integer</span><span style="color:#24292E;">) 9</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h4 id="bitmap" tabindex="-1">BitMap <a class="header-anchor" href="#bitmap" aria-label="Permalink to &quot;BitMap&quot;">​</a></h4><blockquote><p>位图场景，有两个状态，0和1。可用于签到统计、状态统计等</p></blockquote><p><strong>操作</strong></p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 设置值，一般设置0或1</span></span>
<span class="line"><span style="color:#B392F0;">setbit</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">value</span></span>
<span class="line"><span style="color:#6A737D;"># 获取值</span></span>
<span class="line"><span style="color:#B392F0;">getbit</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">offset</span></span>
<span class="line"><span style="color:#6A737D;"># 统计某个键其值为1的数量</span></span>
<span class="line"><span style="color:#B392F0;">bitcount</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> [start </span><span style="color:#9ECBFF;">end]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">127.0.0.1:6379[7]&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">setbit</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sign</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">integer</span><span style="color:#E1E4E8;">) 0</span></span>
<span class="line"><span style="color:#B392F0;">127.0.0.1:6379[7]&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">setbit</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sign</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">integer</span><span style="color:#E1E4E8;">) 0</span></span>
<span class="line"><span style="color:#B392F0;">127.0.0.1:6379[7]&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">setbit</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sign</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">integer</span><span style="color:#E1E4E8;">) 0</span></span>
<span class="line"><span style="color:#B392F0;">127.0.0.1:6379[7]&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">setbit</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sign</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">integer</span><span style="color:#E1E4E8;">) 0</span></span>
<span class="line"><span style="color:#B392F0;">127.0.0.1:6379[7]&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">setbit</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sign</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">integer</span><span style="color:#E1E4E8;">) 0</span></span>
<span class="line"><span style="color:#B392F0;">127.0.0.1:6379[7]&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">getbit</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sign</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">integer</span><span style="color:#E1E4E8;">) 1</span></span>
<span class="line"><span style="color:#B392F0;">127.0.0.1:6379[7]&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bitcount</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sign</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">integer</span><span style="color:#E1E4E8;">) 4</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 设置值，一般设置0或1</span></span>
<span class="line"><span style="color:#6F42C1;">setbit</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">value</span></span>
<span class="line"><span style="color:#6A737D;"># 获取值</span></span>
<span class="line"><span style="color:#6F42C1;">getbit</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">offset</span></span>
<span class="line"><span style="color:#6A737D;"># 统计某个键其值为1的数量</span></span>
<span class="line"><span style="color:#6F42C1;">bitcount</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> [start </span><span style="color:#032F62;">end]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">127.0.0.1:6379[7]&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">setbit</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sign</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">integer</span><span style="color:#24292E;">) 0</span></span>
<span class="line"><span style="color:#6F42C1;">127.0.0.1:6379[7]&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">setbit</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sign</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">integer</span><span style="color:#24292E;">) 0</span></span>
<span class="line"><span style="color:#6F42C1;">127.0.0.1:6379[7]&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">setbit</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sign</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">integer</span><span style="color:#24292E;">) 0</span></span>
<span class="line"><span style="color:#6F42C1;">127.0.0.1:6379[7]&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">setbit</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sign</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">integer</span><span style="color:#24292E;">) 0</span></span>
<span class="line"><span style="color:#6F42C1;">127.0.0.1:6379[7]&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">setbit</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sign</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">integer</span><span style="color:#24292E;">) 0</span></span>
<span class="line"><span style="color:#6F42C1;">127.0.0.1:6379[7]&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">getbit</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sign</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">integer</span><span style="color:#24292E;">) 1</span></span>
<span class="line"><span style="color:#6F42C1;">127.0.0.1:6379[7]&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bitcount</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sign</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">integer</span><span style="color:#24292E;">) 4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p><strong>BitMap 统计日活</strong></p><p>统计今日登录的用户数，建立一个 bitmap，每一位标识一个用户ID（假设是1亿，空间使用量1亿/8/1024/1024=11MB，仅仅只要11MB就能统计1亿用户的日活，且速度相当快）</p><p>每次用户登录时会执行一次<code>setbit key user_id 1</code>。将 bitmap 中对应位置的值置为1，时间复杂度是O(1)。执行<code>bitcount key</code> 统计 bitmap 结果有多少个1（即活跃用户数）</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 每个用户登录即设置一次</span></span>
<span class="line"><span style="color:#B392F0;">setbit</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">activity_user_20210810</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">111000</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#6A737D;"># 统计某日活跃用户数</span></span>
<span class="line"><span style="color:#B392F0;">bitcount</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">activity_user_20210810</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 对一个或多个保存二进制位的字符串 key 进行位元操作，并将结果保存到 destkey 上</span></span>
<span class="line"><span style="color:#6A737D;"># operation 可以是 AND 逻辑并、 OR 逻辑或、 NOT 逻辑非、 XOR 逻辑异或 这四种操作中的任意一种</span></span>
<span class="line"><span style="color:#6A737D;"># 除了 NOT 操作之外，其他操作都可以接受一个或多个 key 作为输入</span></span>
<span class="line"><span style="color:#6A737D;"># BITOP 的复杂度为 O(N) ，当处理大型矩阵(matrix)或者进行大数据量的统计时，最好将任务指派到附属节点(slave)进行，避免阻塞主节点</span></span>
<span class="line"><span style="color:#6A737D;">### 返回值：保存到 destkey 的字符串的长度，和输入 key 中最长的字符串长度相等</span></span>
<span class="line"><span style="color:#B392F0;">bitop</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">operation</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">destkey</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> [key </span><span style="color:#9ECBFF;">...]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 将一周内连续登录用户保存到res中</span></span>
<span class="line"><span style="color:#B392F0;">bitop</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">and</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">res</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">activity_0809</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">activity_0810</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">activity_0811</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">activity_0812</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">activity_0813</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">activity_0814</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">activity_0815</span></span>
<span class="line"><span style="color:#6A737D;"># 统计一周内连续登录用户</span></span>
<span class="line"><span style="color:#B392F0;">bitcount</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">res</span></span>
<span class="line"><span style="color:#6A737D;"># 判断某个用户是否在七天内连续登录，返回1，即七天内连续登录</span></span>
<span class="line"><span style="color:#B392F0;">getbit</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">res</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">用户id</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 统计周活</span></span>
<span class="line"><span style="color:#B392F0;">bitop</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">or</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">res</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">activity_0809</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">activity_0810</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">activity_0811</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">activity_0812</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">activity_0813</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">activity_0814</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">activity_0815</span></span>
<span class="line"><span style="color:#6A737D;"># 获取周活</span></span>
<span class="line"><span style="color:#B392F0;">bitcount</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">res</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 每个用户登录即设置一次</span></span>
<span class="line"><span style="color:#6F42C1;">setbit</span><span style="color:#24292E;"> </span><span style="color:#032F62;">activity_user_20210810</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">111000</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#6A737D;"># 统计某日活跃用户数</span></span>
<span class="line"><span style="color:#6F42C1;">bitcount</span><span style="color:#24292E;"> </span><span style="color:#032F62;">activity_user_20210810</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 对一个或多个保存二进制位的字符串 key 进行位元操作，并将结果保存到 destkey 上</span></span>
<span class="line"><span style="color:#6A737D;"># operation 可以是 AND 逻辑并、 OR 逻辑或、 NOT 逻辑非、 XOR 逻辑异或 这四种操作中的任意一种</span></span>
<span class="line"><span style="color:#6A737D;"># 除了 NOT 操作之外，其他操作都可以接受一个或多个 key 作为输入</span></span>
<span class="line"><span style="color:#6A737D;"># BITOP 的复杂度为 O(N) ，当处理大型矩阵(matrix)或者进行大数据量的统计时，最好将任务指派到附属节点(slave)进行，避免阻塞主节点</span></span>
<span class="line"><span style="color:#6A737D;">### 返回值：保存到 destkey 的字符串的长度，和输入 key 中最长的字符串长度相等</span></span>
<span class="line"><span style="color:#6F42C1;">bitop</span><span style="color:#24292E;"> </span><span style="color:#032F62;">operation</span><span style="color:#24292E;"> </span><span style="color:#032F62;">destkey</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> [key </span><span style="color:#032F62;">...]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 将一周内连续登录用户保存到res中</span></span>
<span class="line"><span style="color:#6F42C1;">bitop</span><span style="color:#24292E;"> </span><span style="color:#032F62;">and</span><span style="color:#24292E;"> </span><span style="color:#032F62;">res</span><span style="color:#24292E;"> </span><span style="color:#032F62;">activity_0809</span><span style="color:#24292E;"> </span><span style="color:#032F62;">activity_0810</span><span style="color:#24292E;"> </span><span style="color:#032F62;">activity_0811</span><span style="color:#24292E;"> </span><span style="color:#032F62;">activity_0812</span><span style="color:#24292E;"> </span><span style="color:#032F62;">activity_0813</span><span style="color:#24292E;"> </span><span style="color:#032F62;">activity_0814</span><span style="color:#24292E;"> </span><span style="color:#032F62;">activity_0815</span></span>
<span class="line"><span style="color:#6A737D;"># 统计一周内连续登录用户</span></span>
<span class="line"><span style="color:#6F42C1;">bitcount</span><span style="color:#24292E;"> </span><span style="color:#032F62;">res</span></span>
<span class="line"><span style="color:#6A737D;"># 判断某个用户是否在七天内连续登录，返回1，即七天内连续登录</span></span>
<span class="line"><span style="color:#6F42C1;">getbit</span><span style="color:#24292E;"> </span><span style="color:#032F62;">res</span><span style="color:#24292E;"> </span><span style="color:#032F62;">用户id</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 统计周活</span></span>
<span class="line"><span style="color:#6F42C1;">bitop</span><span style="color:#24292E;"> </span><span style="color:#032F62;">or</span><span style="color:#24292E;"> </span><span style="color:#032F62;">res</span><span style="color:#24292E;"> </span><span style="color:#032F62;">activity_0809</span><span style="color:#24292E;"> </span><span style="color:#032F62;">activity_0810</span><span style="color:#24292E;"> </span><span style="color:#032F62;">activity_0811</span><span style="color:#24292E;"> </span><span style="color:#032F62;">activity_0812</span><span style="color:#24292E;"> </span><span style="color:#032F62;">activity_0813</span><span style="color:#24292E;"> </span><span style="color:#032F62;">activity_0814</span><span style="color:#24292E;"> </span><span style="color:#032F62;">activity_0815</span></span>
<span class="line"><span style="color:#6A737D;"># 获取周活</span></span>
<span class="line"><span style="color:#6F42C1;">bitcount</span><span style="color:#24292E;"> </span><span style="color:#032F62;">res</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><br><h2 id="事务" tabindex="-1">事务 <a class="header-anchor" href="#事务" aria-label="Permalink to &quot;事务&quot;">​</a></h2><blockquote><p>Redis 事务的本质是一组命令的集合，可以一次执行多个命令。一个事务中所有的命令都会被序列化，一次性按顺序地，串行化执行，不会被其他命令插入</p></blockquote><br><p><u><strong>1 - Redis 事务锁</strong></u></p><p>1、<strong>乐观锁</strong>，认为无论执行什么操作都不会出问题，无论执行什么操作都不会加锁</p><ul><li>用 version 给数据做标识，更新数据时检查当前 version 和期望 version 是否一致，判断期间是否修改过数据</li><li>提交的 version 必须大于记录当前 version 才能执行更新</li></ul><p>2、<strong>悲观锁</strong>，认为无论执行什么操作都会出问题，无论执行什么操作都会加锁</p><br><p><u><strong>2 - Redis 事务的特点</strong></u></p><p>1、一个队列中，一次性、顺序性、排他性的执行一系列命令</p><p>2、<mark>Redis <strong>保证单条命令的原子性</strong>，但是 Redis <strong>不保证事务操作的原子性</strong>，事务执行失败后没有回滚操作</mark></p><p>3、<mark>Redis 事务中<strong>没有隔离级别的概念</strong></mark></p><p>4、<mark>所有命令在事务开启后并没有被直接执行，只有发起执行指令的时候才会执行</mark></p><p>5、执行流程</p><ol><li><p>开启事务，<code>multi</code></p></li><li><p>输入一组命令，命令入队</p></li><li><p>执行事务，<code>exec</code>，<strong>执行之后本次事务结束，若还要使用事务则需要再次开启</strong></p></li><li><p>取消事务，<code>discard</code></p></li><li><p>监视 key 值，<code>watch key [key...]</code>，<strong>类似于乐观锁，如果在事务执行时，若是这个或这些 key 值被其他命令所改动，那么事务将会被打断</strong>。<strong>一旦执行了<code>exec</code>命令之后，之前加的监控锁都会被取消</strong></p></li></ol><br><p><strong>事务不能正常开启的情况</strong></p><ol><li>编译异常，输入的命令编译异常，事务中所有的命令都不会成功执行</li><li>运行异常，输入的命令在执行期间出现异常，除了出错的命令，其它命令均能正常执行</li></ol><br><p><u><strong>3 - Redis 事务操作</strong></u></p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 标记一个事务块的开始</span></span>
<span class="line"><span style="color:#B392F0;">multi</span></span>
<span class="line"><span style="color:#6A737D;"># 执行事务块内的命令</span></span>
<span class="line"><span style="color:#79B8FF;">exec</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 监视一个或者多个key，如果事务执行之前，这个kye被其它命令所动，则事务被打断</span></span>
<span class="line"><span style="color:#B392F0;">watch</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> [key </span><span style="color:#9ECBFF;">...]</span></span>
<span class="line"><span style="color:#6A737D;"># 取消watch命令对所有key的监视</span></span>
<span class="line"><span style="color:#B392F0;">unwatch</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 取消执行事务块内的所有命令</span></span>
<span class="line"><span style="color:#B392F0;">discard</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 标记一个事务块的开始</span></span>
<span class="line"><span style="color:#6F42C1;">multi</span></span>
<span class="line"><span style="color:#6A737D;"># 执行事务块内的命令</span></span>
<span class="line"><span style="color:#005CC5;">exec</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 监视一个或者多个key，如果事务执行之前，这个kye被其它命令所动，则事务被打断</span></span>
<span class="line"><span style="color:#6F42C1;">watch</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> [key </span><span style="color:#032F62;">...]</span></span>
<span class="line"><span style="color:#6A737D;"># 取消watch命令对所有key的监视</span></span>
<span class="line"><span style="color:#6F42C1;">unwatch</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 取消执行事务块内的所有命令</span></span>
<span class="line"><span style="color:#6F42C1;">discard</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">127.0.0.1:6379&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">multi</span></span>
<span class="line"><span style="color:#B392F0;">OK</span></span>
<span class="line"><span style="color:#B392F0;">127.0.0.1:6379&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">discard</span></span>
<span class="line"><span style="color:#B392F0;">OK</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">127.0.0.1:6379&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">keys</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span></span>
<span class="line"><span style="color:#B392F0;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">&quot;k222&quot;</span></span>
<span class="line"><span style="color:#B392F0;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">&quot;atDB&quot;</span></span>
<span class="line"><span style="color:#B392F0;">3</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">&quot;k333&quot;</span></span>
<span class="line"><span style="color:#B392F0;">4</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">&quot;myAtomicLong&quot;</span></span>
<span class="line"><span style="color:#B392F0;">127.0.0.1:6379&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">multi</span></span>
<span class="line"><span style="color:#B392F0;">OK</span></span>
<span class="line"><span style="color:#B392F0;">127.0.0.1:6379&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">set</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">k1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">v111</span></span>
<span class="line"><span style="color:#B392F0;">QUEUED</span></span>
<span class="line"><span style="color:#B392F0;">127.0.0.1:6379&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">k222</span></span>
<span class="line"><span style="color:#B392F0;">QUEUED</span></span>
<span class="line"><span style="color:#B392F0;">127.0.0.1:6379&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">set</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">k333</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3333</span></span>
<span class="line"><span style="color:#B392F0;">QUEUED</span></span>
<span class="line"><span style="color:#B392F0;">127.0.0.1:6379&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">exec</span></span>
<span class="line"><span style="color:#B392F0;">1</span><span style="color:#E1E4E8;">) OK</span></span>
<span class="line"><span style="color:#B392F0;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">v222</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#B392F0;">3</span><span style="color:#E1E4E8;">) OK</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">127.0.0.1:6379&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">multi</span></span>
<span class="line"><span style="color:#6F42C1;">OK</span></span>
<span class="line"><span style="color:#6F42C1;">127.0.0.1:6379&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">discard</span></span>
<span class="line"><span style="color:#6F42C1;">OK</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">127.0.0.1:6379&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">keys</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span></span>
<span class="line"><span style="color:#6F42C1;">1</span><span style="color:#24292E;">) </span><span style="color:#032F62;">&quot;k222&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">2</span><span style="color:#24292E;">) </span><span style="color:#032F62;">&quot;atDB&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">3</span><span style="color:#24292E;">) </span><span style="color:#032F62;">&quot;k333&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">4</span><span style="color:#24292E;">) </span><span style="color:#032F62;">&quot;myAtomicLong&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">127.0.0.1:6379&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">multi</span></span>
<span class="line"><span style="color:#6F42C1;">OK</span></span>
<span class="line"><span style="color:#6F42C1;">127.0.0.1:6379&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">set</span><span style="color:#24292E;"> </span><span style="color:#032F62;">k1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">v111</span></span>
<span class="line"><span style="color:#6F42C1;">QUEUED</span></span>
<span class="line"><span style="color:#6F42C1;">127.0.0.1:6379&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">k222</span></span>
<span class="line"><span style="color:#6F42C1;">QUEUED</span></span>
<span class="line"><span style="color:#6F42C1;">127.0.0.1:6379&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">set</span><span style="color:#24292E;"> </span><span style="color:#032F62;">k333</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3333</span></span>
<span class="line"><span style="color:#6F42C1;">QUEUED</span></span>
<span class="line"><span style="color:#6F42C1;">127.0.0.1:6379&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">exec</span></span>
<span class="line"><span style="color:#6F42C1;">1</span><span style="color:#24292E;">) OK</span></span>
<span class="line"><span style="color:#6F42C1;">2</span><span style="color:#24292E;">) </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">v222</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">3</span><span style="color:#24292E;">) OK</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><br><h2 id="持久化" tabindex="-1">持久化 <a class="header-anchor" href="#持久化" aria-label="Permalink to &quot;持久化&quot;">​</a></h2><blockquote><p>Redis 最大的特点就是基于内存的。既然是基于内存，当 Redis 服务挂掉或者服务器宕机，数据就会丢失，所以 Redis 对需要持久化的数据做一些处理</p></blockquote><br><h3 id="rdb" tabindex="-1">RDB <a class="header-anchor" href="#rdb" aria-label="Permalink to &quot;RDB&quot;">​</a></h3><blockquote><p>在指定时间间隔内，将内存中的数据保存到磁盘上的一个 dump 文件，定时保存。恢复的时候是将快照文件直接读到内存中，实现快速恢复</p></blockquote><br><p><strong>RDB 快照</strong></p><p>Redis 提供了两个命令来生成 RDB 快照文件，分别是 <code>save</code> 和 <code>bgsave</code>。<code>save</code> 命令在主线程中执行，会导致阻塞。而 <code>bgsave</code> 命令则会创建一个子进程，用于写入 RDB 文件的操作，避免了对主线程的阻塞，<strong>这也是 Redis RDB 的默认配置</strong></p><br><p><strong>自动触发</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># save &lt;second&gt; &lt;change&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;"># save 单位时间(s) 修改次数</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;"># 3600s内修改超过1次，就将数据持久化到储存</span></span>
<span class="line"><span style="color:#e1e4e8;">save 3600 1 </span></span>
<span class="line"><span style="color:#e1e4e8;">save 300 100</span></span>
<span class="line"><span style="color:#e1e4e8;">save 60 10000</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># save &lt;second&gt; &lt;change&gt;</span></span>
<span class="line"><span style="color:#24292e;"># save 单位时间(s) 修改次数</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;"># 3600s内修改超过1次，就将数据持久化到储存</span></span>
<span class="line"><span style="color:#24292e;">save 3600 1 </span></span>
<span class="line"><span style="color:#24292e;">save 300 100</span></span>
<span class="line"><span style="color:#24292e;">save 60 10000</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><br><p><strong>手动触发</strong></p><ol><li>执行完命令之后，<mark>手动执行 <code>save </code>指令</mark></li><li><mark>执行 <code>flushdb </code>指令</mark>，执行<code>flushdb</code>指令之后，会生成一个空的<code>dump.rdb</code>文件将之前的 RDB 文件覆盖</li></ol><br><p><strong>禁用快照</strong></p><ol><li>配置文件中开启 <code>save &quot;&quot; </code></li><li>命令行执行<code>config set save &quot;&quot;</code></li></ol><br><p><strong>异常 dump 文件修复</strong></p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># redis-check-dump 在 redis-server 同级目录下</span></span>
<span class="line"><span style="color:#B392F0;">redis-check-dump</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--fix</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">dump.rdb</span></span>
<span class="line"><span style="color:#6A737D;"># 之后重启 Redis 生效</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># redis-check-dump 在 redis-server 同级目录下</span></span>
<span class="line"><span style="color:#6F42C1;">redis-check-dump</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--fix</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dump.rdb</span></span>
<span class="line"><span style="color:#6A737D;"># 之后重启 Redis 生效</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><br><p><strong>RDB 持久化过程</strong></p><ul><li>Redis 会单独创建（fork）一个子进程来进行持久化。Redis 会先将需要持久化的数据写到一个临时文件中，等持久化过程都结束了，再用这个临时文件替换上次持久化的文件。整个持久化过程主进程不进行任何关于持久化的 IO 操作，这就确保了极高的性能</li><li><mark>Fork 的作用是复制一个与当前进行一样的子进程</mark>，子进程的所有数据（变量，环境变量，程序计数器等）数值都与原来的进程一致，是一个全新的进程</li><li>RDB 保存的是<code>dump.rdb</code>文件，备份的<code>dump.rdb</code>文件最好保存在与运行 Redis 的服务器不同的另一台服务器上</li><li><mark>如果要进行<strong>大规模的数据恢复</strong>，且对于<strong>数据恢复的完整性要求不是非常敏感</strong>，那么 RDB 方式要比 AOF 方式更加的高效</mark></li></ul><br><p><strong>RDB 优点</strong></p><ol><li><code>.rdb</code>是一个非常紧凑的文件</li><li>RDB 在保存<code>.rdb</code>文件时，父进程唯一需要做的就是 fork 出一份子进程，接下来的工作全部由子进程来做，父进程不需要再做其他的 IO 操作，只需要专注于自己的工作。所以 RDB 持久化方式可以最大化 Redis 的性能</li><li><strong>与 AOF 相比，在恢复大的数据集的时候，RDB 方式会更快</strong></li></ol><br><p><strong>RDB 缺点</strong></p><ol><li>数据丢失风险大，在一定间隔时间内做一次备份，如果 Redis 意外宕机，就会丢失最后一次快照后的所有修改</li><li>Fork 的时候，内存中的数据被克隆了一份，大致两倍的膨胀内存需要考虑。并且在数据集比较大的时候，Fork 过程是非常耗时的</li></ol><br><blockquote><p>Redis 是怎么解决在<code>bgsave </code>做快照的时候允许数据修改？</p></blockquote><p>这里主要是利用 <code>bgsave</code>的子线程实现的，具体操作如下：</p><p>1、如果主线程执行读操作，则主线程和 <code>bgsave</code> 子进程互相不影响；</p><p>2、如果主线程执行写操作，则被修改的数据会复制一份副本，然后 <code>bgsave</code>子进程会把该副本数据写入 RDB 文件，在这个过程中，主线程仍然可以直接修改原来的数据。</p><br><h3 id="aof" tabindex="-1">AOF <a class="header-anchor" href="#aof" aria-label="Permalink to &quot;AOF&quot;">​</a></h3><blockquote><p>以日志的形式来记录每个写操作，将 Redis 执行过的<strong>所有写指令</strong>记录下来（读指令不记录），<strong>只许追加文件而不改写文件</strong>。Redis 启动时会读取 AOF 日志文件，重新构建数据。Redis 重启的话就根据日志文件的内容将指令从前到后执行执行一次，以完成数据的恢复工作</p></blockquote><br><p><strong>写后日志</strong></p><p>AOF 采用的是<strong>写后日志</strong>的方式，<mark>主要是由于 Redis 在写入日志之前，不对命令进行语法检查，所以只记录执行成功的命令，避免出现记录错误命令的情况，而且在命令执行后再写日志不会阻塞当前的写操作</mark>。后写日志主要有两个风险可能会发生：</p><ul><li>数据可能会丢失：如果 Redis 刚执行完命令，此时发生故障宕机，会导致这条命令存在丢失的风险。</li><li>可能阻塞其他操作：AOF 日志其实也是在主线程中执行，所以当 Redis 把日志文件写入磁盘的时候，还是会阻塞后续的操作</li></ul><br><p><strong>AOF 快照</strong></p><ul><li><p>启用 AOF</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># 配置文件修改</span></span>
<span class="line"><span style="color:#e1e4e8;">appendonly yes</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># 配置文件修改</span></span>
<span class="line"><span style="color:#24292e;">appendonly yes</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p><code>appendfsync</code>，AOF 的命令同步策略</p><ol><li><code>always</code>，同步计划，每次发生数据变更会被立即记录到 AOF 文件，性能较差但是数据完整性较好</li><li><code>everysec</code>，出厂默认，异步操作，每秒记录，如果一秒内宕机，会出现数据丢失</li><li><code>no</code></li></ol></li><li><p>aof 文件异常修复</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># redis-check-aof在redis-server同级目录下</span></span>
<span class="line"><span style="color:#B392F0;">redis-check-aof</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--fix</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">appendonly.aof</span></span>
<span class="line"><span style="color:#6A737D;"># 之后重启Redis生效</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># redis-check-aof在redis-server同级目录下</span></span>
<span class="line"><span style="color:#6F42C1;">redis-check-aof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--fix</span><span style="color:#24292E;"> </span><span style="color:#032F62;">appendonly.aof</span></span>
<span class="line"><span style="color:#6A737D;"># 之后重启Redis生效</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><br><p><strong>AOF 的重写（rewrite）机制</strong></p><p>AOF 采用文件追加的方式，文件会越来越大，为了避免出现这种情况，AOF 新增了重写机制。当 AOF 文件的大小超过所设定的阈值时，Redis 就会启动 AOF 文件的内容压缩，只保留可以恢复数据的最小指令集。可以使用<code>bgrewriteaof</code></p><br><p><strong>触发重写</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">auto-aof-rewrite-percentage 100</span></span>
<span class="line"><span style="color:#e1e4e8;">auto-aof-rewrite-min-size 64mb</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">auto-aof-rewrite-percentage 100</span></span>
<span class="line"><span style="color:#24292e;">auto-aof-rewrite-min-size 64mb</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Redis 会记录上次重写时的 aof 文件的大小，默认配置是当 aof 文件大小是上次重写后大小的一倍，且文件大于 64MB 时触发。若是重启 Redis 后第一次触发重写机制，则重写时对照的 aof 文件的大小是 Redis 启动时使用的 aof 文件的大小</p><br><p><strong>重写过程</strong></p><p>AOF 文件持续增长而过大时，会 fork 出一条新进程来将文件重写（先写入临时文件再 rename ）。遍历新进程的内存中的数据，每条记录都有一条 <code>set</code>语句。重写 AOF 文件的操作并没有读取到旧的 AOF 文件，而是将整个内存中的数据库内容用命令的方式重写一个新的 AOF 文件，这点和 RDB 快照有点类似</p><br><p><strong>AOF 细节</strong></p><ul><li>aof 文件是一个只进行日志追加的文件</li><li>若是目录下同时存在<code>dump.rdb</code>和<code>appendonly.aof</code>，<strong>优先加载 aof 文件进行数据恢复</strong>。因为在通常情况下，aof 文件保存的数据要比 rdb 文件保存的数据更完整</li><li>aof 文件会记录<code>flusdb</code>和<code>flushall</code>指令，若在操作的最后执行了<code>flushdb</code>，在下次启动时从 aof 文件恢复的指令中末尾就是<code>flushdb</code>，因此数据会被再次清空</li></ul><br><p><strong>AOF 优点</strong></p><ol><li>aof 文件有序地保存了对数据库执行的所有写入操作，这些写入操作以 aof 格式的文件进行保存，aof 文件内容易于读懂，对文件进行分析也很轻松</li><li>同步策略配置灵活</li><li>Redis 可以在 AOF 文件过大时，在后台自动的对 AOF 文件进行重写</li></ol><p><strong>AOF 缺点</strong>：对相同数据集的数据而言，AOF 文件要远大于 RDB 文件，恢复速度要慢于 RDB 文件</p><h3 id="混合持久化" tabindex="-1">混合持久化 <a class="header-anchor" href="#混合持久化" aria-label="Permalink to &quot;混合持久化&quot;">​</a></h3><blockquote><p>重启 Redis 时，很少使用 RDB来恢复数据，因为会丢失大量数据，通常使用 AOF 日志重放。但是重放 AOF 日志性能相对 RDB 来说要慢很多，这样在 Redis 实例很大的情况下，启动需要花费很长的时间。Redis 为了解决这个问题，带来了一个新的持久化方式：混合持久化</p></blockquote><p><strong>配置</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">aof-use-rdb-preamble yes</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">aof-use-rdb-preamble yes</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>细节</strong></p><p>如果开启了混合持久化，AOF 在重写时，<mark>不再是单纯将内存数据转换为 RESP 命令写入 AOF 文件， 而是将重写这一刻之前的内存做 RDB 快照处理</mark>，并且将 RDB 快照内容和增量的 AOF 修改内存数据的命令存在一起，都写入新的 AOF 文件， 新的文件开始不叫<code>appendonly.aof</code>，等到重写完新的 AOF 文件才会进行改名，覆盖原有的 AOF 文件，完成新旧两个 AOF 文件的替换</p><p>于是在 Redis 重启的时候，可以<strong>先加载 RDB 的内容，然后再重放增量 AOF 日志</strong>，就可以完全替代之前的 AOF 全量文件重放， 因此重启效率大幅得到提升。</p><br><h2 id="高可用" tabindex="-1">高可用 <a class="header-anchor" href="#高可用" aria-label="Permalink to &quot;高可用&quot;">​</a></h2><h3 id="主从复制" tabindex="-1">主从复制 <a class="header-anchor" href="#主从复制" aria-label="Permalink to &quot;主从复制&quot;">​</a></h3><blockquote><p>主从复制，主机数据更新后，根据配置和策略，自动同步到备份机的 Master/Slave 机制，Master 以写为主，Slave 以读为主。可以用作读写分离和容灾恢复</p></blockquote><br><p><strong>一主多从配置（仅需要配置从库，不配置主库）</strong></p><p>一、修改配置文件</p><p>1、拷贝<code>redis.conf</code>文件备份</p><p>2、开启<code>deamonlize yes</code></p><p>3、指定端口</p><p>3.1、同一台机上多个 Redis 服务改不同端口</p><p>3.2、不同机子上 Redis 服务无需修改端口</p><p>3.3、Pid 文件名</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># redis.conf</span></span>
<span class="line"><span style="color:#e1e4e8;">pidfile /var/run/redis端口号.pid</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># redis.conf</span></span>
<span class="line"><span style="color:#24292e;">pidfile /var/run/redis端口号.pid</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>3.4、Log 文件名</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># redis.conf</span></span>
<span class="line"><span style="color:#e1e4e8;">logfile &quot;端口号.log&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># redis.conf</span></span>
<span class="line"><span style="color:#24292e;">logfile &quot;端口号.log&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>3.5、<code>dump.rdb</code>名</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">dbfilename dump端口号.rdb</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">dbfilename dump端口号.rdb</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>二、从库配置，指定 master</p><ol><li><p>命令行指定，每次与 master 断开之后，都需要重新连接</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># redis 客户端命令行</span></span>
<span class="line"><span style="color:#e1e4e8;">slaveOf 主机ip 主机port</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># redis 客户端命令行</span></span>
<span class="line"><span style="color:#24292e;">slaveOf 主机ip 主机port</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>配置文件指定，在<code>redis.conf</code>中指定 master</p></li></ol><p>三、查看主从复制信息</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># redis客户端命令行</span></span>
<span class="line"><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">replication</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># redis客户端命令行</span></span>
<span class="line"><span style="color:#6F42C1;">info</span><span style="color:#24292E;"> </span><span style="color:#032F62;">replication</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><br><p><strong>去中心化配置</strong></p><p><strong>上一个 Slave 是下一个 Slave 的 Master，接力配置</strong>。Slave 同样可以接受其他 Slave 的连接和同步请求，处于中间的 Slave 作为链条中下一个 Slave的 Master，可以有效减轻 Master 的写压力。<mark>需要注意的是，中途变更两种不同的 master-slave 配置会清除之前的数据，重新建立拷贝最新的数据</mark></p><p>配置步骤同一主多从，仅在<code>slaveOf</code>命令处有改动</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">slaveOf</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">新主库ip</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">新主库port</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">slaveOf</span><span style="color:#24292E;"> </span><span style="color:#032F62;">新主库ip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">新主库port</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><br><p><strong>主从工作原理</strong></p><p>1、为 Master 配置了一个 Slave 之后，不管这个 Slave 是否是第一次连接上 Master，它都会发送一个**<code>SYNC</code>命令（Redis 2.8 版本之前的命令）** Master 请求复制数据。(<strong>从2.8版本开始，Redis 改用可以支持部分数据复制的命令<code>PSYNC</code>去 Master 同步数据</strong>)</p><p>2、Master 收到<code>SYNC</code>命令后，会在后台进行数据持久化通过<code>bgsave</code>生成最新的 RDB 快照文件。持久化期间，Master 会继续接收客户端的请求，它会把这些可能修改数据集的请求缓存在内存中。当持久化进行完毕以后，Master 会把这份 RDB 文件数据集发送给 Slave，Slave 会把接收到的数据进行持久化生成 RDB，然后再加载到内存中。最后，Master 再将之前缓存在内存中的命令发送给 Slave</p><p>3、当 Master 与 Slave 之间的连接由于某些原因而断开时，Slave 能够自动重连 Master，如果 Master 收到了多个Slave 并发连接请求，它只会进行一次持久化，而不是一个连接一次，然后再把这一份持久化的数据发送给多个并发连接的 Slave</p><p>4、当 Master 和 Slave 断开重连后，一般都会对整份数据进行复制。从 Redis 2.8 版本开始，Master 和 Slave 断开重连后支持<strong>部分复制</strong></p><br><p><strong>数据的复制</strong></p><p>1、<strong>全量复制</strong>：Master 会在其内存中创建一个<strong>复制数据用的缓存队列</strong>，缓存最近一段时间的数据，Master 和它所有的 Slave 都维护了复制的数据下标 offset 和 master 的进程 id。当网络连接断开后，slave 会请求 master 继续进行未完成的复制，从所记录的数据下标开始。如果 master 进程 id 变化了，或者从节点数据下标 offset 太旧，已经不在master 的缓存队列里了，那么将会进行一次全量数据的复制</p><p>2、<strong>增量复制</strong>：Master 继续将新的所有收集到的修改命令一次传给 Slave，完成同步。但是只要是重新连接 Master，将会自动执行一次完全的同步（全量复制）</p><br><h3 id="哨兵模式-sentinel" tabindex="-1">哨兵模式（Sentinel） <a class="header-anchor" href="#哨兵模式-sentinel" aria-label="Permalink to &quot;哨兵模式（Sentinel）&quot;">​</a></h3><blockquote><p>Sentinel 哨兵是特殊的 Redis 服务，<strong>不提供读写服务，主要用来监控 Redis 实例节点</strong>。能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库</p></blockquote><p>哨兵架构下，客户端第一次从哨兵找出 Redis 的主节点，后续就直接访问 Redis 的主节点，不会每次都通过 Sentinel 代理访问 Redis 的主节点。当 Redis 的主节点发生变化，哨兵会第一时间感知到，并且将新的 Redis 主节点通知给客户端（这里客户端一般都实现了订阅功能，订阅 Sentinel 发布的节点变动消息）</p><p>在 Redis 3.0 以前的版本要实现集群一般是借助哨兵 Sentinel 工具来监控 master 节点的状态。<mark>如果 master 节点异常，则会做主从切换，将某一台 slave 作为 maste</mark>。</p><p>哨兵的配置略微复杂，并且性能和高可用性等各方面表现一般，特别是在主从切换的瞬间存在访问瞬断的情况。而且哨兵模式只有一个主节点对外提供服务，没法支持很高的并发，且单个主节点内存也不宜设置得过大，否则会导致持久化文件过大，影响数据恢复或主从同步的效率</p><br><p><strong>配置</strong></p><ol><li><p>配置一主多从</p></li><li><p>自定义的 Redis 配置文件目录新建<code>sentinel.conf</code>文件</p></li><li><p>配置哨兵，一组 sentinel 能监控多个 Master</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># sentinel.conf 最后的数字1表示，主机挂掉后Slave投票，看谁得票多让谁接替成为主机</span></span>
<span class="line"><span style="color:#e1e4e8;">sentinel minitor 被检控的主机名 主机ip 主机port 1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># sentinel.conf 最后的数字1表示，主机挂掉后Slave投票，看谁得票多让谁接替成为主机</span></span>
<span class="line"><span style="color:#24292e;">sentinel minitor 被检控的主机名 主机ip 主机port 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>启动哨兵</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># redis目录命令行</span></span>
<span class="line"><span style="color:#B392F0;">redis-sentinel</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/opt/redis/conf/sentinel.conf</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># redis目录命令行</span></span>
<span class="line"><span style="color:#6F42C1;">redis-sentinel</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/opt/redis/conf/sentinel.conf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>注意，<mark>若是原 Master 宕机，就会从剩下的 Slave 中选出新的 Master。原 Master 重新启动之后不再是 Master，而是成为新 Master 的 Slave</mark></p></li></ol><br><p><strong>哨兵 Leader 选举流程</strong></p><p>1、当一个 Sentinel 的 master 服务被某 sentinel 视为客观下线状态后，该 sentinel 会与其他 sentinel 协商选出 sentinel 的 leader 进行故障转移工作。</p><p>2、每个发现 master 服务器进入客观下线的 sentinel 都可以要求其他 sentinel 选自己为 sentinel 的 leader，选举是先到先得。同时每个 sentinel 每次选举都会自增配置纪元（选举周期），每个纪元中只会选择一个 sentinel 的 leader。</p><p>3、如果所有超过一半的 sentinel 选举某 sentinel 作为 leader。之后该 sentinel 进行故障转移操作，从存活的 slave 中选举出新的 master，这个选举过程跟集群的 master 选举很类似</p><p>哨兵集群可以只有一个哨兵节点，Redis 的主从也能正常运行以及选举 Master，如果 Master 挂了，那唯一的那个哨兵节点就是哨兵 leader 了，可以正常选举新 master</p><p>不过为了高可用一般都推荐至少部署三个哨兵节点。推荐奇数个哨兵节点原理跟集群奇数个master节点类似</p><br><h3 id="redis-集群" tabindex="-1">Redis 集群 <a class="header-anchor" href="#redis-集群" aria-label="Permalink to &quot;Redis 集群&quot;">​</a></h3><blockquote><p>Redis Cluster 是一种<strong>分布式去中心化的运行模式</strong>，是在 Redis 3.0 版本中推出的 Redis 集群方案，它将数据分布在不同的服务器上，以此来降低系统对单主节点的依赖，从而提高 Redis 服务的读写性能，它具有复制、高可用和分片特性</p></blockquote><p>使用哨兵模式在数据上有副本数据做保证，在可用性上又有哨兵监控，一旦 master 宕机会选举 salve 节点为 master 节点，这已经满足了我们的生产环境需要，<strong>那为什么还需要使用集群模式呢？</strong></p><p>**哨兵模式归根到底节点还是主从模式，在主从模式下我们可以通过增加 slave 节点来扩展读并发能力，但是没办法扩展写能力和存储能力，存储能力只能是 master 节点能够承载的上限。**所以<mark>为了扩展写能力和存储能力</mark>，就需要引入集群模式</p><p>Redis 集群不需要哨兵也能完成节点移除和故障转移的功能。需要将每个节点设置成集群模式，这种集群模式没有中心节点，可水平扩展，可以线性扩展到上万个节点（官方推荐不超过 1000 个节点）。<strong>Redis 集群的性能和高可用性均优于之前版本的哨兵模式，且集群配置非常简单</strong></p><br><p><strong>Redis 集群在存储的时候如何确定选择哪个节点呢？</strong></p><p>Redis 集群采用的是<strong>类一致性哈希算法</strong>实现节点选择的。Redis 集群将所有数据分成 16384 个<strong>Slot</strong>（槽位），哈希槽类似于数据分区。每个节点负责其中一部分槽位，槽位的信息存储于每个节点中。</p><p>当客户端来连接集群时，它也会得到一份集群的槽位配置信息，并将其缓存在客户端本地。这样当客户端要查找某个 key 时，可以直接定位到目标节点。同时因为槽位的信息可能会存在客户端与服务器不一致的情况，还需要纠正机制来实现槽位信息的校验调整。</p><p><strong>槽位定位算法</strong></p><p>每个键值对都会根据它的 key，被映射到一个哈希槽中，具体执行过程分为两大步。</p><ul><li>根据键值对的 key，按照 CRC16 算法计算一个 16 bit 的值。</li><li>再用 16 bit 值对 16384 取模，得到 <code>0~16383</code> 范围内的模数，每个模数代表一个相应编号的哈希槽，<code>HASH_SLOT = CRC16(key) mod 16384</code></li></ul><p><strong>跳转重定位</strong></p><p>当客户端向一个错误的节点发出了指令，该节点会发现指令的 key 所在的槽位并不归自己管理，这时它会向客户端发送一个特殊的跳转指令携带目标操作的节点地址，告诉客户端去连这个节点去获取数据。客户端收到指令后除了跳转到正确的节点上去操作，还会同步更新纠正本地的槽位映射表缓存，后续所有 key 将使用新的槽位映射表。</p><br><p><strong>Redis 集群节点间的通信机制</strong></p><p>Redis 集群节点间采取**<code>gossip</code>协议**进行通信，维护集群的元数据有两种方式：<mark>集中式和<code>gossip</code></mark></p><p>1、<strong>集中式</strong>优点在于元数据的更新和读取，时效性非常好，一旦元数据出现变更立即就会更新到集中式的存储中，其他节点读取的时候立即就可以立即感知到；不足在于所有的元数据的更新压力全部集中在一个地方，可能导致元数据的存储压力</p><p>2、**<code>gossip</code>**协议包含多种消息，包括 <code>ping</code>，<code>pong</code>，<code>meet</code>，<code>fail</code>等等</p><p>​ <strong><code>ping</code></strong>：每个节点都会频繁给其他节点发送<code>ping</code>，其中包含自己的状态还有自己维护的集群元数据，互相通过<code>ping</code>交换元数据；</p><p>​ <strong><code>pong</code></strong>: 返回<code>ping</code>和<code>meet</code>，包含自己的状态和其他信息，也可以用于信息广播和更新；</p><p>​ <strong><code>fail</code></strong>: 某个节点判断另一个节点<code>fail</code>之后，就发送<code>fail</code>给其他节点，通知其他节点，指定的节点宕机了；</p><p>​ <strong><code>meet</code></strong>：某个节点发送<code>meet</code>给新加入的节点，让新节点加入集群中，然后新节点就会开始与其他节点进行通信，不需要发送形成网络的所需的所有 <code>CLUSTER MEET</code> 命令。发送 <code>CLUSTER MEET</code> 消息以便每个节点能够达到其他每个节点只需通过一条已知的节点链就够了。由于在心跳包中会交换<code>gossip</code>信息，将会创建节点间缺失的链接</p><blockquote><p><code>gossip</code>协议的优点在于元数据的更新比较分散，不是集中在一个地方，更新请求会陆陆续续，打到所有节点上去更新，<strong>有一定的延时，降低了压力</strong>；缺点在于元数据更新有延时可能导致集群的一些操作会有一些滞后。</p></blockquote><br><p><strong>Redis 集群选举原理分析</strong></p><p>当 slave 发现自己的 master 变为 <code>FAIL</code>状态时，便尝试进行 Failover，以期成为新的 master。由于挂掉的 master 可能会有多个 slave，从而存在多个 slave 竞争成为 master 节点的过程， 其过程如下：</p><p>1、slave 发现自己的 master 变为 <code>FAIL</code></p><p>2、将自己记录的集群<code>currentEpoch</code>加1，并广播<code>FAILOVER_AUTH_REQUEST</code>信息</p><p>3、其他节点收到该信息，只有 master 响应，判断请求者的合法性，并发送 <code>FAILOVER_AUTH_ACK</code>，对每一个 epoch 只发送一次 ack</p><p>4、尝试 failover 的 slave 收集 master 返回的 <code>FAILOVER_AUTH_ACK</code></p><p>5、slave 收到超过半数 master 的 ack 后变成新 Master (这里解释了集群为什么至少需要三个主节点，如果只有两个，当其中一个挂了，只剩一个主节点是不能选举成功的)</p><p>6、slave 广播 <code>pong</code>消息通知其他集群节点</p><blockquote><p>从节点并不是在主节点一进入<code>FAIL</code>状态就马上尝试发起选举，而是有一定延迟。一定的延迟确保我们等待<code>FAIL</code>状态在集群中传播，slave 如果立即尝试选举，其它 master 或许尚未意识到 <code>FAIL</code>状态，可能会拒绝投票</p></blockquote><br><p><strong>Redis 集群为什么至少需要三个 master 节点，并且推荐节点数为奇数？</strong></p><p>因为新 master 的选举需要大于半数的集群 master 节点同意才能选举成功，如果只有两个 master 节点，当其中一个挂了， 是达不到选举新 master 的条件的。</p><p>奇数个 master 节点可以在满足选举该条件的基础上节省一个节点，比如三个 master 节点和四个 master 节点的集群相比， 大家如果都挂了一个 master 节点都能选举新 master 节点，如果都挂了两个 master 节点都没法选举新 master 节点了， 所以奇数的 master 节点更多的是从节省机器资源角度出发说的。</p><br><h2 id="消息发布-订阅" tabindex="-1">消息发布/订阅 <a class="header-anchor" href="#消息发布-订阅" aria-label="Permalink to &quot;消息发布/订阅&quot;">​</a></h2><blockquote><p>进程间的一种消息通信模式，发送者（pub）发送消息，订阅者（sub）接收消息</p></blockquote><p>稍作了解即可，生产中消息发布订阅交给MQ来处理</p><br><h2 id="缓存" tabindex="-1">缓存 <a class="header-anchor" href="#缓存" aria-label="Permalink to &quot;缓存&quot;">​</a></h2><br><h3 id="缓存穿透" tabindex="-1">缓存穿透 <a class="header-anchor" href="#缓存穿透" aria-label="Permalink to &quot;缓存穿透&quot;">​</a></h3><blockquote><p>缓存穿透，指的是 key 值在<mark><strong>缓存和数据库中都不存在</strong></mark>。每次针对 key 的请求从缓存中获取不到，请求都会到数据库，从而可能压垮数据库。如发起请求查找 ID 不存在的数据，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击，可能会压垮数据库。</p></blockquote><p><strong>解决方案</strong></p><ol><li><strong>API 接口层增加校验</strong>，如用户鉴权校验，对 ID 做基础校验，ID 小于 0 直接拦截</li><li><strong>缓存空对象</strong>，从缓存取不到的数据，在数据库中也没有取到，这时可以将<code>key-value</code>对写为<code>key-null</code>，缓存有效时间可以设置得短一点，如 30s（设置太长会导致正常情况也没法使用）。这样可以防止攻击用户反复用同一个 Id 暴力攻击</li><li><strong>布隆过滤器</strong>，将所有可能存在的数据哈希到一个足够大的 bitmap 中，一定不存在的数据会被会被这个 bitmap 拦截掉，从而减少了对底层存储系统的查询压力</li></ol><br><h3 id="缓存击穿" tabindex="-1">缓存击穿 <a class="header-anchor" href="#缓存击穿" aria-label="Permalink to &quot;缓存击穿&quot;">​</a></h3><blockquote><p>缓存击穿，指的是在<mark><strong>缓存过期后，有大量的请求并发的请求过期的键</strong></mark>，这时因为缓存已经过期，所有的请求都会发送到数据库中。</p></blockquote><p><strong>解决方案</strong></p><p>1、设置<strong>热点数据永不过期</strong></p><p>2、加<strong>互斥锁</strong></p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">(String key) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String res </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getDataFromCache</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (res </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// tryLock，获取成功，去数据库取数据</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (lock.</span><span style="color:#B392F0;">tryLock</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            res </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getDataFromCache</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (res </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">setDataToCache</span><span style="color:#E1E4E8;">(key, res);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 释放锁资源</span></span>
<span class="line"><span style="color:#E1E4E8;">            lock.</span><span style="color:#B392F0;">unlock</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 等待一段时间后再重新获取数据</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (InterruptedException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> res;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">(String key) {</span></span>
<span class="line"><span style="color:#24292E;">    String res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getDataFromCache</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (res </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// tryLock，获取成功，去数据库取数据</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (lock.</span><span style="color:#6F42C1;">tryLock</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getDataFromCache</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (res </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">setDataToCache</span><span style="color:#24292E;">(key, res);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 释放锁资源</span></span>
<span class="line"><span style="color:#24292E;">            lock.</span><span style="color:#6F42C1;">unlock</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 等待一段时间后再重新获取数据</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> res;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><br><h3 id="缓存雪崩-缓存失效" tabindex="-1">缓存雪崩/缓存失效 <a class="header-anchor" href="#缓存雪崩-缓存失效" aria-label="Permalink to &quot;缓存雪崩/缓存失效&quot;">​</a></h3><blockquote><p>缓存雪崩，是指<mark><strong>缓存中有数据大批量过期，而对过期缓存的查询量又巨大，此时查询都到数据库，引起数据库压力过大</strong></mark>。与缓存击穿不同的是，缓存击穿是并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据在缓存中都查不到从而查数据库</p></blockquote><p><strong>解决方案</strong></p><p>1、缓存数据的<strong>过期时间设置随机</strong>，防止同一时间大量数据过期现象发生</p><p>2、通过<strong>加锁</strong>或者<strong>队列</strong>来<strong>控制读数据库写缓存的线程数量</strong>，比如某个 key 只允许一个线程查询数据和写缓存，其他线程等待。</p><p>3、如果缓存数据库是分布式部署，将热点数据均匀分布在不同的缓存数据库中</p><p>4、设置热点数据永不过期</p><p>5、设置<strong>缓存标记</strong></p><p>缓存标记，记录缓存数据是否过期，如果过期会触发通知另外的线程在后台去更新缓存。将缓存数据的过期时间设置为缓存标记过期时间的二倍。当标记缓存 key 过期后，实际缓存还能把旧数据返回给调用端，直到另外的线程在后台更新完成，才会返回新缓存。</p><br><h2 id="淘汰策略" tabindex="-1">淘汰策略 <a class="header-anchor" href="#淘汰策略" aria-label="Permalink to &quot;淘汰策略&quot;">​</a></h2><blockquote><p>因为 Redis 是基于内存的，内存的空间是非常宝贵的，所以数据不可能无上限的存储，必定会存在一个淘汰策略定期删除一些 key</p></blockquote><br><h3 id="缓存淘汰策略" tabindex="-1">缓存淘汰策略 <a class="header-anchor" href="#缓存淘汰策略" aria-label="Permalink to &quot;缓存淘汰策略&quot;">​</a></h3><blockquote><p>通过统计访问频率，将访问频率最少，即最不经常使用的 KV 淘汰</p></blockquote><p>Redis 的缓存淘汰策略有两种：<strong>定时删除</strong>和<strong>惰性删除</strong></p><p>如果 Redis 采用的是主从架构，那么以上两种淘汰策略是基于 Redis 主库的，每当主库触发了缓存淘汰策略，即会在 AOF 文件写入一个<code>del</code>命令，从库的淘汰策略是基于主从同步来完成的。</p><h4 id="定时删除-主动删除" tabindex="-1">定时删除/主动删除 <a class="header-anchor" href="#定时删除-主动删除" aria-label="Permalink to &quot;定时删除/主动删除&quot;">​</a></h4><p>Redis 将每个设置了过期时间的 key 放到一个独立的 Hash 表中，默认每秒定时遍历这个 hash 表，而不是整个 Redis 内存空间。并且 Redis 不会遍历所有的 key，而是采用一种贪心策略。步骤如下：</p><p>1、从过期 key 字典中，随机找 20 个 key；</p><p>2、删除 20 个 key 中过期的 key；</p><p>3、如果 2 中过期的 key 超过 1/4，则重复第一步</p><blockquote><p>如果有大量的 key 在同一时间段内过期，就会造成数据库的集中访问，就是<strong>缓存雪崩</strong></p></blockquote><h4 id="惰性删除-被动删除" tabindex="-1">惰性删除/被动删除 <a class="header-anchor" href="#惰性删除-被动删除" aria-label="Permalink to &quot;惰性删除/被动删除&quot;">​</a></h4><p>因为定时删除会漏掉一部分已过期的 key 而没有被删除，所以 Redis 引入一个惰性删除来删除那些漏掉了的 key。客户端访问的时候，会对这个 key 的过期时间进行检查，如果过期了就立即删除</p><br><h3 id="内存淘汰机制-redis-内存满触发" tabindex="-1">内存淘汰机制（Redis 内存满触发） <a class="header-anchor" href="#内存淘汰机制-redis-内存满触发" aria-label="Permalink to &quot;内存淘汰机制（Redis 内存满触发）&quot;">​</a></h3><blockquote><p>如果定期删除漏掉了大量的 key，且后面也没有访问这些 key，没有触发惰性删除，那么内存中会残留大量无用 key。直到某一个时刻，Redis 内存总会被填满，此时 Redis 会触发内存淘汰机制</p></blockquote><p>Redis 可以设置内存的最大使用量 <code>maxmemory &lt;bytes&gt;</code>，内存使用到达限度时会根据设置的策略进行内存管理，默认策略为 <code>maxmemory-policy noeviction</code>。</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>volatile-lru（Least Recently Used）</td><td>从 <code>已设置过期时间</code> 数据中淘汰 <code>最近最少使用</code> 数据</td></tr><tr><td>volatile-lfu（Least Frequently Used）</td><td>从 <code>已设置过期时间</code> 数据中淘汰 <code>最不经常使用</code> 数据</td></tr><tr><td>volatile-ttl</td><td>从 <code>已设置过期时间</code> 数据中淘汰 <code>将要过期</code> 数据</td></tr><tr><td>volatile-random</td><td>从 <code>已设置过期时间</code> 数据中淘汰 <code>随机</code> 数据</td></tr><tr><td>allkeys-lru</td><td>当 <code>内存不足写入新数据</code> 时，淘汰 <code>最近最少使用</code> 数据</td></tr><tr><td>allkeys-lfu</td><td>当 <code>内存不足写入新数据</code> 时，淘汰 <code>最不经常使用</code> 数据</td></tr><tr><td>allkeys-random</td><td>当 <code>内存不足写入新数据</code> 时，淘汰 <code>随机选择</code> 数据</td></tr><tr><td>noeviction</td><td>当 <code>内存不足写入新数据</code> 时，写入操作会报错，同时不删除数据</td></tr></tbody></table><br><h2 id="渐进式-rehash" tabindex="-1">渐进式 Rehash <a class="header-anchor" href="#渐进式-rehash" aria-label="Permalink to &quot;渐进式 Rehash&quot;">​</a></h2><p>在 Redis 中，键值对（Key-Value）存储方式是由<strong>字典（Dict）<strong>保存的，而字典底层是通过</strong>哈希表</strong>来实现的。通过哈希表中的节点保存字典中的键值对。以 HashMap 为例，当发生哈希冲突时，会进行 Resize 的操作，Redis 也一样。</p><p>在 Redis 的具体实现中，使用了一种叫做<strong>渐进式哈希（Rehash）<strong>的机制来</strong>提高字典的缩放效率</strong>，避免 rehash 对服务器性能造成影响。</p><p>假如 Redis 中有大量的 key，一次性对全部的数据进行 Rehash，可能会导致 Redis 在一段时间内停止服务。在 Redis中，哈希表扩容需要维护两个哈希表，分别是<code>哈希表 0</code>和<code>哈希表 1</code> 。<mark>Rehash 过程需要将<code>哈希表 0</code>里面的所有键值对 rehash 到<code>哈希表 1</code> 里面。<strong>这个 rehash 动作并不是一次性完成的， 而是分多次、渐进式地完成的。</strong></mark></p><br><p><strong>rehash 步骤</strong></p><p>1、为哈希表 1 分配空间，且空间大小为哈希表 0 的两倍， 让字典同时持有哈希表 0 和哈希表 1 两个哈希表</p><p>2、在字典中维持一个索引计数器变量 <em>rehashidx</em>（哈希表的下标） ， 并将它的值设置为 0 ， 表示 rehash 工作正式开始</p><p>3、在 rehash 进行期间，每次对字典执行 CRUD 操作时， 程序除了执行指定的操作以外， 还会顺带将哈希表 0 在 <em>rehashidx</em> 索引上的键值对 rehash，并放到哈希表 1。 当 rehash 工作完成之后， 程序将 rehashidx 属性的值加上 1</p><p>4、随着字典操作的不断执行，哈希表 0 的所有键值对都会被 rehash 至哈希表 1， 这时程序将 <em>rehashidx</em> 属性的值设为 -1 ， 表示 rehash 操作已完成。</p><br><p><strong>rehash 期间的 CRUD 操作</strong></p><p>因为在进行渐进式 rehash 的过程中， 字典会同时使用 <code>哈希表0</code> 和 <code>哈希表1</code> 两个哈希表， 所以在渐进式 rehash 进行期间， <strong>字典的 CRUD 操作会在两个哈希表上进行</strong>。</p><p>在渐进式 rehash 执行期间， 新添加到字典的键值对一律会被保存到 <code>哈希表1</code> 里面， 而 <code>哈希表0</code>则不再进行任何添加操作： 这一措施保证了 <code>哈希表0</code> 包含的键值对数量会只减不增， 并随着 rehash 操作的执行而最终变成空表。要在字典里面查找一个键的话， 程序会先在 <code>哈希表0</code> 里面进行查找， 如果没找到的话， 就会继续到 <code>哈希表1</code> 里面进行查找。</p><br><p><strong>rehash 带来的问题</strong></p><p>渐进式 rehash 避免了 Redis 阻塞，是比较好的一种方法。但是由于在 rehash 时需要分配一个新的哈希表，在 rehash 期间，同时有两个哈希表在使用，会使得 redis 内存使用量增加。如果当前 Redis 结点的内存占用量达到 <em>maxmemory</em>，会触发内存淘汰机制，导致大量的 Key 被驱逐。</p><br><h2 id="分布式锁-redlock" tabindex="-1">分布式锁 RedLock <a class="header-anchor" href="#分布式锁-redlock" aria-label="Permalink to &quot;分布式锁 RedLock&quot;">​</a></h2><blockquote><p>RedLock (Redis Distributed Lock)，即使用 Redis 实现的分布式锁</p></blockquote><h3 id="分布式存储带来的问题" tabindex="-1">分布式存储带来的问题 <a class="header-anchor" href="#分布式存储带来的问题" aria-label="Permalink to &quot;分布式存储带来的问题&quot;">​</a></h3><blockquote><p>在大的并发下，同时操作数据库与缓存会存在数据不一致性问题</p></blockquote><p><strong>MySQL 和 Redis 双写/读写不一致怎么办？</strong></p><p>1、双写不一致</p><img src="`+e+'" alt="image-20210810141933541" style="zoom:50%;"><p>2、读写不一致</p><img src="'+o+`" alt="image-20210810142733895" style="zoom:50%;"><p><strong>解决方案</strong></p><ol><li><p>对于<strong>并发几率很小</strong>的数据（如个人维度的订单数据、用户数据等)，这种几乎不用考虑这个问题，很少会发生缓存不一致，可以<strong>给缓存数据加上过期时间</strong>，每隔一段时间触发读的主动更新即可。</p></li><li><p><strong>并发很高</strong>，如果业务上<strong>能容忍短时间的缓存数据不一致</strong>（如商品名称，商品分类菜单等）<strong>，缓存加上过期时间</strong>依然可以解决大部分业务对于缓存的要求。</p></li><li><p>如果<strong>不能容忍缓存数据不一致</strong>，可以通过<strong>加读写锁</strong>保证并发读写或写写的时候按顺序排好队，读读的时候相当于无锁</p></li><li><p>也可以用阿里开源的 <strong>canal 通过监听数据库的 binlog 日志</strong>及时的去修改缓存，但是引入了新的中间件，增加了系统的复杂度</p><blockquote><p>canal 的工作原理就是把自己<strong>伪装成 MySQL slave</strong>，模拟 MySQL slave 的交互协议向 MySQL Mater 发送 dump 协议，MySQL mater 收到 canal 发送过来的 dump 请求，开始推送 binary log 给 canal，然后 canal 解析 binary log，再发送到存储目的地。</p></blockquote></li></ol><p>以上针对的都是<strong>读多写少</strong>的情况加入缓存提高性能，<mark>如果<strong>写多读多</strong>的情况又不能容忍缓存数据不一致，那就没必要加缓存了，可以直接操作数据库</mark>。<strong>放入缓存的数据应该是对实时性、一致性要求不是很高的数据。</strong></p><blockquote><p>对于分布式应用，显然简单的读写锁是满足不了的，此时就需要用分布式锁来解决这个问题了。</p></blockquote><p><strong>分布式锁的特点</strong></p><p>1、互斥性：同一时刻只能用一个线程持有锁</p><p>2、可重入性：同一个节点上的同一个线程获取了锁之后能够再次获取</p><p>3、锁超时处理：支持锁超时，防止死锁</p><p>4、高性能和高可用：加锁和解锁需要高效，同时也需要保证高可用，防止分布式锁失效</p><p>5、阻塞和非阻塞：能够及时从阻塞状态中被唤醒</p><h3 id="分布式锁实现" tabindex="-1">分布式锁实现 <a class="header-anchor" href="#分布式锁实现" aria-label="Permalink to &quot;分布式锁实现&quot;">​</a></h3><blockquote><p>4 种实现方式</p></blockquote><p><a href="https://juejin.cn/post/6844903830442737671" target="_blank" rel="noreferrer">基于Redis的分布式锁的实现</a></p><p><strong><u>一、加锁的实现</u></strong></p><h4 id="setnx-expire" tabindex="-1">setnx + expire <a class="header-anchor" href="#setnx-expire" aria-label="Permalink to &quot;setnx + expire&quot;">​</a></h4><blockquote><p>错误的做法</p></blockquote><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tryLock</span><span style="color:#E1E4E8;">(String key,String requset,</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> timeout) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Long result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> jedis.</span><span style="color:#B392F0;">setnx</span><span style="color:#E1E4E8;">(key, requset);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// result = 1时，设置成功，否则设置失败</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (result </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1L</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> jedis.</span><span style="color:#B392F0;">expire</span><span style="color:#E1E4E8;">(key, timeout) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1L</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tryLock</span><span style="color:#24292E;">(String key,String requset,</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> timeout) {</span></span>
<span class="line"><span style="color:#24292E;">    Long result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> jedis.</span><span style="color:#6F42C1;">setnx</span><span style="color:#24292E;">(key, requset);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// result = 1时，设置成功，否则设置失败</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (result </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> jedis.</span><span style="color:#6F42C1;">expire</span><span style="color:#24292E;">(key, timeout) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>setnx 和 expire 是分开的两步操作，不具有原子性，如果执行完第一条指令应用异常或者重启了，锁将无法过期。一种改善方案就是使用 Lua 脚本来保证原子性（包含 setnx 和 expire 两条指令）</p><h4 id="lua-脚本" tabindex="-1">Lua 脚本 <a class="header-anchor" href="#lua-脚本" aria-label="Permalink to &quot;Lua 脚本&quot;">​</a></h4><blockquote><p>包含 setnx 和 expire 两条指令</p></blockquote><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tryLock_with_lua</span><span style="color:#E1E4E8;">(String key, String UniqueId, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> seconds) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String lua_scripts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;if redis.call(&#39;setnx&#39;,KEYS[1],ARGV[1]) == 1 then&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;redis.call(&#39;expire&#39;,KEYS[1],ARGV[2]) return 1 else return 0 end&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; keys </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; values </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    keys.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">    values.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(UniqueId);</span></span>
<span class="line"><span style="color:#E1E4E8;">    values.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(String.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(seconds));</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> jedis.</span><span style="color:#B392F0;">eval</span><span style="color:#E1E4E8;">(lua_scripts, keys, values);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//判断是否成功</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1L</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tryLock_with_lua</span><span style="color:#24292E;">(String key, String UniqueId, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> seconds) {</span></span>
<span class="line"><span style="color:#24292E;">    String lua_scripts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;if redis.call(&#39;setnx&#39;,KEYS[1],ARGV[1]) == 1 then&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;redis.call(&#39;expire&#39;,KEYS[1],ARGV[2]) return 1 else return 0 end&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; keys </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; values </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    keys.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">    values.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(UniqueId);</span></span>
<span class="line"><span style="color:#24292E;">    values.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(String.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(seconds));</span></span>
<span class="line"><span style="color:#24292E;">    Object result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> jedis.</span><span style="color:#6F42C1;">eval</span><span style="color:#24292E;">(lua_scripts, keys, values);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//判断是否成功</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="set-key-value-ex-nx" tabindex="-1">set key value ex nx <a class="header-anchor" href="#set-key-value-ex-nx" aria-label="Permalink to &quot;set key value ex nx&quot;">​</a></h4><blockquote><p>正确做法</p></blockquote><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># EX seconds: 设定过期时间，单位为秒</span></span>
<span class="line"><span style="color:#6A737D;"># PX milliseconds: 设定过期时间，单位为毫秒</span></span>
<span class="line"><span style="color:#6A737D;"># NX: 仅当key不存在时设置值</span></span>
<span class="line"><span style="color:#6A737D;"># XX: 仅当key存在时设置值</span></span>
<span class="line"><span style="color:#B392F0;">SET</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">value</span><span style="color:#E1E4E8;"> [EX </span><span style="color:#9ECBFF;">seconds]</span><span style="color:#E1E4E8;"> [PX </span><span style="color:#9ECBFF;">milliseconds]</span><span style="color:#E1E4E8;"> [NX</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">XX]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># EX seconds: 设定过期时间，单位为秒</span></span>
<span class="line"><span style="color:#6A737D;"># PX milliseconds: 设定过期时间，单位为毫秒</span></span>
<span class="line"><span style="color:#6A737D;"># NX: 仅当key不存在时设置值</span></span>
<span class="line"><span style="color:#6A737D;"># XX: 仅当key存在时设置值</span></span>
<span class="line"><span style="color:#6F42C1;">SET</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">value</span><span style="color:#24292E;"> [EX </span><span style="color:#032F62;">seconds]</span><span style="color:#24292E;"> [PX </span><span style="color:#032F62;">milliseconds]</span><span style="color:#24292E;"> [NX</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">XX]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong><u>二、释放锁的实现</u></strong></p><p>释放锁时需要验证 value 值，也就是说我们在获取锁的时候需要设置一个 value，不能直接用<code>del key </code>这种粗暴的方式，因为直接<code>del key</code>任何客户端都可以进行解锁。所以<strong>解锁时，我们需要判断锁是否属于自己的，基于 value 值来判断</strong></p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Lua 脚本的方式，尽量保证原子性</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">releaseLock_with_lua</span><span style="color:#E1E4E8;">(String key,String value) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String luaScript </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;if redis.call(&#39;get&#39;,KEYS[1]) == ARGV[1] then &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;return redis.call(&#39;del&#39;,KEYS[1]) else return 0 end&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> jedis.</span><span style="color:#B392F0;">eval</span><span style="color:#E1E4E8;">(luaScript, Collections.</span><span style="color:#B392F0;">singletonList</span><span style="color:#E1E4E8;">(key), Collections.</span><span style="color:#B392F0;">singletonList</span><span style="color:#E1E4E8;">(value)).</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1L</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Lua 脚本的方式，尽量保证原子性</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">releaseLock_with_lua</span><span style="color:#24292E;">(String key,String value) {</span></span>
<span class="line"><span style="color:#24292E;">    String luaScript </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;if redis.call(&#39;get&#39;,KEYS[1]) == ARGV[1] then &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;return redis.call(&#39;del&#39;,KEYS[1]) else return 0 end&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> jedis.</span><span style="color:#6F42C1;">eval</span><span style="color:#24292E;">(luaScript, Collections.</span><span style="color:#6F42C1;">singletonList</span><span style="color:#24292E;">(key), Collections.</span><span style="color:#6F42C1;">singletonList</span><span style="color:#24292E;">(value)).</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><blockquote><p>⚠ 使用 <code>set key value [EX seconds][PX milliseconds][NX|XX]</code> 命令实际上在 Redis 集群的时候也会出现问题，比如说 A 客户端在 Redis 的 master 节点上拿到了锁，但是这个加锁的 key 还没有同步到 slave 节点，master 故障，发生故障转移，一个 slave 节点升级为 master 节点，B 客户端也可以获取同个 key 的锁，但客户端 A 也已经拿到锁了，这就导致多个客户端都拿到锁</p></blockquote><h4 id="redisson" tabindex="-1">Redisson <a class="header-anchor" href="#redisson" aria-label="Permalink to &quot;Redisson&quot;">​</a></h4><blockquote><p>Redisson 是在 Redis 基础上实现的一款分布式服务相关工具。底层使用 netty 框架，并提供了与 Java 对象相应的分布式对象，分布式集合和分布式锁和同步器，分布式服务等一系列 Redisson 分布式对象。</p></blockquote><p>对于 Java 而言，Jedis 是 Redis 的 Java 客户端，除了 Jedis 之外，Redisson 也是 Java 的客户端，Jedis 是阻塞式 I/O，而 Redisson 底层使用 Netty 可以实现非阻塞 I/O，该客户端封装了锁的实现，继承了 J.U.C 的 Lock 接口，所以我们可以像使用 ReentrantLock 一样使用 Redisson</p><p><strong>Redlock 算法 与 Redisson 实现</strong></p><h2 id="关于秒杀系统设计的一点思考" tabindex="-1">关于秒杀系统设计的一点思考 <a class="header-anchor" href="#关于秒杀系统设计的一点思考" aria-label="Permalink to &quot;关于秒杀系统设计的一点思考&quot;">​</a></h2><p><strong>关键问题</strong></p><p>秒杀系统其实主要解决两个问题，<strong>并发读和并发写</strong>。并发读的核心优化理念是尽量减少用户到服务端读取数据，或者让用户读更少的数据。并发写的处理原则也一样，可以在数据库层独立出来一个库，做特殊处理。另外还要对秒杀系统做一些保护措施，针对意料之外情况的保底方案，防止最坏情况发生。</p><p><strong>架构要求</strong></p><p>1、<strong>高性能</strong>，秒杀设计大量的并发读和写，因此支持高并发访问这点是非常关键的。对应的方案比如动静分离方案（CDN）、热点的预热与隔离、请求的削峰与分层过滤、服务端的优化等。</p><p>2、<strong>一致性</strong>，秒杀中商品减库存的实现方式同样关键。可想而知，有限数量的商品在同一时刻被很多被的请求同时来减库存，减库存又分为拍下减库存和付款减库存以及预扣款等几种，在大并发更新的过程中都要保证数据的准确性。</p><p>3、<strong>高可用</strong>，现实中难免会出现一些在系统设计时未考虑到的情况，所以要保证高可用的正确定，还要设计一个保底的方案，以便在最坏情况发生时仍然能够从容应对</p><p><strong>前置步骤</strong></p><p>1、<strong>准备阶段</strong>，也叫做系统预热阶段，会提前预热秒杀系统的业务数据。秒杀开始前用户往往会不断刷新秒杀页面，此时可以将秒杀商品存入 Redis 进行预热，并将过期时间设置到比秒杀结束稍晚的时刻。</p><p>2、<strong>秒杀阶段</strong>，这个阶段主要是秒杀活动的过程，会产生瞬时的高并发流量，对系统资源会造成巨大的冲击，在秒杀阶段一定要做好系统防护。可以利用 MQ 进行异步下单，单独使用一个库来处理数据等。</p><p>3、<strong>结算阶段</strong>，用户抢到订单后的后续操作，如何进行结算，异常问题处理，商品回仓处理等。</p><p><strong>异步下单流程</strong></p><p>1、用户发起秒杀请求</p><p>1）检测验证码是否正确</p><p>2）是否需要进行限流</p><p>3）发送 MQ</p><p>2、异步处理秒杀订单</p><p>1）判断活动是否结束</p><p>2）判断请求是否属于黑名单</p><p>3）扣减缓存中的库存数量</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://www.jianshu.com/p/c2841d65df4c" target="_blank" rel="noreferrer">死磕Redis5.0之跳跃表)</a></p><p><a href="https://mp.weixin.qq.com/s/Pc8GWsRbqpnUC6ExMXtX9g" target="_blank" rel="noreferrer">Redis(2)——跳跃表</a></p><p><a href="https://www.cnblogs.com/hunternet/p/11248192.html" target="_blank" rel="noreferrer">Redis数据结构——跳跃表 - Mr于 - 博客园 (cnblogs.com)</a></p><p><a href="https://juejin.cn/post/6991080701365846046" target="_blank" rel="noreferrer">Redis系列-我用1W字总结了所有的点，确定不了解一下吗？</a></p><p><a href="https://juejin.cn/post/6844903830442737671" target="_blank" rel="noreferrer">基于Redis的分布式锁实现</a></p><p><a href="https://juejin.cn/post/6844904134764658702" target="_blank" rel="noreferrer">部门老大：redis 分布式锁再这么用，我就劝退你</a></p><p><a href="https://juejin.cn/post/7049148028875178020" target="_blank" rel="noreferrer">https://juejin.cn/post/7049148028875178020</a></p>`,404),t=[c];function y(E,i,F,b,d,u){return n(),a("div",null,t)}const g=s(r,[["render",y]]);export{C as __pageData,g as default};
